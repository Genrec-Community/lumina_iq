{
  "text": "1\n \nBACHELOR OF COMPUTER APPLICATIONS (BCA)\n \n \nCOBOL\n \n \nCONTENTS\n \n \nSyllabus\n \n \nUNIT \n–\n1\n \n \n \n \n \n \n \n \n \n    PAGE NO\n \n             Lesson\n-\n1    Introduction to COBOL\n \n    1\n \n \n \nLesson\n-\n2\n \nDivisions of COBOL\n \n \n \n \n \n             \n9\n \n \n \n \nLesson\n-\n3\n \nPicture clause characteristics\n \n \n \n \n1\n6\n \n         \n    Lesson\n-\n4\n \nEditing\n \n \n \n \n \n \n \n20\n \n             Lesson\n-\n5\n \nLevel Structure\n \n \n \n \n \n \n2\n6\n \n \nUNIT \n–\n 2\n \n             Lesson\n-\n6    Data Movement verb: MOVE\n \n \n \n \n30\n \n \n \nLesson\n-\n7\n \nArithmetic Verbs\n \n \n \n \n \n \n34\n \n \n \nLesson\n-\n8\n \nInput and Output Verbs\n \n \n \n \n \n41\n \n             Lesson\n-\n9\n \nCorresponding O\nptions\n \n \n \n \n \n48\n \n             Lesson\n-\n10\n \nPrograms using Arithmetic Verbs\n \n \n \n \n54\n \n \n \nUNIT \n–\n \n3\n \n             Lesson\n-\n11  Conditions\n \n \n \n \n \n \n \n60\n \n \n \nLesson\n-\n12\n \nConditionals Statements\n \n \n \n \n \n70\n \n \n \n \nLesson\n-\n13\n \nPERFORM statements\n \n \n \n \n \n77\n \n             Lesson\n-\n14\n \nRENAMES & REDEFINES C\nlauses\n \n \n \n82\n \n             Lesson\n-\n15\n \nPrograms\n \n \n \n \n \n \n \n86\n \n \nUNIT\n–\n  \n4\n \n             Lesson\n-\n16  Sequential Files\n \n \n \n \n \n \n92\n \n \n \nLesson\n-\n17\n \nDirect Access Files\n \n \n \n \n \n \n9\n8\n \n \n \n \nLesson\n-\n18\n \nIndexed Sequential Files\n \n \n \n \n           10\n2\n \n             Lesson\n-\n19\n \nSorting and Merging of Fi\nles\n \n \n \n           107\n \n             Lesson\n-\n20\n \nPrograms\n \n \n \n \n \n \n           114\n \n \nUNIT \n–\n \n5\n \n             Lesson\n-\n21  Table Handling\n \n \n \n \n \n           123\n \n \n \nLesson\n-\n22\n \nIndexed Tables & Index Names\n \n \n \n           128\n \n \n \n \nLesson\n-\n23\n \nSearch & Start Verbs\n \n \n \n \n           132\n \n     \n        Lesson\n-\n24\n \nPrograms using OCCURS & Screen Section\n \n           136\n \n             Lesson\n-\n25\n \nList of Programs\n \n \n \n \n \n           142\n \n \n This watermark does not appear in the registered version - http://www.clicktoconvert.com\n \n2\n \nUNIT \n–\n \nI\n \n \nLESSON \n–\n \n1\n: \nINTRODUCTION TO COBOL\n \nCONTENTS\n \n1.0\n \nAims and Objectives\n \n1.1\n \nHistory of COBOL\n \n1.2  \n \nFORMAT FOR COBOL PROGR\nAMS\n \n1.3\n \nSTRUCTURE OF A COBOL PROGRAM\n \n1.4\n \nCHARACTER SET \n \n1.5\n \nCOBOL WORDS\n \n1.6\n \nDATA NAMES AND IDENTIFIERS\n \n1.7 \n \nLITERALS  \n \n1.8\n \nLanguage Description Notation\n \n1.9 \n \nLet us Sum up\n \n1.10\n \nLesson\n-\nend Activities\n \n1.11\n \nPoints for Discussion\n \n1.12\n \nReferences\n \n1.0\n \nAIMS AND OBJECTIVES \n \nIn t\nhis lesson, the learner will be introduced the History of Cobol , Structure of a \nCOBOL program, Character set, words, data names and identifiers and Literals of COBOL. \nThe objective here is to familiarize him the prerequisites to understand the language.\n \n1\n.1\n \nHISTORY OF COBOL\n \n0\nIn 1959, the new language named COBOL (\nC\nO\nmmon \nB\nusiness \nO\nriented \nL\nanguage) \nwas introduced keeping in mind the business purpose applications. \n \nThe board of directorate which is known as CODASYL (Conference on DATA System \nLanguage) COBOL \nprogramming language committee established a COBOL maintenance \ncommittee to keep COBOL in step with the times. The first COBOL compiler became \navailable in early 1962. The next version with some new additions was published in 1965. In \nAugust 1968 a standar\nd version of the language was approved by the American National \nStandard Institute (ANSI). This standard version was again modified in 1974 and is known as \nANSI\n-\n74 COBOL or COBOL \n-\n74.  The revision process has been continuous and in 1985 a \nrevised standard\n was introduced. This standard was known as COBOL\n-\n85.\n \n1.2 \n \nFORMAT FOR COBOL PROGRAMS\n \nCOBOL is a high\n-\nlevel language. Hence, a COBOL program can be executed on a \ncomputer for which a COBOL compiler is available. The compiler translates a COBOL This watermark does not appear in the registered version - http://www.clicktoconvert.com\n \n3\n \nsource progra\nm into the machine language object program. This object program  is really \nexecuted.\n \nCOBOL programs are written in coding sheets. There are 80 columns in a line of the \ncoding sheet. The page number is coded in columns 1\n-\n3 and the line numbers are coded in \ncolumns 4\n-\n6. The page and line numbers together is called the sequence number. Depending \non the type, the entries are coded both from column 8 or column 12 and in both cases it can \nbe continued up to column 72. Columns 73\n-\n80 can be used to write some ident\nification. The \ncompiler ignores anything that is given in columns 73\n-\n80 except when a printed copy of the \nprogram is provided by the compiler in which case the entries in columns 73\n-\n80 are also \nlisted. The use of the sequence number is also optional and ca\nn be omitted. However, when \nsequence numbers are provided they must appear in ascending order.\n \nColumn\n          \n                        \nField\n \n1\n-\n3\n \n \n \n \nPage Number\n \n4\n-\n6\n \n \n \n \nLine Number  (1\n-\n6 Sequence Number)\n \n7\n \n \n \n \nContinuation / Comment \n \n8\n-\n11\n \n \n \n \nA \n–\n Margin / Area\n A\n \n12\n-\n72\n \n \n \n \nB\n-\n Margin /Area B\n \n73\n-\n80                                       Identification\n \n         \n \nIn COBOL there are two types of entries known as margin A and margin B entries. \nMargin A entries start from column 8, 9, 10 or 11 and margin B entries start \nfrom column 12 \nor anywhere after 12.\n \nAn asterisk (*) in column 7 indicates a comment line and the entry is not compiled to \nproduce object code. Comment lines are actually some notes revealing the intentions of the \nprogrammer. Since the compiler ignores the\nm, anything can be included as comments. \nComment lines can appear anywhere after the first line of the COBOL program. A comment \nline can also be indicated by using the character slash ( / ) in column 7. But in this case the \ncomment line will be printed aft\ner causing a page ejection (i.e., after skipping to the top of the \nnext page).\n \n 1.3 \nSTRUCTURE OF A COBOL PROGRAM\n \nEvery COBOL program must have the following 4 divisions in the order in which they \nare specified below.\n \n1.\n \nIdentification division\n \n2.\n \nEnvironment Div\nision\n \n3.\n \nData Division\n \n4.\n \nProcedure Division\n \n \nIn the Identification division the details about the author, date of writing the program etc \nwill be specified.\n \nIn the Environment division, the details about the computer environment under which \nthe program was writ\nten and compiled etc will be notified.\n \nIn the Data division, the variables that are used by the program will be defined and it is \nan important division for the program.\n This watermark does not appear in the registered version - http://www.clicktoconvert.com\n \n4\n \nIn the procedure division, all the programming statements (Executable Cobol \nstatements)\n will be written and it is the most important division.\n \nUnder the divisions there are various sections intended for specific purposes. To name a \nfew, working\n-\nstorage section and File section come under Data division. Their purpose will \nbe to allocate memor\ny space for the variables and to notify the files that are to be used with \nthe program.\n \nA statement of a COBOL program can be written in one or more coding lines. To \ncontinue in the next line one has to use a hyphen (\n-\n) in column 7.\n \n 1.4 \nCHARACTER SET \n \nTo \nlearn any language, first one must know the alphabets of the language and they are \nknown as character set in general. There are 5\n0\n different characters in COBOL character set. \nThey are listed below.\n \n0\n-\n9\n \n(10 numerals)\n \nA\n-\nZ\n \n(26 English alphabets\n-\nonly capital \nletters)\n \n–\n \n(minus sign or hyphen)\n \n+ \n \n(Plus sign)\n \n*          (Asterisk)\n \n/ \n \n(Slash)\n \n0\n= \n \n(Equal sign)\n \n$          (Currency sign)\n \n,\n \n(Comma)\n \n;\n \n \n(Semi colon)\n \n. \n \n(Period or decimal point)\n \n“ \n \n(Quotation mark)\n \n( \n \n(Left Parenthesis )\n \n) \n \n(Right Parenthesis)\n \n>        \n  (Greater than symbol)\n \n< \n \n(Less than symbol)\n \nThe characters \n0\n-\n9\n are called \nnumeric characters\n or \ndigits\n. The characters \nA\n-\nZ\n are \ncalled \nletters\n and the remaining characters are called \nspecial characters\n. The space or blank \ncharacter in certain cases is tre\nated as a letter.\n \n1.5 \nCOBOL WORDS\n \nA COBOL word can  be formed using the following characters:\n \n \n \n \n \n0\n-\n9\n \n \n \n \n \nA\n-\nZ   \n \n(a\n-\nz)\n \n \n \n \n \n-\n   \n \n(hyphen)\n \n \nThe following rules must be adhered in forming COBOL words.\n \n(i)\n \nA word cannot begin or end with a hyphen.\n \n(ii)\n \nA word can have \nat the maximum 30 characters.\n \n(iii)\n \nOne of the characters must be a letter. Some compilers put the additional \n \nrestrictions that the first character must be a letter.\n \n \n(iv)\n \nExcept hyphen (\n-\n) no special character allowed.\n This watermark does not appear in the registered version - http://www.clicktoconvert.com\n \n5\n \nExamples\n \n \nValid Word\n \n \n \n \nInvalid Word & R\neason\n \n \n \nemp\n-\nsal \n \n \n \n \n-\npay    ( it starts with a hyphen)\n \n \nTOTAL\n-\nMARK  \n \n \n \n \n \n \n \nTOTAL\n   \nMARK (blank space embedded) \n \n \n \n \nThere are 2 types of words in COBOL. A COBOL word can be either a user\n-\ndefined \nword or reserved word. The reserved words are used in COBOL st\natements and entries for \nspecific purposes by the COBOL compiler.\n \n Some reserved words are given below:\n \nADD, SUBTRACT, DIVIDE, MULTIPLY, IF, PERFORM etc. \n \n To know the complete set of reserved words of COBOL one can refer to the manual \nsupplied with the co\nmpiler.  Any attempt by the programmer to declare the reserved word \nwill be indicated as an error during the compilation stage of the program.\n \n1.6\n \nDATA NAMES AND IDENTIFIERS\n \nA \ndata name\n gives reference to the storage space in the memory where the actual va\nlue \nis stored. This value takes part in the operation when that particular data name is used in the \nPROCEDURE DIVISION.\n \nIdentifier\n is a general term which means the single data name or a data name qualified, \nindexed or subscripted. Data names are only one \nform of identifiers. A data name must be a \nuser\n-\ndefined word and it cannot be a reserved word.\n \nExamples\n \n \n \nValid Data Names\n \n \n \n \nInvalid Data Names\n \n \n \n \nNET\n-\nSALARY\n \n \n \nCOMPUTE  (Reserved word)\n \n \n \nTOT\n-\nMARK\n \n \n \n \n \nMULTIPLY  (Reserved word)   \n \n \n \nN100 \n \n \n \n \n \n23    (No lett\ner)\n \n1.7  LITERALS  \n \nThe actual values can also appear in a program. Such values are known as \nliterals\n.\n \nFor Example, the statement MOVE 0 TO TOTAL indicates that the value zero will be \nmoved to the variable TOTAL. This constant 0 which used in the body of t\nhe statement is a \nliteral. \n \nA data name may have different values at different points of time whereas a literal \nmeans the specific value which remains unchanged throughout the execution of the program. \nFor this reason \na literal is often called a \nconstant\n. \nMoreover the literal is not given a name; \nit represents itself and does not require to be defined in the DATA DIVISION. \n \n               There are 3 types of literals \n \n                           \na) numeric \n \n                           b) nonnumeric.\n \n        \n                   c) figurative constants\n \n This watermark does not appear in the registered version - http://www.clicktoconvert.com\n \n6\n \n(a) \nNumeric \n \nA numeric literal can be formed with the help of digits only. It can have a sign (+ or \n-\n) \nand can have a decimal point also. If no sign is specified the literal will be taken as positive. \nNegative l\niterals are indicated by \n–\n sign at the leftmost end. If no decimal point is used then \nthe literal is obviously an Integer. If a decimal point is used, it must come in between the \ndigits. The maximum number of digits allowed in a numeric literal is compiler\n dependent.\n \nExamples\n \n     (i)  \nValid Numeric Literal\n \n \n \n(ii)  \nInvalid Numeric Literals\n \n \n.123\n \n \n \n \n ‘’123’’(valid as nonnumeric literal but \n \n \n \n \n \n  invalid as numeric literal)\n \n \n12.5\n         \n \n \n \n-\n  23 (there is a blank space between the \n \nsign and the first digit 2)\n \n(\nb)\n  \nNonnumeric\n \nA nonnumeric literal is used in general to output messages or headings. Characters that \nare enclosed between “  “ constitute nonnumeric literal. The maximum number of characters \nthat are allowed within two quotation marks is compiler depende\nnt.\n \n   (iii)  \nValid Nonnumeric Literal\n \n \n \n \n“BHARATHIAR”\n \n \n \n“DATA DIVISION”\n \n \n \n“100.50”\n \n \n \n“HOUR/RATE”\n \n \n   (iv) \nInvalid Nonnumeric Literal\n \n \n \n \n    7\n \n \n \n \n \n(valid as numeric literal but invalid as\n \nNonnumeric literal)\n \n \n \n \n“nine\n \n \n \n \n \n(Invalid because there is no quotat\nion \n \n \n \n \n \n \n \n \nmark on the right)\n \n \n \n \n12.5”\n \n \n \n \n \n(Invalid because there is no quotation \n \n \n \n \n \n \n \n \n            mark on the left)\n \nc) \nFigurative Constants\n \nFigurative constants have some fixed names and the compiler recognizes these names \nand it sets up corresponding\n values in the object program. \n \nConsider the statement given below :\n \n             MOVE ZERO TO COUNTER\n \nHere value 0 will be moved to COUNTER by the compiler, as it recognizes ZERO and \nsets COUNTER with 0. Given below is the list of figurative constants.\n This watermark does not appear in the registered version - http://www.clicktoconvert.com\n \n7\n \nF\nigurative Constant\n                          \n \n \n \n Meaning   \n \n \nZERO\n \nZEROS                                                                 \n \n \nvalue 0\n \nZEROES\n \n    \n \nSPACE\n \nSPACES                                                                                  One o\nr more blanks\n \n \nHIGH\n-\nVALUE\n \nHIGH\n-\nVALUES\n \n \n \n \n \n \nHighest value in the \n \n \n \n \n \n \n \n \n \n \nCollating sequence\n \nLOW\n-\nVALUE\n \nLOW\n-\nVALUES                                                                      Lowest  value in the \n \n \n \n \n \n \n \n \n \n \nCollating sequence\n \nQUOTE\n \nQUOTES           \n                                                                      one or more of   “\n \n \nALL literal                    \n \n \n \n \n \none or more of the string \n \ncharacters           \n \nc\nomprising the literal\n \n \n1.8 \nLANGUAGE DESCRIPTION NOTATION\n \nThe following notations\n will be used to describe the syntax of COBOL statements.\n \n \n1.\n \nWords in CAPS & underlined     \nà\n   Key words ( Compulsory in statements )\n \n2.\n \nWords in CAPS & NOT underlined   \nà\n   Noise  words ( Optional in statements )\n \n3.\n \n[ entries]\n \n \n \n \nà\n  can be included or dropped \n \n4.\n \n{\n entries}\n \n \n \n \nà\n   only one option to be selected\n \n5.\n \n, ;\n \n \n \n \n \nà\n  can be included or dropped\n \n6.\n \n…    \n \n \n \n \nà\n repetition of previous entry\n \n7.\n \nSpace character \n \n \n \nà\n used as a separator\n \n \n1.9 LET US SUM UP\n \nIn the above lesson we have learnt the how the structure of a COBOL pr\nogram will look \nlike , character set , words, data names & literals of the COBOL language in detail. This will \nhelp you to learn the subsequent lessons comfortably.\n \n1.10 \nLESSON\n-\nEND ACTIVITIES\n \nTry to find the answers for the following exercises on your own.\n \n1.\n \nDescribe the format of COBOL programs\n \n2.\n \nBring out the character set of COBOL\n \n3.\n \nWhat do you mean by COBOL word? Give examples.\n \n4.\n \nExplain about data names and identifiers\n This watermark does not appear in the registered version - http://www.clicktoconvert.com\n \n8\n \n5.\n \nDiscuss in detail the Literals of COBOL.\n \n1.11 POINTS FOR DISCUSSION\n \n1.\n \nExplain i\nn brief about the structure of a COBOL program.\n \n2.\n \nList out the character set of COBOL\n \n3.\n \nWhat are the rules to be followed while form\ning a COBOL word? Give \nExamples.\n \n4.\n \nBriefly explain about figurative constants.\n \n1.1\n2\n \nREFERENCES\n \n1.\n \nCOBOL Programming , M.K.Roy  & Ghos\nh Dastidar , Tata McGraw Hill, \n \n            2\nnd\n Edition,1998\n \n2.\n \nCOBOL Programming , V. RAJARAMAN, PHI Pub\n \n3.\n \nIntroduction to COBOL programming \n–\n Dr. R.Krishnamoorthy, JJ Publ\n \n4.\n \nStructured COBOL , Welburn, TataMcGraw Hill , 4\nth\n Edition.\n This watermark does not appear in the registered version - http://www.clicktoconvert.com\n \n9\n \nLESSON \n–\n 2\n: \nDIVISIONS OF CO\nBOL\n \nCONTENTS\n \n2.0 \n \nAims & Objectives\n \n2.1  \n \nIdentification & Environment Division\n \n2.2  \n \nIdentification Division.\n \n2.3  \n \nEnvironment Division\n \n2.4  \n \nConfiguration Section\n \n       \n \n2.4.1.    Source\n-\nComputer\n \n       \n \n2.4.2     Object\n-\nComputer\n \n       \n \n2.4.3    \n \nSpec\nial Names\n \n2.5  \n \nInput\n-\nOutput Section\n \n       \n \n2.5.1   File\n-\nControl\n \n2.6  \n \nData Division.\n \n2.7  \n \nLet us Sum up\n \n2.8  \n \nLesson\n-\nend Activities\n \n2.9\n \nPoints for Discussion\n \n2.\n10\n \nReferences\n \n2.0 AIMS AND OBJECTIVES \n \nIn this lesson, the learner will be introduced the var\nious divisions of COBOL and their \ncontents. The objective here is to make the learner aware of the entries under each division \nand their importance.\n \n2.1 IDENTIFICATION AND ENVIRONMENT DIVISION\n \n \n \nThe IDENTIFICATION AND ENVIRONMENT DIVISION are the first two\n leading \ndivisions of any COBOL program. These divisions contain entries that are required to either \nidentify the program or describe the computer system to be used for the compilation and \nexecution of the program. Generally, the entries in these divisions\n are used only for \ndocumentation purposes. \n \n2.2 IDENTIFICATION DIVISION\n \nT\nhe IDENTIFICATION DIVISION is the first division of every COBOL source \nprogram. The paragraph PROGRAM\n-\nID is essential in most of the machines. The other \nparagraphs are optional.\n This watermark does not appear in the registered version - http://www.clicktoconvert.com\n \n10\n \nThe \nstructure of Identification division is given below.\n \n \n \n \n \nIDENTIFICATION DIVISION.\n \n \n \n \n \n \n \n \nPROGRAM\n-\nID\n. \nE\nntry\n \n \n \n \n \n \n[AUTHOR. entry.]\n \n \n \n \n \n[\nINSTALLATION\n. entry.]\n \n \n \n \n \n[\nDATE\n-\nWRITTEN\n. entry.]\n              Optional\n \n \n \n \n \n[\nDATA\n-\nCOMPILED\n. entry.]\n \n \n \n \n \n[\nSECURITY\n. entry.]\n \n \n \n \n \n[\nREMARKS\n. entry.]\n \nThe division heading and paragraph names should be coded as margin A entries. The \nentries following the paragraph headings must be terminated by a period. The entry in the \nPROGRAM\n-\nID paragraph contains the program name to be used to \nidentify the object \nprogram.\n \nThe entries in the other paragraphs are normally treated as comments and the \nprogrammer is free to write anything for these entries. Only meaningful entries should be \nincluded in these places to provide better documentation and\n clarity. \n \nThe entry for the AUTHOR paragraph may include the name of the programmer. The \nentry of the DATE\n-\nCOMPILED paragraph may contain the date of compilation. If this entry \nis left blank, the compiler inserts the actual date in the listing of the sour\nce program that may \nbe printed during compilation.\n \n2.3 \nENVIRONMENT DIVISION\n \nThe ENVIRONMENT DIVISION is the \nsecond \ndivision in a COBOL source program. \nIt is the most machine\n-\ndependent division. The computer and all peripheral devices required \nby the progra\nm are described in this division.\n \n \n \nThis division contains two sections \n \n                         1) CONFIGURATION SECTION and\n \n                         2) INPUT\n-\nOUTPUT SECTION.\n \nO\nf these the CONFIGURATION SECTION appears first. The outline of the sections \na\nnd paragraphs of this division is shown below.\n \n \n \nENVIRONMENT DIVISION\n.\n \n \n \nCONFIGURATION SECTION\n.\n \n \n \nSOURCE\n-\nCOMPUTER\n.  \nsource\n-\ncomputer\n-\nentry.\n \n \n \nOBJECT\n-\nCOMPUTER\n.   object\n-\ncomputer\n-\nentry.\n \n \n \n[\nSPECIAL NAMES\n.        special\n-\ncomputer\n-\nentry].\n \n \n \nINPUT\n-\nOUTPUT SECTION\n.\n \n \n \nFILE CONTROL\n. {file\n-\ncontrol\n-\nentry}….\n \n \n \n[\nI\n-\nO\n-\nCONTROL\n.  \ninput\n-\noutput\n-\ncontrol\n-\nentry].\n \n \n \nFor most compilers the COBOL source program must at least include the two section \nheadings and the three paragraphs\n-\nSOURCE\n-\nCOMPUTER, OBJECT\n-\nCOMPUTER and \nFILE\n-\nCONTROL.\n \n This watermark does not appear in the registered version - http://www.clicktoconvert.com\n \n11\n \nT\nhe division headings, section headings and the paragraph headings should be coded as \nMargin A entries. The paragraph headings must be followed by a period and then a space. \nThe entries in the paragraphs are Margin B entries and can start in the same line w\nith the \nparagraph heading.\n \n2.4  CONFIGURATION SECTION\n \nThis section contains an overall specification of the computer used for the purpose of \ncompilation and execution of the program. There are in all three paragraphs in this section, \nnamely, source\n-\ncompute\nr, object\n-\ncomputer and special names.\n \n2.4.1 SOURCE\n-\nCOMPUTER\n \nThis paragraph specifies the name of the computer used to compile the COBOL \nprogram. The following is the form of this paragraph.\n \n \n \n \nSOURCE\n-\nCOMPUTER. computer\n-\nname.\n \nFor example, if ICL 1901 is to \nbe used for compiling the COBOL source program, this \nparagraph should be as follows:\n \n \n \n \nSOURCE\n-\nCOMPUTER. ICL\n-\n1901\n \n2.4.2 \nOBJECT\n-\nCOMPUTER\n \nThe OBJECT\n-\nCOMPUTER paragraph describes the computer on which the program is \nto be executed. The following shows the syn\ntax for this paragraph.\n \n \n \nOBJECT\n-\nCOMPUTER\n. computer\n-\nname\n \n \n \n \n \n                                                     \nCHARACTERS\n \n \n \n[, \nMEMORY\n SIZE interger\n-\n1] \n \n                                                                              \nWORDS \n          \n \n \n \n \n[,\n PROGRAM COLLATING \nSEQUENCE\n IS alphabet\n-\nname]\n \n \n \n \n[, \nSEGMENT\n-\nLIMIT\n \nIS\n interger\n-\n2].\n \n \nThe computer name specifies a particular computer on which the object program is to be \nexecuted.\n \nT\nhe MEMORY SIZE is used to indicate the amount of storage available to the o\nbject \nprogram. This clause is also used in conjunction with the SORT verb.\n \nThe PROGRAM COLLATING SEQUENCE clause specifies the collating sequence that \nis to be used to compare nonnumeric data items. The alphabet name in this clause should be \ndefined in the\n SPECIAL\n-\nNAMES paragraph to specify a collating sequence. If this clause is \nabsent, the machine’s own collating sequence called NATIVE, is assumed.\n \n \nThe SEGMENT\n-\nLIMIT clause is used in most of the compilers to indicate that the \nsections having segment numb\ner less that the number specified in \n \ninteger\n-\n2 should be held in the permanent area of storage and should not be transferred to and \nfrom the virtual memory. \n \n \n This watermark does not appear in the registered version - http://www.clicktoconvert.com\n \n12\n \n \nAll the entries in this paragraph are terminated using period ( a dot). The following is \nan exa\nmple of the OBJECT\n-\nCOMPUTER paragraph.\n \n \nOBJECT\n-\nCOMPUTER\n.\n \n                                               \n \n \n \nMEMORY SIZE 8000 WORDS.\n \n2.4.3\n \nSPECIAL\n-\nNAMES\n \nThis paragraph is used to relate some hardware names to user\n-\nspecified mnemonic \nnames. This paragraph is \noptional in all compilers. The following is the format of this \nparagraph.\n \nSPECIAL\n-\nNAMES,\n \n[,   \nCURRENCY\n SIGN \nIS\n literal\n-\n1]\n \n \n \n \n \n[,    \nDECIMAL\n-\nPOINT\n \nIS\n \nCOMMA\n]\n \n \n \n \n \n[, \nCHANNEL\n integer \nIS\n mnemonic\n-\nnames]…\n \n \n                        \n \n                              \n                           \nSTANDARD\n-\n1\n \n \n \n[, \nALPHABET\n alphabet\n-\nname \nIS\n           \n \nNATIVE \n                      ]…\n \n \n \n \n \n \n \n \n         implementor\n-\nname\n \n \n \n \n[, implementor\n-\nname \nIS\n mnemonic\n-\nname].\n \nThe CHANNEL clause is used to control the line spacing of line printe\nrs. This clause is \nused to associate a user\n-\ndefined name called the mnemonic name with a channel in the printer \ncarriage control. The range of integer depends on the particular line printer to be used. This \nmnemonic name can only be used in a WRITE stateme\nnt.\n \nThe ALPHABET clause specifies a user\n-\ndefined alphabet name that can be used to \nindicate a collating sequence in the PROGRAM COLLATING SEQUENCE clause discussed \nabove or in the collating sequence clause in the sort verb. The word NATIVE stands for the \nc\nomputer’s own collating sequence and STANDARD\n-\n1 stands for the ASCII collating \nsequence. The alphabet name is also used to define the external character set in which the \ndata is recorded on a file.\n \nThe SPECIAL\n-\nNAMES paragraph can have other entries which a\nre implementor\n-\ndependent. These entries are not discussed here as they are not of general interest. In fact, the \nCHANNEL entry is also an implementor\n-\ndefined clause. The entries can appear in the \nparagraph in any order.\n \nConsider the example : Let the SPECI\nAL\n-\nNAMES paragraph be as follows:\n \n \n \nSPECIAL\n-\nNAMES. CHANNEL 1 IS PAGE\n-\nTOP.\n \nWe know that conventionally channel is associated with the top of the page. While \ninstructing the computer to write a line on the line printer the programmer may like to specify \nthat\n the line must be printed as the first line on a new page. This may be done by including \nthe ADVANCE TO CHANNEL 1 clause in the write statement. The purpose of the special \nname clause illustrated above is to enable the programmer to replace CHANNEL 1 by \nPA\nGE\n-\nTOP in\n the ADVANCING clause. The idea\n is to provide better documentation. If one \nprefers to use CHANNEL 1 in the write statement, the special name entry is not required.\n \n This watermark does not appear in the registered version - http://www.clicktoconvert.com\n \n13\n \n2.5 \nINPUT\n-\nOUTPUT SECTION\n \nThis section contains information regarding files to be us\ned in the program. There are \ntwo paragraphs in this section\n-\n FILE\n-\nCONTROL and I\n-\nO\n-\nCONTROL.\n \nFILE\n-\nCONTROL  is used almost in every program. In the following some of the entries \nof the FILE\n-\nCONTROL paragraph will be discussed. \n \nThe INPUT\n-\nOUTPUT SECTION  is op\ntional in many computers.\n \n2.5.1\n \nFILE\n-\nCONTROL\n \nThe FILE\n-\nCONTROL paragraph names each file and identifies the first medium through \nfile control entries. The simplified format of a file control entry is given below.\n \n \nSELECT\n   [\nOPTIONAL\n]   file\n-\nname   \nASSIGN\n   \nTO hardware\n-\nname.\n \n \nI\nn general, a COBOL source program uses some files. For each of these files, there must \nbe a FILE\n-\nCONTROL entry. This entry names the file and assigns a peripheral device which \nholds that particular file. The file names that appear in th\ne SELECT clauses must be unique \nand all these files must be described in DATA DIVISION. The file name should be formed \naccording to the rules of data names.\n \nThe word OPTIONAL may be used only for input files. When the object program is \nexecuted, the option\nal files need not be present on every occasion. If the optional clause is \nomitted for a particular file, the file must be present during the execution of the program. If \nthe file is absent, an execution error will occur. On the other hand, if an optional f\nile is \nabsent, any attempt to open the file for reading will not result in an error. But the absent file \nwill be considered to be an empty file which means that the file does not contain any record.\n \nThe assign clause assigns a particular physical periphera\nl device name to a file. The \nphysical peripheral device names are machine\n-\ndependent. We shall use the device names \nREADER\n, \nPRINTER\n, \nTAPE\n and \nDISK\n to mean card reader, line printer, magnetic tape and \nmagnetic disk device respectively.\n \n \nAn example of the FIL\nE\n-\nCONTROL paragraph is given below.\n \n \n \n \nFILE\n-\nCONTROL.\n \n \n \n \n \nSELECT CARD\n-\nDESIGN ASSIGN TO READER\n \n \n \n \n \nSELECT PRINTER\n-\nFILE ASSIGN TO PRINTER.\n \nThis paragraph indicates that there are two files \n-\n CARD\n-\nDESIGN and PRINTER\n-\nFILE. \nThe file named CARD\n-\nDESIGN is a card f\nile while the other is a report file to be printed on a \nline printer.\n \n2.6 \nDATA DIVISION\n \nThe DATA DIVISION is that part of a COBOL program where every data item \nprocessed by the program is described. \n \n It is important to note that unless a data item is desc\nribed in the DATA DIVISION, it \ncannot be used in the procedure division. \n \nThe DATA DIVISION is divided into a number of sections such as  File Section, \nWorking\n-\nstorage section, Screen section, Linkage section and Report Section. Depending on \nthe use of a d\nata item, it should be defined in the appropriate section.\n This watermark does not appear in the registered version - http://www.clicktoconvert.com\n \n14\n \nLet us consider now 2 sections, namely, FILE SECTION and WORKING\n-\nSTORAGE \nSECTION  :\n \na)  \nFILE SECTION\n \nThe FILE SECTION includes the description of all data items that should be read from \nor written \nonto some external file.\n \nb) \nWORKING\n-\nSTORAGE SECTION\n \nThe data items which are developed internally as intermediate result as well as the \nconstants are described in this section of the DATA DIVISION.\n \n \nThe format of the DATA DIVISION is as follows:\n \n \n \nDATA DIV\nISION.\n \n \n \n[FILE SECTION.\n \n \n \nFile section entries.\n \n \n \n……\n \n \n \n \n……]\n \n \n \n[WORKING\n-\nSTORAGE SECTION.\n \n \n \n WORKING\n-\nSTORAGE ENTRIES.\n \n \n \n ……\n \n \n \n ……]\n \nAll the section names as well as the division name must be coded as margin A entries, \nEach section of the DATA DIVISION is opti\nonal which means that a section may be omitted \nif there is no data that may be described in a particular section. It is important to note that the \nsections to be included must appear in the order shown above.\n \n2.7   LET US SUM UP\n \n   The above lesson gives t\nhe learner clear ideas about the Identification, Environment \nand Data division.  Having learnt this\n,\n the learner will be in a position to use them in the \nprograms for better documentation. \n \n2.8\n \nLESSON\n-\nEND ACTIVITIES\n \nTry to find the answers for the followin\ng exercises on your own.\n \n1.\n \nWhat are the divisions of COBOL?\n \n2.\n \nSketch out the structure of Identification division.\n \n3.\n \nWhat are the entries under Environment Division?\n \n4.\n \nWrite notes on Input\n-\noutput section.\n \n5.\n \nDescribe the format of Data Division.\n \n2.9 \nPOINTS FOR DISCUS\nSION\n \n1.\n \nExplain in detail about\n \na.\n \nIdentification Division\n \nb.\n \nEnvironment Division\n \n2.\n \nWrite notes on Data Division\n \n2.10 \nREFERENCE\nS\n \n1.\n \nCOBOL Programming , M.K.Roy  & Ghosh Dastidar , Tata McGraw Hill, \n \n            2\nnd\n Edition,1998\n \n2.\n \nCOBOL Programming , V. RAJARAMAN, PHI Pub\n \n3.\n \nIntroduction to COBOL programming \n–\n Dr. R.Krishnamoorthy, JJ Publ\n \n4.\n \nStructured COBOL , Welburn, TataMcGraw Hill , 4\nth\n Edition.\n \n This watermark does not appear in the registered version - http://www.clicktoconvert.com\n \n15\n \nLESSON \n–\n 3\n: \nPICTURE CLAUSE CHARACTERISTICS\n \nCONTENTS\n \n3.0  Aims & Objectives\n \n3.1  Picture Clause\n \n       3.1.1\n \nClass\n \n       3.1.2\n \nS\nign\n \n       3.1.3\n \nPoint Location\n \n       3.1.4\n \nSize\n \n3.2  Let us Sum Up\n \n3.3  Lesson\n-\nend Activities\n \n3.4  Points for Discussion\n \n3.4  References\n \n3.0 AIMS & OBJECTIVES \n \nThe aim of this lesson is to introduce the learner the picture clause and the various \nconcepts\n associated with it. This knowledge will help the user to describe appropriate sizes \nfor the variables he/she intend to use in COBOL programs.\n \n3.1 PICTURE CLAUSE\n \nThe picture clause describes the general characteristics of an elementary data item. \nThese cha\nracteristics are described below.\n \n3.1.1. \nClass\n \nIn COBOL a data item may be one of the three classes \n-\n \nnumeric, alphabetic or \nalphanumeric\n.\n \n     The numeric items consist only of digits 0 to 9.\n \nA\nlphabetic items consist only of the letters A to Z (a to z)  a\nnd the space (blank) \ncharacter.\n \nThe alphanumeric items may consist of digits, alphabets as well as special characters.\n \n3.1.2\n \nSign\n \nA numeric data item can be signed or unsigned.\n \nIf a numeric data is considered as unsigned then during execution such unsigned\n data \nitems are treated as positive quantities.\n \nTo describe a signed data item one should use the code character S at the leftmost end of \nthe picture clause of the corresponding variable.\n \nIt is important to note that internally, the operational sign (S) is\n not stored as a separate \ncharacter. The operational sign is stored a\nt\n the zone bits of the rightmost digit position of the \ndata item. While preparing data for such an input\n-\nsigned item, care should be taken to ensure \nthat the data appears on the input med\nium in the same form. \n This watermark does not appear in the registered version - http://www.clicktoconvert.com\n \n16\n \n3.1.3 \nPoint Location\n \nThe position of the decimal point is another characteristic that can be specified in the \ncase of numeric data items. If the said position is not specified, the item is considered to be an \ninteger which means that\n the decimal point is positioned immediately after the rightmost \ndigit. It may be noted that in COBOL the decimal point is not explicitly included in the data. \nThe position of the decimal point is merely an assumed position\n. \n \nThe compiler at the time of co\nmpilation only makes a note of this assumed decimal \npoint. It generates the object code in such a way that the data items before taking part in the \noperations are aligned according to their assumed decimal points.\n \n3.1.4 \nSize\n \nThe number of characters or dig\nits required to store the data item in the memory in \nknown as Size of the data item.\n \nAll the four general characteristics described above can be specified through a \nPICTURE clause. \n \nThe PICTURE clause is to be followed by a picture character string as sho\nwn below.\n \n           \n \n \nPICTURE\n \n                                                IS character\n-\nstring \n \n \n \n \nPIC\n                    \n \n \nThe character string can consist of 1 to 30 code characters that define the above \nmentioned attributes of the elementary item. T\nhe code characters and their meaning  are \ngiven below.\n \n            \nCode character\n \n \n \nMeaning\n \n \n \n \n 9 \n \n                                    [Digit]\n \n \n \n                \n \nEach occurrence of this code represents a digit \n \n \n \n \nX\n \n \n \n           [Any character of Cobol] \n \n \n    \n \n \n \n \nEach occurrence of this code indicates \n \n \n \n \n \n \nany allowable character from the \n \n \n \n \n \n \n                \n \nCOBOL character set.\n \n \nA\n \n \n \n           \n \n[Alphabet ]\n \n                                                            Each occurrence of this code indicate\ns \n \n                                                            a  letter or space character.\n \nV\n \n \n \n            [Assumed Decimal Point]\n \n    \n \n \n \n \nThe occurrence of this in a picture string \n \n                                                            indicates t\nhe position of the assumed \n \n                                                            decimal point.\n \n \nP\n \n \n \n            [Assumed Decimal Point lying outside ]\n \n    \n \n \n \n \n \nThe occurrence of this indicates the \n \n                                                  \n          position of the assumed decimal point \n \n                                                            when the point lies outside the data item.\n \n \nS \n \n \n \n            [Signed Data Item]\n \n                                                            The occ\nurrence of this indicates that the \n \n                                                            data item is signed.\n \n This watermark does not appear in the registered version - http://www.clicktoconvert.com\n \n17\n \nThere is no special code to indicate the size.\n \nThe total number of occurrence of 9, X or A in the picture string indicates the size\n \nThe occ\nurrence of V, P and S are not counted in determining the size of an item.\n \nThe allowable combinations are governed by the following rules:\n \n(i)\n \nIn the case of an \nalphabetic item\n the picture may contain only the symbol \nA.\n \n(ii)\n \nIn the case of a \nnumeric item\n the picture\n may contain only the symbols \n9, V, \nP\n and \nS.\n These are called operational characters. It must contain at least one 9. \n \nThe symbols V and S can appear only once and S, if it is included, must be the leftmost \ncharacter of the picture string. The symbol P can\n be repeated on the right or on left (but not \non the left of S) as many times as is required to  indicate the position of the assumed decimal \npoint.                                                   \n \n(iii) \n \nIn the case of an \nalphanumeric item\n, the picture \nmay contain all \nX\ns or a \ncombination of 9, A and X\n (except all 9 or all A). In the latter case the item is considered as if \nthe string consists of all Xs.\n \nThe picture clause is only to be specified for elementary items; it cannot be used for a \ngroup item. \n \nThe size of a group item is equal to the total of the sizes of all subordinate elementary \nitems. The class of a group item is alphanumeric.\n \n \nThe following examples illustrate the PICTURE specification.\n \nExample 1\n:\n \n \n \nPICTURE IS S999V99\n \n \nrepresents a signed d\nata item with a size of 5 characters and the positions of the assumed \npoint is before 2 places from the rightmost end. Note that S and V are not counted.\n \nExample 2\n:\n \n \n \nPIC IS PPP9999\n \nmeans that the numeric data is of 4 characters in size and there are 7 pos\nitions after the \nassumed decimal point. Thus if the data in the memory is 123, the value will be taken as \n.0000123. If, on the other hand, the picture were defined as 999PP, the value would have \nbeen 12300.\n \nExample 3\n:\n \n \nPIC XXXXXX \n \nrepresents the  alphanume\nric item with size of 6  characters.\n \nInstead of repeating 9, X, A or P in the picture string, it is possible to write the number \nof occurrences of a character enclosed within parenthesis immediately after the said \ncharacter. \n \nThus \n \n \n \n \n \nS9(3)V9(2)\n \n \nis equiv\nalent to S999V99.\n \n \n \nX(7)\n \n \n \nis equivalent to XXXXXX.\n \n       \n \n \n \n \nP(4)9(3)                       is equivalent to PPPP999.\n This watermark does not appear in the registered version - http://www.clicktoconvert.com\n \n18\n \n3.\n2 \nLET US SUM UP\n \nIn this lesson we have learnt the importance of Picture clause and the different code \ncharacters (9,A,X,V,P,S). We ha\nve also learnt the size of  the data item. This will help you in \nprescribing the correct declarations for the variables which you will be using in COBOL \nprograms.\n \n3.3 LESSON\n-\nEND ACTIVITIES\n \n   \nTry to find the answers for the following exercises on your own.\n \n1.\n \nWhat do you mean by Picture Clause?\n \n2.\n \nWhat are the three classes of data item?\n \n3.\n \nHighlight the code characters with their meaning.\n \n4.\n \nHow will you find the size of data items? Give examples.\n \n3.4 POINTS FOR DISCUSSION\n \n \n1) Explain with example all types of PICTURE\n clauses used in a COBOL program.\n \n3.\n5 \nREFERENCES\n \n1.\n \nCOBOL Programming , M.K.Roy  & Ghosh Dastidar , Tata McGraw Hill, \n \n            2\nnd\n Edition,1998\n \n2.\n \nCOBOL Programming , V. RAJARAMAN, PHI Pub\n \n3.\n \nIntroduction to COBOL programming \n–\n Dr. R.Krishnamoorthy, JJ Publ\n \n4.\n \nStr\nuctured COBOL , Welburn, TataMcGraw Hill , 4\nth\n Edition.\n This watermark does not appear in the registered version - http://www.clicktoconvert.com\n \n19\n \n \n \nLESSON \n–\n 4\n: \nEDITING\n \nCONTENTS\n \n4.0 \n \nAims & Objectives\n \n4.1 \n \nEditing\n \n4.2 \n \nEdit characters for numeric data\n \n4.3  \n \nLet us Sum up\n \n4.4 \n \nLesson\n-\nend Activities\n \n4.5\n \nPoints for Discussion\n \n4.5\n \nReferences\n \n4.0 \n \nA\nIMS AND OBJECTIVES \n \nIn this lesson, the learner will be introduced the various editing characters  of COBOL \nand their role in editing values The objective here is to make the learner aware of the edit \ncharacters and their importance, as they constitute cri\ntical phase in getting the results in the \nedited and required style.\n \n4.1 EDITING \n \nEditing is normally performed by moving a numeric data item to a field containing \nspecial editing characters in its PICTURE clause.\n \n4.2 EDIT CHARACTERS FOR NUMERIC DATA\n \nThe f\nollowing characters can be used in the PICTURE clause to indicate editing.\n \n \n \nZ    *    $    \n-\n    +    CR    DB    .    ,    B    O    /\n \n \nThe use of these edit characters are explained below.\n \nZ (Zero Suppression\n)\n \nThe edit character Z is used to suppress the\n leading zeroes in the numeric data item. The \nleading zeroes are replaced with blanks.\n \nZ character has no effect of trailing zeroes.\n \nExamples\n \nThe following examples illustrate the use of Z editing characters. The character \nb\n  is \nused to indicate a space ch\naracter and the character ^ is used to indicate the position of the \ndecimal point.\n This watermark does not appear in the registered version - http://www.clicktoconvert.com\n \n20\n \n \n \nPicture of the Field\n \n \nNumeric Value Moved\n \n \nEdited Value\n \n \n \n \n \n        to the Field\n \n \n \n \n \n \n \nZZ999\n \n \n \n \n01234\n \n \n \n \n  \nb\n1234\n \n \nZZ999\n \n \n \n \n00052                                        \nbb\n052\n \n \nZZ999\n \n \n \n \n1^68                                          \nbb\n001\n \n \nZZZV99\n \n \n \n0^65                                         \n bbb\n65\n \n \nZZZZVZZ\n \n \n \n0^05                                          \nbbbb\n05\n \n \nZZZZVZZ\n \n \n \n0                                                \nbbbb\nbb\n \n* (Asterisk)\n \nThe edit character * (asterisk) is identical to Z except that the leading zeros are replaced \nby asterisks instead of space characters.\n \nExamples\n \n \n \n \n \n                \n \n \nPicture of the Field\n \n \nNumeric Value Moved\n \n \nEdited Value\n \n \n \n \n \n        to the\n Field\n \n \n**999\n \n \n \n \n01234\n \n \n \n \n    *1234\n \n \n**999\n \n \n \n \n00012\n \n \n \n \n    **012\n \n \n**999\n \n \n \n \n1^23\n \n \n \n \n    **001\n \n \n \n \n$ (Currency Sign)\n \nA single currency sign can appear at the leftmost position of a picture. In that case the $ \ncharacter is inserted.\n \nExamples\n:\n \n \nPicture of the F\nield\n \n \nNumeric Value Moved\n \n \nEdited Value\n \n \n \n \n \n        to the Field\n \n \n$99999\n \n \n \n123\n \n \n \n \n    $00123\n \n \n$99999\n \n \n \n12345\n \n \n \n \n    $12345\n \n \n$ZZ999\n \n \n \n123\n \n \n \n \n    $\nbb\n123\n \n \n$ZZ999\n \n \n \n12345  \n \n \n               \n \n$12345\n \n \n$**999\n \n \n \n123 \n \n \n \n \n    $**123\n \n__________________________________\n________________________________\n \n-\n (Minus)\n \nA minus sign can appear either at the \nleftmost\n or \nrightmost \nposition of a picture. If  an \nitem is negative, a minus sign will be inserted in the said position. On the other hand, if the \nitem is positive, a space c\nharacter will be inserted.\n \nExamples\n:\n \n \nPicture of the Field\n \n \nNumeric Value Moved\n \n \nEdited Value\n \n \n \n \n \n        to the Field\n \n \n-\n9999\n \n \n \n \n-\n123\n \n \n \n \n \n   \n-\n0123\n \n \n-\n9999\n \n \n \n \n \n \n382\n \n \n \n \n \n     \nb\n0382\n \n \n  9999\n-\n \n \n \n \n-\n123\n \n \n \n \n    \n  \n0123\n-\n \n This watermark does not appear in the registered version - http://www.clicktoconvert.com\n \n21\n \n \n  9999\n-\n \n \n \n \n \n \n382                           \n                  \n \n0382\nb\n \n            \n-\nZZZV99\n \n \n \n-\n46^52\n \n \n \n \n   \n  \n-\nb\n4652\n \n \n \n-\nZZZV99 \n \n \n \n \n46^52                                         \n  \nbb\n4652\n \n \n+ (Plus Sign)\n \nA plus sign is similar to minus sign except that when the item is positive\n,\n \n+\nsign will be \ninserted inst\nead of the space character. If the item happens to be negative, a minus sign will \nbe inserted although there is a plus sign in the picture.\n \nExamples:\n \n \n \nPicture of the Field\n \n \nNumeric Value Moved\n \n \nEdited Value\n \n \n \n \n \n        to the Field\n \n \n+9999\n \n \n \n \n-\n123\n \n \n \n \n    \n \n-\n0123\n \n \n+9999\n \n \n \n \n 123\n \n \n \n \n    +0123\n \n \n  9999+\n \n \n \n-\n123\n \n \n \n \n    \n   \n0123\n-\n \n \n \n  9999+\n \n \n \n 123                                             \n   \n0123+\n \n     \n       +ZZZV99\n \n \n \n-\n12^34\n \n \n \n \n    \n-\nb1\n234\n \n \n \n+ZZZV99 \n \n \n \n \n12^34                                         +\nb1\n234\n \nCR and DB \n(Credit and Debit Sign)\n \nThe two characters CR or DB symbol may appear \nonly at the rightmost position\n of the \npicture. They are identical to the minus sign edit character. In other words, the symbols CR or \nDB will appear in the rightmost position only if the\n item is negative, otherwise they will be \nreplaced by two space characters.\n \nExamples\n:\n \n \nPicture of the Field\n \n \nNumeric Value Moved\n \n \nEdited Value\n \n \n \n \n \n        to the Field\n \n \n9999CR\n \n \n \n-\n1234\n \n \n \n \n    1234CR\n \n \n9999CR\n \n \n \n 1234\n \n \n \n \n    1234\nbb\n \n \nZZZCR\n \n \n \n-\n12\n \n \n \n \n    \nb1\n2CR\n \n \n \nZZZ9V99DB\n \n \n \n-\n123^45                                      \n \nb\n12345DB\n \n            ZZZ9V99DB\n \n \n \n 123^45\n \n \n \n    \nb\n12345\nbb\n \n \n. (Period or Decimal Point)\n \nA period may be used to insert a decimal point and may \nnot appear more than once.\n \nBoth the period and V cannot ap\npear in the same picture\n. A period must not also appear \nas the rightmost character in the picture. \n \nExamples\n:\n \n \nPicture of the Field\n \n \nNumeric Value Moved\n \n \nEdited Value\n \n \n \n \n \n        to the Field\n \n \n9999.99\n \n \n \n324^52\n \n \n \n    0324.52\n \n \nZZ99.99\n \n \n \n12^34\n \n \n \n \n    \nbb12\n.34\n \n \n, (Comma)\n \nA comma,\n when used in a picture, is treated as an insertion character and inserted \nwherever it appears. There can be more than one comma in a picture.\n This watermark does not appear in the registered version - http://www.clicktoconvert.com\n \n22\n \nExamples\n:\n \n \nPicture of the Field\n \n \nNumeric Value Moved\n \n \nEdited Value\n \n \n \n \n \n        to the Field\n \n \n \n \n \n99,999\n \n \n \n         1234\n \n \n \n \n    01,234\n \n \n99,999\n \n \n \n         37\n \n \n \n \n    00,037\n \n \nZZ, Z99\n \n \n         1234\n \n \n \n \n    \nb1\n,234\n \n \n \nB (Blank Insertion)\n \nThe appearance of a B anywhere in the picture will insert a space character in the edited \ndata. There can be more than o\nne B in a picture.\n \nExamples:\n \n \nPicture of the Field\n \n \nNumeric Value Moved\n \n \nEdited Value\n \n \n \n \n \n        to the Field\n \n \n99B99B99\n \n \n         171062\n \n \n \n \n    17\nb\n10\nb6\n2\n \n \n99B99B99\n \n \n         12\n \n \n \n \n    00\nb\n00\nb12\n \n \n0 (Zero Insertion\n)\n \nA zero appearing in a picture will be treat\ned in the same way as a B except that 0 will be \ninserted instead of a space character.\n \nExamples:\n \n \nPicture of the Field\n \n \nNumeric Value Moved\n \n \nEdited Value\n \n \n \n \n \n        to the Field\n \n \n9900\n \n \n                     12\n \n \n \n \n    1200\n \n \n09990\n \n \n                     456\n \n \n \n \n    04560\n \n/ (Slash Insertion\n)\n \nThe edit character slash (/) also called virgule or stroke, may appear anywhere in the \npicture. If used, it will be inserted. There can be more than one slash in the picture. \n \nExamples:\n \n \nPicture of the Field\n \n \nNumeric Value M\noved\n \n \nEdited Value\n \n \n \n \n \n        to the Field\n \n \n99/99/99\n \n \n         150681\n \n \n \n \n    15/06/81\n \n \n999/999/99\n \n \n         3245\n \n \n \n \n    000/032/45\n \nBLANK WHEN ZERO\n \nBLANK WHEN ZERO is an editing clause which may be used along with a picture. \nThis will set the entire data i\ntem to blanks of its value is equal to zero. However, the edit \ncharacter asterisk (*) may not be used if BLANK WHEN ZERO is specified. When this \nclause is used to describe a field whose picture contains an asterisk, it is ignored by the \ncompiler. The synta\nx of this clause is as follows:\n \n \n \n \nBLANK\n \nWHEN\n \nZERO\n This watermark does not appear in the registered version - http://www.clicktoconvert.com\n \n23\n \nExamples\n \n \nPicture of the Field\n \n \nNumeric Value Moved\n \n \nEdited Value\n \n \n \n \n \n        \n \n       to the Field\n \n \n \nZZZ.99 BLANK WHEN ZERO\n \n \n2^5\n \n \n \n \n    \nbb\n2.50\n \n \nZZZ.99 BLANK WHEN ZERO\n \n \n \n \n0\n \n \n \n \n    \nbbbbbb\n \n \n \n999.99 BLANK WH\nEN ZERO\n \n \n \n \n0 \n \n \n \n \n    \nbbbbbb\n \n \n \nFloating Insertion\n \nThe currency symbol ($) can appear in multiples on the left\n-\nhand side of a picture. In \nthis case the character will be treated in the same way as the Z character and only one \ncurrency symbol will be inserted\n immediately to the left of the first non\n-\nzero digit of the data. \nSuch a floating insertion is also possible in the case of minus (\n-\n) and plus (+) signs. In the \ncase of the minus character, no sign will be inserted unless the data is negative. The \nappearan\nce of a period halts the floating insertion.\n \nExamples\n \n \nPicture of the Field\n \n \nNumeric Value Moved\n \n \nEdited Value\n \n \n \n \n \n        to the Field\n \n \n \n$$$$9.99\n \n \n \n235^25\n \n \n \nb\n$235.25\n \n \n++++.99\n \n \n \n-\n475^25\n \n \n \n-\n475.25\n \n \n----\n.99\n \n \n \n \n-\n3^5\n \n \n \n \nbb\n-\n3.50\n \n \n4.3 \nLET US SUM UP\n \nIn this less\non all the editing characters are introduced and their role can be understood \nwith the help of the examples presented. The Edit characters are very important in programs \nto get correct and required form of output.\n \n4.4\n \nLESSON\n-\nEND ACTIVITIES\n \nTry to find the \nanswers for the following exercises on your own.\n \n \n1.\n \nWhat is meant by Editing?\n \n2.\n \nList out the edit characters for numeric data.\n \n3.\n \nExplain Z * $ edit characters with examples\n \n4.\n \nExplain + \n-\n CR DB  edit characters with examples\n \n5.\n \nExplain  B  0  /  edit characters with e\nxamples\n \n4.4  \nPOINTS FOR DISCUSSION\n \n1) Discuss in detail about the editing picture clause of COBOL.\n \n4.5\n \nREFERENCES\n \n1.\n \nCOBOL Programming , M.K.Roy  & Ghosh Dastidar , Tata McGraw Hill, \n \n            2\nnd\n Edition,1998\n \n2.\n \nCOBOL Programming , V. RAJARAMAN, PHI Pub\n \n3.\n \nIntr\noduction to COBOL programming \n–\n Dr. R.Krishnamoorthy, JJ Publ\n \n4.\n \nStructured COBOL , Welburn, TataMcGraw Hill , 4\nth\n Edition.\n This watermark does not appear in the registered version - http://www.clicktoconvert.com\n \n24\n \nLESSON \n–\n 5\n: \nLEVEL STRUCTURE\n \nCONTENTS\n \n5.0\n \nAims & Objectives\n \n5.1\n \nLevel Numbers\n \n5.2\n \nValue clause\n \n5.3\n \nSample Program\n \n5.4\n \nFiller clause\n \n5.5\n \nLet us Sum up\n \n5.6\n \nLesson\n-\nend Activities\n \n5.7\n \nPoints for Discussion\n \n5.7 \n \nReferences\n \n5.0 \nAIMS AND OBJECTIVES \n \nIn the present lesson the learner gets an idea about level numbers , Value clause and \nFiller clause. A sample program is presented in the lesson to d\nemonstrate the concept of value \nclause and level numbers.\n \n5.1  LEVEL NUMBERS\n \nCOBOL makes use of level number concept to describe the hierarchical data structure. \nA level number is a 2 digit number. The allowed level numbers are 01 \n–\n 49, 66, 77 and 88.\n \nAll \nvariables are declared in the working\n-\nstorage section using appropriate level \nnumbers. \n \nAn elementary data item can take either 01 or 77 as its level number.\n \nIn COBOL a distinction is made between elementary and group data items. A few \nelementary data may \nbe combined to form a group.\n \nFor example, DAY, MONTH and YEAR may be three elementary data items. These \nmay be combined to form a group data named DATE. The organization may be shown \npictorially as follows:\n \n \n \n \n \n \n \n \nIt may be noted that the memory space ref\nerred to by DATE is the combined memory \nspace for DAY, MONTH and YEAR. The advantage of such a grouping is obvious. The \nprogrammer can now refer to the individual elementary items DAY, MONTH, YEAR or to \nthe group item DATE. An elementary data item is thus \nthe one which the programmer would \nalways like to refer to as a whole and not in parts.\n \nMONTH\n \nYEAR               \n \n \n        DATE\n \n  \n  DAY\n This watermark does not appear in the registered version - http://www.clicktoconvert.com\n \n25\n \nTo describe the hierarchical structure introduced above, the concept of level number is \nemployed in COBOL. \n \nThe most inclusive group must have the level number 01. The \nfirst subdivisions can \nhave any level number between 02 and 49. Further subdivisions should follow the same range \nwith the restriction that an item cannot have a level number less than or equal to the level \nnumbers of the group that may include it. Thus a \ngroup includes all elementary data or \nsmaller groups beneath it until a level number equal to or less than the level number of the \nsaid group is encountered. The following examples reveal the concept of the level numbers.\n \n \nExample 1\n \n01\n \nDATE\n \n \n05\n \nDAY\n \n \n05\n \nMON\nTH\n \n \n05\n \nYEAR\n \nExample 2\n \n \n \n01\n \nPAY\n \n            \n \n02      \n \nGROSS\n-\nPAY\n \n                  \n \n03  \n \nBASIC\n \n \n \n     \n \n03  \n \nDEARNESS\n \n                        03  \n \nHOUSE\n-\nRENT\n \n \n \n02  \n \nDEDUCTIONS\n \n                        \n0\n3  \n \nPF\n-\nDEDUCT\n \n                        \n0\n3   \n \nIT\n-\nDEDUCT\n \n \n \n02\n        NET\n-\nPAY\n \nThe group DATE which was shown earlier in the pictorial form is illustrated in the first \nexample. In the second example PAY is the most inclusive group which has three \nsubdivisions, namely, GROSS\n-\nPAY, DEDUCTIONS and NET\n-\nPAY. GROSS\n-\nPAY is ag\nain \nsubdivided into BASIC, DEARNESS and HOUSE\n-\nRENT. In a similar way deductions are \nfurther subdivided into PF\n-\nDEDUCT and IT\n-\nDEDUCT. It may also be noted that the \nelementary data items are BASIC, DEARNESS, HOUSE\n-\nRENT, PF\n-\nDEDUCT, IT\n-\nDEDUCT and NE\nT\n-\nPAY. The \nstructure can be pictorially shown as follows: \n \n \n \n       \n \nPAY\n \n \nGROSS \n–\n PAY\n \nDEDUCTIONS\n \nBASIC\n \nDEARNESS\n \nHOUSE \n-\n RENT\n \nPF \n-\n \nDEDUCT\n \nIT \n-\n \nDEDUCT\n \nNET\n \n-\n PAY\n \n \nSometimes, in a hierarchical data structure such as this, the programmer may not require \na data item to\n be referred to in the PROCEDURE DIVISION. Such a situation usually arises \nwhen a group and only some of its subdivisions are to be used in the program. The remaining \nsubdivisions need not be used explicitly. In such situations the word FILLER may be used \nto This watermark does not appear in the registered version - http://www.clicktoconvert.com\n \n26\n \nname data to which the programmer does not wish to assign a specific name. FILLER can be \nused as many times as required.\n \n5.2 VALUE CLAUSE\n \nThe value clause defines the initial value of the data item. \n \n Generally initialization will be done just before th\ne first statement in the procedure \ndivision is executed.\n \nThe syntax is\n \nVALUE   \n is literal\n \n \nThe literal can be any numeric value, a nonnumeric string of characters included within \nquote(“) or any figurative constant.\n \nExamples :\n \n1)\n \n01 a  pic value is 100\n \n2)\n \n01 co\nmpname pic x(15) value is “ABC Company”\n \n3)\n \n01 n pic 9(2) value is ZERO\n \n4)\n \n01 ans pic x value is space\n \n5)\n \n01 result pic x(4) value spaces. \n \n6)\n \nFor Group Data value specification\n \n01 test\n-\nentry  value is “123456”.\n \n     \n \n02  t1      pic 9(2).\n \n     \n \n02  t2      pic 9(2).\n \n \n    \n \n02  t3      pic 9(2).\n \n \n                 Here t1=12,t2=34 and t3=56. \n \n5.3 SAMPLE PROGRAM\n \nWrite a  program to demonstrate value clause.\n \nIdentification division.\n \nProgram\n-\nid. Valcls.\n \nEnvironment division.\n \nData division.\n \nWorking\n-\nstorage section.\n \n01\n \nname pi\nc x(4) value “ABCD”.\n \n02\n \nmark  pic 9(3) value 100.\n \nProcedure division.\n \np\n-\n1.\n \n \n            display(1 1) erase.\n \n \nDisplay(3 5) “Given Name = “ name.\n \n \nDisplay(5 5) “ Mark =” mark.\n \n \nStop run.\n \nExplanation:\n \nNote that in the above program, initial values are given b\ny the programmer for name and \nmark. They will be displayed as such as a result of execution.\n \n This watermark does not appear in the registered version - http://www.clicktoconvert.com\n \n27\n \nIn the program, the user is at liberty to change the initial values by using statements  like \nMOVE, ACCEPT etc.\n \n5.4 FILLER CLAUSE:\n \nConsider the statements given b\nelow:\n \n1)\n \n01    f    pic     x(80)  value    all “\n-\n“.\n \nThis statement causes a line of 80 characters  filled with “\n-\n“ \n \n2)\n \n01    f       pic x(60) value all “*“.\n \n  \n \nThis statement causes a line of 60 characters  filled with “*“\n \n \n3)\n \n01 filler pic x(10) value “\nTESTING”.\n \n    \n \nNote that we can either use simply “f”  or “filler” in the statements.\n \nGenerally fillers are used to improve the clarity of the output and form designs utilize \nthe potential of filler clauses to the maximum.\n \n5.5 \nLET US SUM UP\n \nIn the above le\nsson the concept of level numbers, value clause and Filler clause are \ndiscussed with syntaxes and examples and a sample program is written to emphasize these \nconcepts. \n \n 5.6 \nLESSON\n-\nEND ACTIVITIES\n \nTry to find the answers for the following exercises on your \nown.\n \n1.\n \nWhat do you mean by Level Numbers?\n \n2.\n \nList the permitted level numbers in COBOL\n \n3.\n \nSpecify the level numbers for elementary data.\n \n4.\n \nSpecify the level numbers for group data.\n \n5.\n \nExplain the role of value clause in COBOL.\n \n5.\n7\n  POINTS FOR DISCUSSION\n \n1) What are lev\nel numbers? Explain their usage with examples.\n \n2) Write notes on\n \n \n a) Elementary Data Item.\n \n \n b) Group Data Item.\n \n5.\n8\n REFERENCES\n \n1.\n \nCOBOL Programming , M.K.Roy  & Ghosh Dastidar , Tata McGraw Hill, \n \n            \n2\nnd\n Edition,1998\n \n2.\n \nCOBOL Programming , V. RAJARAMA\nN, PHI Pub\n \n3.\n \nIntroduction to COBOL programming \n–\n Dr. R.Krishnamoorthy, JJ Publ\n \n4.\n \nStructured COBOL , Welburn, TataMcGraw Hill , 4\nth\n Edition.\n \n This watermark does not appear in the registered version - http://www.clicktoconvert.com\n \n28\n \nUNIT II\n \nLESSON \n–\n \n6\n: \nDATA MOVEMENT VERB: MOVE\n \nCONTENTS\n \n6.0\n \nAims and objectives\n \n6.1\n \nSyntax of Move Verb\n \n6.2\n \nRules of Move Verb\n \n6.3\n \nExamp\nles of Move usage\n \n6.4\n \nLet us Sum Up\n \n6.5\n \nLesson\n-\nend Activities\n \n6.6\n \nPoint s for Discussion\n \n6.7\n \nPoints for Discussion\n \n6.8\n \nReferences\n \n6.0 \nAIMS AND OBJECTIVES\n \nThe aim of this lesson is to introduce the learner how to move data from one place to \nanother place  in memory. This is do\nne with the help of MOVE verb. The syntax, rules and \nthe examples given will make the learner to understand the said verb.\n \n6.1 \nSYNTAX OF MOVE VERB\n \nThe general form of the MOVE verb is as follows:\n \n \n \n \n \nidentifier \n-\n 1\n \n               \nMOVE\n       \n \n \nTO \n identifi\ner \n–\n 2 [ ,     identifier \n–\n 3]  …\n \n \n \n \nliteral \n-\n 1\n \n6.2 \nRULES OF MOVE VERB\n \n \nData movement is governed by the following rules.\n \n(a)\n \nThe contents of identifier \n–\n 1 or the value of literal \n–\n 1 is moved to identifier \n–\n 2, \nidentifier \n–\n 3, etc.  Note that there may be m\nore than one receiving field whereas \nthere must be only one sending field, the contents of all the receiving fields will \nbe replaced by the value of the sending field.  The contents of identifier \n–\n 1 \nremain unaltered.\n \n(b)\n \nWhen the sending field is numeric and \nthe receiving field is numeric or numeric \nedited (i.e., picture contains edit symbols) the data movement is called \nnumeric \ndata transfer\n.  In such cases the dominant factor in the movement is the \nalignment of the decimal points of the two fields.  For the \npurpose of this \nalignment, the numeric fields for which the position of the decimal point is not \nexplicitly indicated, the decimal point is assumed to be at the right of the \nrightmost digit.  If the receiving field is not large enough to hold the data \nrece\nived, truncation can take place at either and depending on whether the \nintegral part, fractional part or both can or cannot be accommodated (see \nexamples given in this section for further clarification).\n \nHowever, if significant \nintegral positions are likel\ny to be lost, a warning to that effect is issued by the \ncompiler.  On the other hand, if the receiving field is larger than the sending \n This watermark does not appear in the registered version - http://www.clicktoconvert.com\n \n29\n \nfield, zero\n-\nfill will take place in the unused positions to keep the numeric value \nunaltered.\n \n(c)\n \nWhen both the sending and \nreceiving fields are alphabetic, alphanumeric or \nalphanumeric edited, the data movement is called \nalphanumeric data transfer.\n  In  \nsuch cases the receiving area is filled from left to right and space fill occurs to \nthe right if the receiving area is larger\n than the sending field.  When the receiving \narea is smaller, truncation occurs from the right and the compiler gives a warning \nto that effect.\n \nIdeally, both the sending and receiving fields should belong to the same category.  \nHowever, quite often it beco\nmes necessary to transfer a data to a field having a different \ncategory.  Identifier \n–\n 1, identifier \n–\n 2, identifier \n–\n 3, etc., can be group items.  In such cases, \nthe move is very frequently used.  This is when we wish to initialize a record area by space\ns.  \nFor example, the statement MOVE SPACES TO REC\n-\nAREA will space\n-\nfill the entire area \ndenoted by the group name REC\n-\nAREA.\n \n6\n.3 \nEXAMPLES OF MOVE USAGE\n \n(a)\n \nMOVE A TO B.\n \n \n \n                           Contents of A                                                 \n              Contents of B\n \n         Before                           After                                      Before                       After\n \n         execution                      execution                               execution               \n    execution\n \n \n \n   (i) \n \nPIC   9999                                                                     PIC   9999\n \n \n5\n \n6\n \n7\n \n8\n \n \n5\n \n6\n \n7\n \n8\n \n \n1\n \n2\n \n3\n \n4\n \n \n5\n \n6\n \n7\n \n8\n \n \n               \n \n   (ii)\n \nPIC  999                                                                       P\nIC  9999\n \n \n5\n \n6\n \n7\n \n \n \n5\n \n6\n \n7\n \n \n \n1\n \n2\n \n3\n \n4\n \n \n0\n \n5\n \n6\n \n7\n \n                       \n \n                                                                                                                            \nZero fill on the\n \n                                               \n                                                                             the left\n \n \n   \n(iii)\nPIC  99V9                                                                   PIC  999V99\n \n \n1\n \n2\n \n3\n \n \n1\n \n2\n \n3\n \n \n5\n \n6\n \n7\n \n8\n \n2\n \n \n0\n \n1\n \n2\n \n3\n \n0\n \n                    ^              \n                         ^                                               ^                              ^            \n \n                                                                                                                            Zero fill on l\neft\n \n                                                                                                                            and right\n \n \n                           Contents of A                                                               Contents of \nB\n \n         Before                           After                                      Before                       After\n \n         execution                      execution                               execution                   execution\n \n \n   \n This watermark does not appear in the registered version - http://www.clicktoconvert.com\n \n30\n \n(iv) \n \nPIC  99V99                                                                 PIC  999V9\n \n \n1\n \n2\n \n3\n \n4\n \n \n1\n \n2\n \n3\n \n4\n \n \n5\n \n6\n \n7\n \n8\n \n \n0\n \n1\n \n2\n \n3\n \n                    ^                                   ^                                                  ^                         \n         ^                                                                                                                                       \n \n \nZero fill on \n \n \nLeft and \n \n \ntruncation on                         \n \n                                            \n                                                                                     right\n \n \n(v) \n \nPIC  999V9                                                                   PIC  99V9\n \n \n1\n \n2\n \n3\n \n4\n \n \n1\n \n2\n \n3\n \n4\n \n \n9\n \n5\n \n4\n \n \n2\n \n3\n \n4\n \n                           ^           \n                        ^                                      ^                                      ^\n \n                                                                                                                                    \nTruncation \n \n        \n                                                                                                                             on left\n \n \n(vi) \n \nPIC   X(4)                                                                     PIC   X(6)\n \n \nR\n \nA\n \nJ\n \nU\n \n \nR\n \nA\n \nJ\n \nU\n \n \nC\n \nH\n \nE\n \nT\n \nA\n \nN\n \n \nR\n \nA\n \nJ\n \nU\n \nb\n \nb\n \n                                                                                                                                                               \nSpace fill \n \n                                                                \n                                                                    on right\n \n \n \n(vii)  PIC  X(5)                                                                     PIC   X(4)\n \n \nS\n \nO\n \nM\n \nA\n \nN\n \n \nS\n \nO\n \nM\n \nA\n \nN\n \n \nR\n \nA\n \nM\n \nU\n \n \nS\n \nO\n \nM\n \nU\n \n \n                                       \n                                                                                           Truncation \n \n                                                                                                                                  on right\n \n \n(viii) PIC 99\n9V99                                                               PIC ZZ9.99\n \n \n0\n \n1\n \n2\n \n3\n \n4\n \n \n0\n \n1\n \n2\n \n3\n \n4\n \n \n5\n \n6\n \n7\n \n.\n \n8\n \n9\n \n \nb\n \n1\n \n2\n \n.\n \n3\n \n4\n \n                          ^                                       ^\n \n                                                            \n                                                                 Decimal point\n \n                                                                                                                             alignment and\n \n                                      \n                                                                                      editing\n \n(b)\n \nMOVE 15 TO A.\n \n \nIn this case the number 15 will be moved to A and if the PICTURE of A is 999, then\n \nafter the execution of the above statement A will contain 015.\n \n(\nc)\n \nMOVE “THERE IS AN ERROR” TO A.\n \nFrom quotes to quotes the total number of characters including space is 17.  since this is \na nonnumeric literal, all the 17 characters will be moved to A from left to right  if the \nPICTURE of A is X(17).\n This watermark does not appear in the registered version - http://www.clicktoconvert.com\n \n31\n \n(d)\n \nMOVE A TO B, \nC, D.\n \nIf the contents of A is 22 and the contents of B, C and D are 452, 3892 and 46 \nrespectively, then after the execution of the above instruction the contents of B, C and D will \nbe 022, 0022 and 22 respectively.\n \nThe above mentioned rules for data moveme\nnt are also used elsewhere in COBOL.  For \nexample, when the value of a data item is initialized by using the VALUE clause, the same \nrules apply.  In this case the data name should be considered as the receiving field and the \nvalue of the literal should be \ntaken as that of the sending field.  Thus\n \n                           77  NEW\n-\nDATA   PIC   X(10)  VALUE  “NEWDATA”\n \nwill initialize NEW\n-\nDATA by the value NEWDATA\n \nbbb.\n \n6\n.4\n \nLET US SUM UP\n \nIn this lesson clear ideas about the MOVE verb are highlighted. One gets\n strong \nbackground of the concept by understanding the how the values are placed while moving \ntakes place from one variable to other. This verb will be used in majority of the programs.\n \n6.5\n \nLESSON\n-\nEND ACTIVITIES\n \nTry to find the answers for the following ex\nercises on your own.\n \n1.\n \nSpecify the syntax of Move Verb\n \n2.\n \nState the rules of Move Verb\n \n3.\n \nGive examples to show how Move statement works.\n \n6.6 \nPOINTS FOR DISCUSSION\n \n1)\n \nDiscuss the usage of move verb with exempt.\n \n2)\n \nDiscuss the rules for Data movement.\n \n6.7 \nREFERENCES\n \n1.\n \nCOBO\nL Programming , M.K.Roy  & Ghosh Dastidar , Tata McGraw Hill, \n \n            2\nnd\n Edition,1998\n \n2.\n \nCOBOL Programming , V. RAJARAMAN, PHI Pub\n \n3.\n \nIntroduction to COBOL programming \n–\n Dr. R.Krishnamoorthy, JJ Publ\n \n4.\n \nStructured COBOL , Welburn, TataMcGraw Hill , 4\nth\n Editio\nn.\n This watermark does not appear in the registered version - http://www.clicktoconvert.com\n \n32\n \n \n \nLESSON \n–\n \n7\n:  \nARITHMETIC VERBS\n \nCONTENTS\n \n7\n.0\n  \nAims and objectives\n \n7\n.1\n  \nADD VERB\n \n7\n.2\n  \nSUBTRACT VERB\n \n7\n.3\n  \nMULTIPLY VERB\n \n7.\n4\n  \nDIVIDE VERB\n \n7\n.5\n  \nCOMPUTE VERB\n \n7\n.6\n  \nLet us Sum Up\n \n7\n.7\n  \nLesson\n-\nend Activities\n \n7.8\n  \nPoints for Discussion\n \n7\n.\n9\n  \nReferences\n \n7\n.0 \nAIMS &\n OBJECTIVES \n \nMost of the problems require some computations to be performed on the input or \nintermediate data which are numeric in nature.  Arithmetic verbs are used to perform these \ncomputations.  All these verbs can contain either identifiers or numeric \nliterals or both.  In the \ncase of identifiers, they must be elementary numeric fields, and identifiers used after \nGIVING option must be edited or unedited numeric fields.  Some arithmetic verbs in their \nmost elementary forms are discussed below.\n \n7.1\n \nA\nDD VE\nRB\n \nThis verb can be used to find the sum of two or more numbers and to store the sum.  The \nADD   verb takes any one of the following two forms.\n \n             \n \n                            identifier\n-\n1\n \n                            identifier\n-\n2\n \n              \nADD\n \n \n        \n \n                              literal \n-\n 1                                    ,   literal\n-\n2                        …\n \n                            \n \n                                 TO            identifier\n-\n3           [,  identifier\n-\n4]   …\n \n \n \n            \n \n           \n \nidentifier\n-\n1\n \nidentifier\n-\n2                 identifier\n-\n3\n \n             \nADD\n       literal\n-\n1                           literal\n-\n2                  ,   literal\n-\n3          \n \n \n                         \nGIVING\n                      identifier\n-\n4\n                 [, identifier\n-\n5]     …\n \nExamples\n \n(a)\n \n \n \nADD A TO B.\n \nThis example shows that the value of A will be added to the value of B and the result \nwill be stored in B.  The alignment of the decimal point is done automatically.\n \n \n \n \n \n \n This watermark does not appear in the registered version - http://www.clicktoconvert.com\n \n33\n \n(b)\n \n ADD A B C TO D.\n \nIn this c\nase the values of A, B and C will be added to the old value of D and the resultant \nsum will be the new value of D.\n \n(c)\n \n \n \nADD 30 A TO B.\n \nThis example shows that the number 30, the value of A and the value of B will be added \nand the resultant sum will be stored \nin B.\n \n(d)\n \n \n \nADD A, B GIVING C.\n \nHere only the values of A and B will be added and the sum will be stored in C.  The old \nvalue of C will be lost and that value will not take part in the summation.\n \n(e)\n \n \n \nADD A, B GIVING C, D, E.\n \nIn this case the value of A, B will be\n added and the sum will be stored in C, D and E.  \nHence after the execution of this statement, C, D and E will have the same value.\n \nThe above examples indicate that in the case of the TO option the previous value of the \nlast named operand takes part in the\n summation and then this value is replaced by the result.  \nHowever, this is not the case when the GIVING option is used.  It should be mentioned here \nthat the last named operand in both the cases can never be a literal as the resultant sum is \nalways stored\n there.\n \nIt is important to note that TO and GIVING cannot be used simultaneously. Thus ADD \nA TO B GIVING C would be wrong.  The purpose is served by specifying as ADD A B \nGIVING C.   With GIVING option identifier\n-\n2/numeric\n-\nliteral\n-\n2 is a must.\n \n7.2\n SUBTRACT\n  VERB\n \nThis verb is used to subtract one, or the sum of two or more numbers from one or more \nnumbers and to store the result.\n \n       \n \nThe form of the SUBTRACT verb is as follows:\n \n                                    identifier\n-\n1                        ind\nentifier\n-\n2\n \n \n       \nSUBTRACT\n        numeric\n-\n                       ,    numeric\n-\n             …   \nFROM\n \n                                    literal\n-\n1                              literal\n-\n2 \n \n \n                                   identifier\n-\n3               [,   i\ndentifier\n-\n6]  …\n \n        \n \n                                 ,    GIVING identifier\n-\n5       , identifier\n-\n6      …\n \n \nExamples\n \n(a)   \n \nSUBTRACT A FROM B.\n \nThis statement means that the value of A will be subtracted from the value of B and the \nsubtracted result w\nill be stored in B.  The decimal point alignment will be done \nautomatically.\n \n(b)\n \nSUBTRACT A, B FROM C.\n \nThis one shows that the value of B and A will be added and the resultant sum will be \nsubtracted from the value of C.  After subtraction, the final result wil\nl be stored in C.  The old \nvalue of C will be lost.\n \n \n \n \n \n This watermark does not appear in the registered version - http://www.clicktoconvert.com\n \n34\n \n(c)\n \nSUBTRACT A, B FROM C GIVING D.\n \nThis indicates that the summation of the value of A and B will be subtracted from the \nvalue of C and the final result will be stored in D.  The old value of D will be lost \nwhereas in \nthis case C  retains the old value.\n \n(d)\n \nSUBTRACT 15 FROM A  B.\n \n Here the number 15 will be subtracted from the values of A and B.  A and B will \nreceive these new values.\n \nAs in the case of the ADD statement, here also the last\n-\nnamed operand must not \nbe a \nliteral as the final result will be stored there.  If the GIVING option is used, identifier\n-\n3, \nidentifier\n-\n4 etc. can also be numeric literals.  For example, SUBTRACT A B FROM 50 \nGIVING C.\n \n7.3\n \n \nMULTIPLY  VERB\n \nThis statement causes one or more multiplic\nands to be multiplied by a multiplier and to \nstore the products.  The form of the MULTIPLY verb is as follows:\n \n \n                                       identifier\n-\n1\n \n           \nMULTIPLY\n                                         \nBY\n   identifier\n-\n2          ,  \n  identifier\n-\n3       …\n \n                                         numeric\n-\nliteral\n-\n1\n \n \n                                   ,    \nGIVING\n   identifier\n-\n4      ,    identifier\n-\n5       … \n \n \n \nExamples\n \n(a)\n \nMULTIPLY A BY B.\n \nIn this case the value of A and B will be multipl\nied and the product will be stored in B.  \nThe decimal point position will automatically be taken care of.  The old value of B will be \nlost.\n \n(b)\n \nMULTIPLY A BY B GIVING C.\n \nHere the value of A and B will be multiplied and the product will be stored in C.  The \nold\n value of C will be lost but B will contain its old value.\n \n(c)\n \nMULTIPLY A BY B C D.\n \nHere B will be multiplied by A and the result will be stored in B.  similarly, C will be \nmultiplied by A and the product will be stored in C and the result of the multiplicatio\nn of D \nand A will be stored in D.\n \n(d)\n \nMULTIPLY A BY B C GIVING D E.\n \nIn this case the product of B and A will be stored in D, whereas the product of C and  A \nwill be stored in E.\n \nIn the case of the MULTIPLY statement also, literals cannot be used for identifier\n-\n2, \nidentifier\n-\n3, etc.  However, if the GIVING option is used, numeric literals are also permitted \nin place of identifier\n-\n2, identifier\n-\n3, etc.  For example,\n \n               MULTI\nPLY  TAX \n \nBY .05  GIVING  TAX\n-\nBASE.\n \n \n \n \n This watermark does not appear in the registered version - http://www.clicktoconvert.com\n \n35\n \n7.4\n \nDIVIDE VERB\n \nThe purpose of this verb \nis to divide one number by another and to store the result.  \nThere are several forms of this verb.  One of its forms is as follows:\n \n                                        \n \n                                          identifier\n-\n1\n \n                    \nDIVIDE\n                                         \n \nINTO \n    identifier\n-\n2     ,  identifier\n-\n3   …\n \n                                          numeric\n-\nliteral\n-\n1\n \n \n \n                                         ,  GIVING identifier\n-\n4      ,    identifier\n-\n5        …\n \n \nExample\ns\n \n(a)\n \nDIVIDE 5 INTO A.\n \nIf the value of A is 20, then after the execution of this statement the value of A will be 4.  \nThe old value of A will be lost.\n \n(b)\n \nDIVIDE 5 INTO A GIVING B.\n \nIf the value of A is 20, then after the execution of this statement the value of B \nwill be 4.  \nHere A will retain its old value.\n \n(c)\n \nDIVIDE 3 INTO A GIVING B C.\n \nHere the result of the division of A by 3 will be stored both in B and C.\n \n(d)\n \nDIVIDE 2.5 INTO A B GIVING C D.\n \nIn this case A will be divided by 2.5 and the result will be stored in C, wh\nereas the result \nof the division of B by 2.5 will be stored in D.\n \nA\ns in the case of the MULTIPLY statement, literals cannot be used for identifier\n-\n2, \nidentifier\n-\n3, etc.  Only when the GIVING option is used the numeric literals permitted in \nplace of identif\nier\n-\n2, identifier\n-\n3, etc.  For example, DIVIDE A INTO 25 GIVING V.\n \n            The second form of this verb is as follows:\n \n \n                                    identifier\n-\n1                               identifier\n-\n2 \n \n                \nDIVIDE \n              \n                         \nBY \n  \n \n                                    numeric\n-\nliteral\n-\n1                      numeric\n-\nliteral\n-\n2\n \n \n                                    \nGIVING\n  identifier\n-\n3             ,   identifier\n-\n4         … \n \n \nIn this case identifier\n-\n1 or num\neric\n-\nliteral\n-\n1 will be divided by identifier\n-\n2 or numeric\n-\nliteral\n-\n2, whatever may be the case.  The result is stored in identifier\n-\n3, identifier\n-\n4, etc.\n \nExamples\n \nDIVIDE A BY 3 GIVING C.\n \nIf the value of A is 21 then after the execution of this statement C w\nill contain 7.\n \nThere is another form of DIVIDE verb where there is a provision to store the \nremainder.  Its form is\n \n \n \n \n \n \n \n This watermark does not appear in the registered version - http://www.clicktoconvert.com\n \n36\n \n \n                  \n                     identifier\n-\n1              INTO              identifier\n-\n2 \n \n                \nDIVIDE \n               \n                        \n \n                                    numeric\n-\nliteral\n-\n1           BY          numeric\n-\nliteral\n-\n2\n \n \n                            \nGIVING\n  identifier\n-\n3        \nREMAINDER\n   identifier\n-\n4.         \n \nExample\n \nDIVIDE A INTO B GIVING C REMAINDER D\n.\n \nIf the identifier A, B, C and D are all two\n-\ndigited numbers and if they contain 05, 37, 18  \nand 20 respectively before the execution of the statement, then after the execution of the \nstatement, they will contain 05, 37, 07 and 02 respectively.\n \n7.5\n \nCOMPUT\nE VERB\n \nCOMPUTE verb is so powerful. All the computations performed by the other four verbs \ncan also be done easily by using the COMPUTE verb.  Its general format is\n \n        \n \nCOMPUTE \n       identifier\n-\n1    \nROUNDED\n   ,   identifier\n-\n2  \nROUNDED\n     … \n \n \n    \n   \n \n=   arithmetic\n-\nexpression       ;   ON \nSIZE ERROR\n imperative\n-\nstatement\n \n The COMPUTE statement has the following meaning.  During execution the arithmetic \nexpression on the right of the equal sign is evaluated and the value is then moved to the \nidentifi\ners(s) on the left\n-\nhand side.  If any identifier on the left of the equal sign is a numeric\n-\nedited item, editing takes place when the value of the expression is moved to the said \nidentifier.  The identifiers on the left of the equal sign (=) must be numeri\nc or numeric\n-\nedited \nelementary items.  The right\n-\nhand side must be an arithmetic expression.  An arithmetic \nexpression can be an identifier (numeric elementary items only), a numeric literal or can \nspecify a computation involving two or more such identifie\nrs and/or literals.  An arithmetic \nexpression has always a numeric value.  The following are the rules for constructing \narithmetic expression.\n \n(i)\n \nWhen an arithmetic expression specifies a computation, it may consist of two or more \nnumeric literals and/or data\n names joined by arithmetic operators.  The following \ntable lists the operations and their meaning.\n \n                      \nOperator\n                                             \nMeaning\n \n \n                      **                                                \n       Exponentiation\n \n                       /                                                         Division\n \n*                                                        Multiplication\n \n-\n                                                         Subtraction\n \n+ \n                                                       Addition\n \nThere must be at least one space preceding and following the operator in an arithmetic \nexpression.  No two arithmetic operators can appear together in an expression.  In this respect \n** is con\nsidered to be a single operator.\n \n(i)\n \nParentheses may be used to specify the order of operations in an arithmetic \nexpression. Where  parentheses are absent, the order is taken to be left to right as \nfollows:\n \n      \n                \n**                             \n                          Exponentiation\n \n                     / *                                                       Division and Multiplication\n \n                           \n-\n +                                                       Subtraction and Additio\nn\n \n \n \n \n \n \n \n This watermark does not appear in the registered version - http://www.clicktoconvert.com\n \n37\n \nWhen  parentheses are used, the portion of the expression enclosed within parentheses  \nis evaluated first.\n \n(ii)\n \nAn arithmetic expression may be proceeded by a + or \n–\n sign. Such operations are \ncalled unary + or unary \n–\n operators.\n \nExamples of valid arithmetic e\nxpressions are\n \n      \n \n               3               *         I\n \n               RATE                  *          QUANTITY   \n-\n      DISCOUNT\n \n               \n \nNote that when the right\n-\nhand side of a COMPUTE verbs is a single identifier or literal, \nthe effect \nis that of a MOVE statement.\n \nExample  1\n \n                       COMPUTE    A =  B  +  C\n \nhas the same effect as that as that of ADD  B  C  GIVING  A\n \nExample  2\n \n                       COMPUTE     F  =   1.8  *  C  + 32\n \nThe value of the expression on the right\n-\nhand side is evaluated and this value is then \nmoved to F.  Suppose C and F are defined with pictures 99 and ZZ9.9 respectively and the \ncurrent value of C is 3.  Then after the execution of the statement, F will have the value 37.4.\n \n7.6\n LET US SUM UP\n \nThis \nlesson has taught the learner to understand the arithmetic verbs like Add, Subtract, \nMultiply, Divide and Compute. All these verbs have been presented with syntaxes and \nadequate examples are also provided.\n \n7.\n7\n LESSON\n-\nEND ACTIVITIES\n \nTry to find the answers \nfor the following exercises on your own.\n \n1.\n \nExplain with syntax ADD verb.\n \n2.\n \nExplain with syntax SUBTRACT verb.\n \n3.\n \nExplain with syntax MULTIPLY verb.\n \n4.\n \nExplain with syntax DIVIDE verb.\n \n5.\n \nExplain with syntax  COMPUTE verb.\n \n7.9 POINTS FOR DISCUSSION\n \n1) Explain the usage \nof the followings.\n \n    a) ADD verb  b) SUBTRACT verb\n \n2) Write notes on\n \n     a) MULTIPLY verb  b) DIVIDE verb.\n \n3) Discuss the usage of COMPUTER verb.\n \n7.8 \n \nREFERENCES\n \n1.\n \nCOBOL Programming , M.K.Roy  & Ghosh Dastidar , Tata McGraw Hill, \n \n            2\nnd\n Edition,\n1998\n \n2.\n \nCOBOL Programming , V. RAJARAMAN, PHI Pub\n \n3.\n \nIntroduction to COBOL programming \n–\n Dr. R.Krishnamoorthy, JJ Publ\n \n4.\n \nStructured COBOL , Welburn, TataMcGraw Hill , 4\nth\n Edition.\n This watermark does not appear in the registered version - http://www.clicktoconvert.com\n \n38\n \n \n \nLESSON \n–\n \n8\n: \nINPUT AND OUTPUT VERBS\n \nCONTENTS\n \n8\n.0 \n \nAim and objectives\n \n8\n.1 \n \nOpen Sta\ntement\n \n8\n.2 \n \nRead Statement\n \n8\n.3 \n \nWrite Statement\n \n8\n.4 \n \nClose Statement\n \n8\n.5 \n \nAccept\n \n8\n.6 \n \nDisplay\n \n8\n.7 \n \nGO TO, STOP RUN\n \n8\n.8 \n \nLet us Sum Up\n \n8\n.9 \n \nLesson\n-\nend Activities\n \n8.10\n \nPoints for Discussion\n \n8.1\n1\n \nReferences\n \n8\n.0 AIM AND OBJECTIVES\n \nReading the data into the mem\nory from some input medium (such as punched cards) and \nwriting the results from the memory onto some output medium (such as continuous \nstationary) are of basic importance. The verbs OPEN,READ,WRITE and CLOSE are \navailable for such input\n-\noutput operations.\n \n8\n.1 OPEN\n \nWhen a READ or a WRITE operation is performed on a file, it must be open. The \nopening of a file may be done with the help of the OPEN verb. With the OPEN verb it must \nbe also indicated whether the file should be opened as an input file or output f\nile. If it is an \ninput file, only reading is possible, whereas in the case of an output file, only writing is \npossible. A file once opened remains open until it is closed by a CLOSE statement.\n \n \n \nThe OPEN statement in its simple form is as follows:\n \n \n     \n                                    \nINPUT\n      file\n-\nname\n-\n1                      ,  file\n-\nname\n-\n2          …                   \n \n                     \nOPEN \n                                                                                                        \n          \n \n                                   \nOUTPUT\n  file\n-\nname\n-\n3                      ,  file\n-\nname\n-\n4        \n \n \nExample  1\n \nOPEN  INPUT  TRANSACTION,  OLD\n-\nMASTER OUTPUT NEW\n-\nMASTER.\n \nThe example shows that there are two input files named TRANSACTION and OLD\n-\nMA\nSTER and one output file called NEW\n-\nMASTER.  All these files are opened and these \nare ready for reading or writing.\n \n \n \n This watermark does not appear in the registered version - http://www.clicktoconvert.com\n \n39\n \nExample  2\n \nOPEN INPUT MARK\n-\nFILE.\n \nOPEN OUTPUT RESULT\n-\nFILE.\n \nThe first OPEN statement opens the MARK\n-\nFILE in input mode and the file is ready \nfor \nreading.  The next statement makes the RESULT\n-\nFILE ready for writing.  There may be \nseveral OPEN statements in a program.\n \n8\n.2  READ\n \nThe purpose of this verb is to make available the next logical record from an input file.  \nIt is important to note the m\neaning of \"next\" logical record in the above statement.  The first \ntime the READ statement is executed, the first record of the file will be read into the record \narea described in the FILE SECTION of the DATA DIVISION.  The next time the READ \nstatement is \nexecuted, the second record will be read in the same area.  In this way each time \na READ statement is executed the successive records will be read in the same area.  Thus a \ntime will come when there will be no more records in the file.  In that case the st\natements \nfollowing the AT END clause will be executed.  The format of the READ statement is\n \n                     \nREAD\n  file\n-\nname RECORD  [\nINTO\n identifier\n-\n1]\n \n                                AT \nEND\n  imperative\n-\nstatement\n \nExample  1\n \nREAD OLD\n-\nMASTER AT END MOVE\n ZERO TO END\n-\nOF\n-\nRECORDS.\n \nAs a result of this statement, normally the next record from the OLD\n-\nMASTER file will \nbe read.  If there is no more record in OLD\n-\nMASTER, the value zero will be moved to the \nfield named END\n-\nOF\n-\nRECORDS.\n \nExample  2\n \nREAD TRANSACTION R\nECORD AT END GO TO PARA\n-\nEND.\n \nThis example is similar to the earlier example.  The next record from the \nTRANSACTION file will be read if it is available.  If the file does not contain any more \nrecords, the control will be transferred to the paragraph named \nPARA\n-\nEND.\n \nExample  3\n \nREAD KARD\n-\nFILE INTO IN\n-\nREC AT END\n \n                                                 GO TO JOB\n-\nEND.\n \nThis statement not only reads the next record into the record area of KARD\n-\nFILE but \nalso moves the record into the area name IN\n-\nREC.  Whe\nn there is no more record in the \nKARD\n-\nFILE, the control is transferred to the paragraph named JOB\n-\nEND.  If the record area \nof the KARD\n-\nFILE has been named KARD\n-\nREC, the above statement is equivalent to\n \n                                   READ KARD\n-\nFILE AT E\nND GO TO JOB\n-\nEND.\n \n                                   MOVE KARD\n-\nREC TO IN\n-\nREC.\n \nIt may be noted that if the record has been successfully read, it is now available in \nKARD\n-\nREC as well as IN\n-\nREC.\n \n8\n.3 WRITE\n \nThe WRITE verb releases a record onto an output file. \n The syntax of the WRITE \nstatement can be different depending on the output device and medium used.  The verb as This watermark does not appear in the registered version - http://www.clicktoconvert.com\n \n40\n \ndescribed here can be used only to print results on a continuous stationery through a line \nprinter.  The form of the WRITE statement in such  a\n case is\n \n   \n \nWRITE\n   record\n-\nname     [ \nFROM \n identifier\n-\n1]\n \n \n                           \n \n                          BEFORE                                                integer\n-\n1               LINES\n \n                                                     \n     ADVANCING       identifier\n-\n2            LINES\n \n                          AFTER                                                   mnemonic\n-\nname\n \n                                                                                          hardware\n-\nname\n \n \nThe\n first point to be noted is that in the case of the READ statement the file name is to \nbe specified, whereas in the case of the WRITE statement it is required to mention the record \nname an not the file name.  The ADVANCING phrase is used to control the ver\ntical \npositioning of each record at the time of printing on the stationery placed on the printer.  \nWhen the BEFORE  phrase is used, the record is printed before the stationary is advanced, \nwhereas the AFTER phrase may be used when the intention  is to adva\nnce the stationary first \nand then to print the record.  If integer\n-\n1 or identifier\n-\n1 is mentioned, the stationary is \nadvanced by the number of lines equal to the value of integers\n-\n1 or to the current value of \nidentifier\n-\n1.\n \nIf the mnemonic\n-\nname is specified\n, the printer will be advanced to the carriage control \nchannel declared for the mnemonic\n-\nname in the SPECIAL\n-\nNAMES paragraph.  This option \nis provided so that the hardware names which may be peculiar to a particular computer need \nnot appear in the PROCEDUR\nE DIVISION.\n \nIf the FROM option is used, the operation is identical to that of MOVE identifier\n-\n1 TO \nrecord\n-\nname followed by a WRITE record\n-\nname without the FROM clause.  It is illegal to \nuse the same storage area for both record\n-\nname and identifier\n-\n1.\n \nIt sh\nould be noted that after WRITE is executed the record is no longer available.\n \nExamples\n \n(i)\n \nWRITE TRANS\n-\nRECORD AFTER ADVANCING 3 LINES.\n \nThis WRITE statement indicated that TRANS\n-\nRECORD is a record name of a file that \nhas been assigned to PRINTER.  The current p\nosition of the stationery will be advanced by 3 \nlines, i.e., there will be 2 blank lines and the present record will be written on the third line.\n \n(ii)\n \nWRITE TRANS\n-\nRECORD BEFORE ADVANCING 3 LINES.\n \nThe record will be written first and then the page will be advan\nced by 3 lines.\n \n 8.4 \nCLOSE\n \nWhen the processing of a file is over, the file may be closed.  This is done with the help \nof the CLOSE\n-\nverb.  The form of the CLOSE statement is\n \n            \nCLOSE\n     file\n-\nname\n-\n1       [,   file\n-\nname\n-\n2]               …\n \nThe file \nmust be open when a close statement can be executed.  Once a file is closed, it \nis no longer available to the program.  It should be opened again if the file is required \nsubsequently.  It may be noted that unlike the OPEN statement, the nature of the use o\nf the \nfile (input and output) should not be mentioned in the CLOSE statement.\n \n \n \n \n \n \n This watermark does not appear in the registered version - http://www.clicktoconvert.com\n \n41\n \nExample\n \nCLOSE TRANSACTION, OLD\n-\nMASTER, NEW\n-\nMASTER, PRINT\n-\nFILE.\n \nThis statement will close all the four files \n–\n TRANSACTION, OLD\n-\nMASTER, NEW\n-\nMASTER  and PRINT\n-\nFILE.\n \n8.5 \nACCEPT\n \nThe \nACCEPT statement is used to read low\n-\nvolume data from  the operator’s  console, \nsome other hardware device or from the operating system.  The general format of the \nACCEPT statement is as follows:\n \n                                                           \n                                                    mnemonic\n-\nname\n \n                                                                                                               \n \n                        \n \n \n \n \n \n \n \n     \nDATE\n \nACCEPT\n                      identifi\ner            \nFROM\n \n \n \n \n \n \n \n \n \n                 \nDAY\n \n \n                                                                                                                 \nTIME\n \n \n \nWhen the FROM option is omitted, the data is read into the identifier from the \noperator\n’s console.  At the time of execution, a message is displayed on the console  (e.g.,  \nAWAITING COBOL INPUT)  and the program is suspended until the operator enters the \ndata through the console keyboard.  Data entered by the operator will be left justified \nin the \nidentifier.  For example,\n \n                            ACCEPT  FLAG\n-\nA\n \ncan be specified to read the value of  FLAG_A fro the console.  It may be noted that no file \ndefi\n0\nnition is necessary.\n \nThe mnemonic\n-\nname option is implementer\n-\ndependent.  The hardw\nare device from \nwhich the data is to be read is to be equated to a mnemonic name in the SPECIAL\n-\nNAME \nAPARAGRAPH.  For example, the following entry in the SPECIAL\n-\nNAMES paragraph\n \n                            TYPEWRITER\n-\n1   IS    CONTROL\n-\nDATA\n \nmay equate the m\nnemonic name CONTROL\n-\nDATA with the assumed implementor\n-\nname \nTYPEWRITER\n-\n1.  The \n \n                             ACCEPT  FLAG\n-\n1  FROM  CONTROL\n-\nDATA\n \nwill read the value of FLAG\n-\nA fro the hardware device indicated by TYPEWRITER\n-\n1.\n \nThe DATE,  DAY and TIME options\n are new features introduced in ANSI 74 COBOL.  \nThe DAY option returns the six\n-\ndigit current date in the form YYMMDD where YY, MM \nand DD stand for year, month and day respectively.  The DAY option returns a five\n-\ndigit \ncurrent date in the form YYDDD where Y\nY stands for the year and DDD stands for the day \nof the year(001 to 365). The TIME option returns an eight\n-\ndigit time in the form \nHHMMSSTT where HH, MM, SS, TT represent hour, minute, second and hundreds of a \nsecond respectively.  For all the three options\n, the returned value is transferred to the \nidentifier ( in the ACCEPT statement) according to the rules of the MOVE statement.  For \nexample,\n \n \n This watermark does not appear in the registered version - http://www.clicktoconvert.com\n \n42\n \n                                 ACCEPT  THIS\n-\nDAY  FROM  DATE\n \nwill transfer the value of the current date to THIS\n-\nD\nAY.\n \n8.6 \nDISPLAY\n \nThe function of the DISPLAY statement is opposite to that of the ACCEPT statement.  \nIt is used to display low\n-\nvolume results on the operator’s console or some other hardware \ndevice.  The general format of the DISPLAY statement is\n \n \n      \n                                  identifier\n-\n1             ,   identifier\n-\n2\n \n            \nDISPLAY \n                                                                          …   \nUPON\n mnemonic\n-\nname\n \n                                     literal\n-\n1                 \n     ,    literal\n-\n2\n                             \n \n \nIf the UPON option is omitted, the values of the identifier\n-\n1/literal\n-\n1, identifier\n-\n2/literal\n-\n2, etc. are displayed on the console.  The UPON option with the mnemonic\n-\nname is \nimplementor\n-\ndependent.  The mne\nmonic name, as in the case of the ACCEPT verb, should be \ndefined in the SPECIAL\n-\nNAMES paragraph.  When more than one operand is specified, the \nvalues of the operands are displayed in the sequence they are specified.  There will be no \nspace between these va\nlues.  The operands must be of the usage DISPLAY. The literals may \nbe any literal or figurative constant except the ALL literal.  If a figurative constant is \nspecified, only one occurrence of the constant is displayed.\n \nExample\n \n \nConsider the following state\nment.\n \n         \n \nDISPLAY    “ SUM  IS”,     THE\n-\nSUM\n \nand suppose that the picture and current value of  THE\n-\nSUM are 9(3) and 15 respectively.  \nUpon execution of the statement, the following will be displayed on the console\n \n           SUM   IS   015\n \n8.7 \nGO TO\n , STOP RUN\n \n \n \nGO\n  \nTO\n \nGO TO  verb is used to unconditionally transfer the control to elsewhere in the program.  \nIts form is as follows:\n \n             \nGO\n TO procedure\n-\nname\n \nAs a result of the execution of this statement, the control is transferred to the first\n \nstatement of the paragraph or section mentioned in the procedure name.\n \nExample \n \n \n \nGO TO ERROR\n-\nROUTINE\n \nSuppose ERROR\n-\nROUTINE is a paragraph name.  The execution of this statement will \ntransfer the control to the first statement in ERROR\n-\nROUTINE.  On the ot\nher hand, suppose \nERROR\n-\nROUTINE  is a section name and FIRST\n-\nPARA is the name of the first paragraph in \nthis section.  In the case control will be transferred to the first statement in FIRST\n-\nPARA.  It \nmay be noted that GO TO FIRST\n-\nPARA is identical to GO T\nO ERROR\n-\nROUTINE.\n \n \nSTOP RUN\n \nThis verb causes the terminat\nion\n of the execution of the object program.  Its form is\n \n            \nSTOP\n   \nRUN  \n \n \n \n This watermark does not appear in the registered version - http://www.clicktoconvert.com\n \n43\n \n8.\n8\n \nLET US SUM UP\n \nIn the  lesson the learner is exposed to the Input\n-\noutput Verbs like Open, Close, Read, \nWrite, Acce\npt, Display etc. All of these will be useful in majority of the programs. They are \nself\n-\nexplanatory in nature by their names.\n \n8\n.9 \n \nLESSON\n-\nEND ACTIVITIES\n \nTry to find the answers for the following exercises on your own.\n \n1.\n \nExplain with syntax OPEN statement.\n \n2.\n \nEx\nplain with syntax READ statement.\n \n3.\n \nExplain with syntax WRITE  statement.\n \n4.\n \nExplain with syntax CLOSE  statement.\n \n5.\n \nExplain with syntax ACCEPT & DISPLAY statements.\n \n8.1\n0\n POINTS FOR DISCUSSION\n \n1) Explain the usage of OPEN verb with syntax and examples.\n \n2) Write s\nhort notes on READ verb.\n \n3) Briefly explain about WRITE verb.\n \n4) Write notes on ACCEPT verb.\n \n8.1\n1 \nREFERENCES\n \n1.\n \nCOBOL Programming , M.K.Roy  & Ghosh Dastidar , Tata McGraw Hill, \n \n            2\nnd\n Edition,1998\n \n2.\n \nCOBOL Programming , V. RAJARAMAN, PHI Pub\n \n3.\n \nIntroduct\nion to COBOL programming \n–\n Dr. R.Krishnamoorthy, JJ Publ\n \n4.\n \nStructured COBOL , Welburn, TataMcGraw Hill , 4\nth\n Edition.\n This watermark does not appear in the registered version - http://www.clicktoconvert.com\n \n44\n \nLESSON \n–\n 9\n: \nCORRESPONDING OPTIONS\n \nCONTENTS\n \n9\n.0 \n \nAims and Objectives\n \n9\n.1 \n \nMove Corresponding\n \n9\n.2 \n \nADD & SUBTRACT Corresponding\n \n9\n.3 \n \nGeneral \nRules\n \n9\n.4 \n \nRounded Option\n \n9\n.5 \n \nOn Size Error Option\n \n9\n.6 \n \nLet us Sum Up\n \n9\n.7 \n \nLesson\n-\nend Activities\n \n9.8\n \nPoints for Discussion\n \n9.\n9\n \nReferences\n \n9\n.0  \nAIMS AND OBJECTIVES\n \nThe aim of this lesson is to introduce the learner to get ideas about various \ncorresponding \noptions , rounded option and size error option.\n \n9.1 \nMOVE CORRESPONDING\n \nQuite often it is required to move some of the data items of one group to some other data \nitems in another group.  If the names of the corresponding data items of the two groups are \ndis\ntinct, then for each data item, a separate MOVE verb should be used.  However, if the \ncorresponding data items of both the records have identical names, then instead of using \nseparate MOVE statement, just one MOVE statement with the CORRESPONDING  option \nc\nan be used.  The following example illustrates the use of the MOVE verb with the \nCORRESPONDING option.\n \nExample \n \n \nConsider the following DATA DIVISION entries.\n \n02\n \nPAY\n-\nREC.\n \n02              ID\n-\nNUMBER                        PIC           9[5].\n \n                   \n                   02              NAME                                   PIC           X[25].\n \n                                      02              DEPARTMENT                    PIC           X[20].\n \n                                      02              BA\nSIC\n-\nPAY                          PIC           9999V99.\n \n                                      02              FILLER                                  PIC           X[24].\n \n \n01\n \nPRINT\n-\nREC.\n \n02              FILLER                                 PIC            X[5\n].\n \n02              ID\n-\nNUMBER                        PIC            Z[5].\n \n02              FILLER                                 PIC            X[5].\n \n02              NAME                                   PIC            X[25].\n \n02              FILLER        \n                         PIC            X[5].\n \n02              DEPARTMENT                    PIC            X[20].\n \n02              FILLER                                 PIC            X[5].\n \n02              BASIC\n-\nPAY                         PIC            Z\nZZZ .99.\n This watermark does not appear in the registered version - http://www.clicktoconvert.com\n \n45\n \n02              FILLER                                 PIC            X[5].\n \n02              DEDUCTIONS                     PIC            ZZZZ .99.\n \n02              FILLER                                 PIC            X[5].\n \n02              ALLOWAN\nCES                   PIC            ZZZZ .99.\n \n02              FILLER                                 PIC            X[5].\n \n02              NET\n-\nPAY                             PIC            ZZZZ. .99.\n \nSuppose it is required that the data stored in the four\n fields of PAY_REC should be \nmoved to those fields of PRINT_REC that are given the same data names.  The following \nfour MOVE statements can serve the purpose.\n \n                MOVE ID\n-\nNUMBER OF PAY\n-\nREC TO ID\n-\nNUMBER OF PRINT\n-\nREC.\n \n                MOVE NAME OF\n PAY\n-\nREC TO NAME OF PRINT\n-\nREC.\n \n                MOVE DEPARTMENT OF PAY\n-\nREC T0 DEPARTMENT OF PRINT\n-\nREC.\n \n                MOVE BASIC\n-\nPAY OF PAY\n-\nREC TO BASIC\n-\nPAY OF PRINT\n-\nREC.\n \nHowever, since both the records have same names for the concerned data items, the \nfol\nlowing statement\n \n                    MOVE CORRESPODING PAY\n-\nREC TO PRINT\n-\nREC.\n \nwill have the same effect.  It is not necessary that the corresponding data names in the two \nrecords should appear in the same order.  The general format of the MOVE \nCORRESPONDING\n statement is\n \n \n                                              \nCORRESPONDING          \n \n                         \nMOVE\n                                                       identifier\n-\n1       \nTO\n   identifier\n-\n2\n \n                                              \nCOR\nR\n \n \nwhere dentifier\n-\n1 and identifier\n-\n2 should be group names.  Note that MOVE \nCORRESPONDING is not a group move, it is merely a means for specifying a number of \nelementary moves through a single MOVE statement.  As such any editing, if specified, will \nbe pe\nrformed. Source and destination groups can include data names that are not common.  \nOnly those fields having identical names in the two records will take part in the data \nmovement.  The remaining data items in the destination group will remain unchanged.\n \n9\n.2\n \nADD and SUBTRACT CORRESPONDING\n \nThe CORRESPONDING option can also be used with the ADD and SUBTRACT verbs.  \nThe following are the formats of these verbs with the CORRESPONDING option.\n \n                              \n \n                                      \n        \nCORRESPONDING          \n \n                         \nADD\n                                                      identifier\n-\n1       \nTO\n   identifier\n-\n2\n \n                                              \nCORR\n \n \n                     \n \n \n                             \n                 \nCORRESPONDING          \n \n                 \nSUBTRACT \n                                                 identifier\n-\n1       \nTO\n   identifier\n-\n2\n \n                                              \nCORR\n \n \n \n \n This watermark does not appear in the registered version - http://www.clicktoconvert.com\n \n46\n \nIn the case of the ADD statement numeric elementary\n items in the group referred to by \nidentifier\n-\n1 are added to and stored in the corresponding elementary items of the group \nnamed in identifier\n-\n2.  In the case of the SUBTRACT statement, the corresponding numeric \nelementary items of the group referred to by\n identifier\n-\n1 are subtracted from and are stored in \nthe corresponding numeric elementary items of the group referred to by identifier\n-\n2.\n \n9.3\n \nGENERAL RULES CONCERNING CORRESPONDING OPTION\n \nThe following rules should be observed when the CORRESPONDING option \nis used.\n \n(i)\n \nIdentifier\n-\n1 and identifier\n-\n2 in all cases must refer to group items i.e., these \nidentifiers must not be data items with level numbers 66, 77 or 88. \n \n(ii)\n \nData items in identifier\n-\n1 and identifier\n-\n2 take part in the specified operation \n(MOVE, ADD or  S\nUBTRACT) only when they have the same data name and \nsame qualifiers up to but not including identifier\n-\n1 and identifier\n-\n2.\n \n(iii)\n \nIn the case of ADD or SUBTRACT CORRESPONDING only numeric data \nitems are considered for addition or subtraction respectively.  This m\neans that \ndata items other than numeric are not considered  for the arithmetic operations \neven though they may have identical names in the two groups named in \nidentifier\n-\n1 and identifier\n-\n2.\n \n(iv)\n \nAll data items subordinate to identifier\n-\n1 and identifier\n-\n2 with l\nevel numbers 66 \nor 88 or containing a REDEFINES or OCCURS clause, are ignored for the \npurpose of the operation.  Identifier\n-\n1 and identifier\n-\n2 may, however, have a \nREDEFINES or OCCURS clause or may be subordinate to data items having a \nREDEFINES or OCCURS \nclause.\n \n(v)\n \nFILLER data items are ignored.\n \n(vi)\n \nCORRESPONDING items can have different locations within the group and \nthe field sizes can also be different.\n \nExamples\n \n \nLet us consider the following DATA DIVISION entries.\n \n01\n \nOLD\n-\nREC.\n \n02              FIRST\n-\nPART.\n \n        \n                              03            ITEM\n-\n1            PIC                999.\n \n                                      03            ITEM\n-\n2            PIC                999.\n \n                                      03            ITEM\n-\n3            PIC   \n             9[5].\n \n \n                   02              SECOND\n-\nPART.\n \n                                     03            SEC\n-\n1              PIC                9[4].\n \n                                     03            SEC\n-\n2.\n \n                                   \n                  04    SEC\n-\n21    PIC                X[5].\n \n \n                   02              THIRD\n-\nPART.\n \n                                                 03            THIRD\n-\n1        PIC                XXX.\n \n                                               \n  03            THIRD\n-\n2        PIC                999.\n \n \n            01              NEW\n-\nREC.\n \n                              02               FIRST\n-\nPART.\n \n                                                 03             ITEM\n-\n1          PIC               9999.\n \n                                                 03             ITEM\n-\n2          PIC               9[3].\n \n                                                 03             ITEM\n-\n3          PIC               X[5].\n \n                                                \n 03             ITEM\n-\n4          PIC               X[21].\n This watermark does not appear in the registered version - http://www.clicktoconvert.com\n \n47\n \n \n                              02               SECOND\n-\nPART.   \n \n                                                 03             SEC\n-\n1            PIC                X[4].\n \n                             \n                    03             SEC\n-\n21          PIC                X[5].\n \n \n                              02               FOURTH\n-\nPART.\n \n                                                 03             THIRD\n-\n1       PIC                XXX.\n \n                 \n                                03             THIRD\n-\n2       PIC                999.\n \nNow, let us see which data items will be moved if the PROCEDURE DIVISION \ncontains the statement MOVE CORRESPONDING OLD\n-\nREC TO NEW\n-\nREC.  The said \ndata items are ITEM\n-\n1, ITE\nM\n-\n2, ITEM\n-\n3 and SEC\n-\n1.  Note that SEC\n-\n21, THIRD\n-\n1 and \nTHIRD\n-\n2 cannot take part in the operation.  This is because although those names are \ncommon to both the groups, their qualifiers are different.  If, on the other hand, the \nPROCEDURE DIVISION statement i\ns ADD CORRESPONDING OLD\n-\nREC TO NEW\n-\nREC, only ITEM\n-\n1 and ITEM\n-\n2 will take part in the add operation.  This is because ITEM\n-\n3 \nand SEC\n-\n1 in NEW\n-\nREC are not numeric data items.\n \n9.4\n \nROUNDED OPTION\n \nLet us consider the following DATA DIVISION entries.\n \n        \n \n77\n            A             PIC              99V999                VALUE               IS             23.412.\n \n        \n \n77            B             PIC              99V999                VALUE               IS             35.273. \n \n        \n \n77            C    \n         PIC              99V9                    VALUE               IS             41.5.\n \nNow, after the execution of the statement  ADD  A  B  GIVING  C,    C  will contain \n58.6  instead of 58.685  as  C can retain only one digit after the decimal point.\n Instead of this \nusual truncation, rounding can be specified through the ROUNDED option.  The ROUNDED \noption can be specified as follows:\n \n             ADD        A             B            GIVING              C                ROUNDED\n \nNow, the content of  C\n will be 58.7 instead of 58.6.\n \nIt may be noted from the above example that whenever as arithmetic operation is \nexecuted, if the number of places in the fractional part of the result happens to be greater than \nthe number of placed provided for the fractiona\nl part in the receiving field, truncation will \noccur.  However, if the ROUNDED  option is specified, 1 is added to the last digit whenever \nthe most significant digit being thrown out is greater than or equal to 5.  In the example \nshown here the most signif\nicant digit of the excess is 8 which is greater than 5.  Therefore, 1 \nhas been added to 6 which is the last digit of the receiving field.  On the other hand, if A and \nB contains 23.412 and 35.213 respectively, both the statements\n \n                     ADD  \n      A             B            GIVING              C\n \nand\n \n                     ADD        A             B            GIVING              C                ROUNDED\n \n \nwill give the same result and in both the cases C will have the value 58.6.\n \nThe ROUNDED opti\non can be specified in the case of any arithmetic verb by writing the \nword ROUNDED after the identifier, denoting the field that receives the result of the This watermark does not appear in the registered version - http://www.clicktoconvert.com\n \n48\n \noperation.  The ROUNDED phrases cannot be specified for the identifier that receives the \nremainder i\nn the DIVIDE operation.\n \n9.5\n ON SIZE ERROR OPTION\n \nIf after an arithmetic, the result exceeds the largest value that can be accommodated in \nthe result, the error is called a \nsize error.\n  To take an example, let A and B be two elementary \nitems with pictures 9\n9 and 999 respectively.  Suppose also that the current values of the two \nfields are 35 and 980 respectively.  Now, the execution of the statement ADD A To B causes \na size error.  This is because the result field B is not large enough to hold the result of \nthe \naddition, namely, 1015.\n \nWhen a size error occurs, the contents of the result field after the operation is \nunpredictable.  However, the processing is not terminated and the computer will proceed with \nthe execution of the next statement regardless of the\n fact that a size error occurred.  \nTherefore, it is the responsibility of the programmer to monitor the arithmetic operation by \nspecifying the ON SIZE ERROR phrase at the end of the arithmetic statement. It  has the \nfollowing syntax:\n \n                      \n          ;       ON  \nSIZE\n  \nERROR\n   imperative  \n-\n  statement\n \nW\nhen this phrase is specified the imperative statement gets executed, if an ON SIZE \nERROR occurs.  Thus a statement\n \n                     ADD  A  TO  B   ON  SIZE   ERROR    GO   TO   ERROR\n-\nPARA.\n \nwill cause the control to be transferred to  ERROR\n-\nPARA in the case of a size error.  \nOtherwise, the effect will be the same as that of ADD A TO B.  When the ON SIZE ERROR \nphrase is specified, the arithmetic statement must be terminated by a period.\n \nThe ON\n SIZE ERROR phrase enables a programmer to take measures in case a size\n-\nerror condition arises.  However, specifying the ON SIZE ERROR phrase with each and \nevery arithmetic operation can increase the execution time of the program.  Thus when the \nprogrammer\n is sure that there is no possibility of a size error, the phrase may not be specified. \nIn this connection it is recommended that the programmer should give the result fields \nenough room so that size error does not occur.\n \nIt may be worthwhile to note the d\nifferences between the ROUNDED and SIZE ERROR \noptions.  The ROUNDED option is concerned with the case when a loss of digits occurs at \nthe right end.  This loss merely makes the result approximate, but the result is not altogether \nwrong.  The ROUNDED option\n only affects the nature of approximation.  If specified, the \nresult is approximately by rounding.  Otherwise, it is approximated be truncation.  On the \nother hand,  SIZE ERROR is concerned with the case when a loss of digits occurs in the most \nsignificant\n part (left end).  The result in such a case is totally wrong.\n \n9.6\n \nLET US SUM UP\n \nIn the present lesson the learner is exposed to the corresponding options \nwith\n MOVE/ \nADD/SUBTRACT\n.\n \nP\noints about the rounded option and size error option are also discussed.  \n This watermark does not appear in the registered version - http://www.clicktoconvert.com\n \n49\n \n9.7\n LESSON\n-\nEND ACTIVITIES\n \nTry to find the answers for the following exercises on your own.\n \n1.\n \nExplain with syntax MOVE Corresponding\n \n2.\n \nExplain with syntax ADD  Corresponding\n \n3.\n \nExplain with syntax SUBTRACT Corresponding\n \n4.\n \nExplain with syntax ROUNDED option\n \n5.\n \nExplain \nwith syntax ON SIZE ERROR option\n \n9.\n8\n POINTS FOR DISCUSSION\n \n1) Explain the usage MOVE CORRESPONDING verb with example.\n \n2) Explain the usage of CORRESPONDING option with ADD and SUBTRACT verbs.\n \n3) List out the rules for using CORRESPONDING option.\n \n9.9 \nREFERE\nNCES\n \n1.\n \nCOBOL Programming , M.K.Roy  & Ghos\nh Dastidar , Tata McGraw Hill,  \n2\nnd\n \n  \n \n       \nEdition,1998\n \n2.\n \nCOBOL Programming , V. RAJARAMAN, PHI Pub\n \n3.\n \nIntroduction to COBOL programming \n–\n Dr. R.Krishnamoorthy, JJ Publ\n \n4.\n \nStructured COBOL , Welburn, TataMcGraw Hill , 4\nth\n Edition.\n This watermark does not appear in the registered version - http://www.clicktoconvert.com\n \n50\n \n \nLESSON\n \n–\n \n10\n: \nPROGRAMS USING ARITHMETIC VERBS\n \n \nCONTENTS\n \n10\n.0\n \nAims and objectives\n \n10\n.1\n \nProgram for ADD verb\n \n10\n.2\n \nProgram for SUBTRACT verb\n \n10\n.3\n \nProgram for MULTIPLY verb\n \n10\n.4 \n \nProgram for DIVIDE verb\n \n10\n.5 \n \nProgram for SIZE ERROR \n \n10\n.6 \n \nProgram fo\nr COMPUTE  verb\n \n10\n.7 \n \nLet us Sum Up\n \n10\n.8 \n \nLesson\n-\nend Activities\n \n10.9\n \nPoints for Discussion\n \n10.\n10\n \nReferences\n \n10\n.0 AIMS AND OBJECTIVES\n \nHaving learnt the arithmetic verbs with their syntaxes and examples, the learner will \nnow be exposed to simple programs to \ndemonstrate the arithmetic verbs. \n \n \n10.1\n PROGRAM FOR ADD VERB\n \nWrite a simple program to demonstrate ADD verb. Use edit characters also in the \nprogram.\n \nIdentification division.\n \nProgram\n-\nid. Addverb.\n \nEnvironment division.\n \nData division.\n \nWorking\n-\nstorage sectio\nn.\n \n \n77\n a  pic    s9(3)v9(2) value 0.\n \n77\n b  pic     s9(3)v9(2) value 0.\n \n77\n c  pic     s9(4)v9(2) value 0.\n \n77\n e\n-\nc pic   +z(4).z(2).\n \nProcedure division.\n \nPara\n-\n1.\n \n \n \nIdentification division\n \n \n \nprogram\n-\nid. Add verb.\n \n \n \nenvironment division\n \n \n \ndata division\n \n \n \nworking\n \n–\n storage section.\n \n \n \n \n77\n \nA\n \nPIC\n \nS9(3)   V9(2)\n \n \n \n \n77\n \nB\n \nPIC\n \nS9(3)\n \nV9(2)\n \n \n \n \n77\n \nC\n \nPIC\n \nS9(4)\n \nV9(2)\n \n \n \n \n77\n \ne\n-\na\n \nPIC\n \n+z(4)  Value 0\n \n \n \nPROCEDURE DIVISION\n This watermark does not appear in the registered version - http://www.clicktoconvert.com\n \n51\n \n \n \nPARA \n-\n 1\n \nExplanation :   This program gets 2 inputs from user.\n \n                         It adds them using ADD\n verb. \n \n           \n \n \n \nc\n=a+b\n \n                         The unedited result is available in c.\n \n                         We move c to e\n-\nc, where edit characters are available.\n \n                         Note that the variable e\n-\nc makes use of the + edit characte\nr.\n \n \n \n \n Result is displayed with e\n-\nc.\n \n10.2\n PROGRAM FOR SUBTRACT VERB\n \nWrite a simple program to demonstrate  SUBTRACT verb. Use edit characters also in \nthe program.\n \nIdentification division.\n \nPr\nogram\n-\nid. Subverb.\n \nEnvironment division.\n \nData division.\n \nWorking\n-\nst\norage section.\n \n77\n \na  pic   s9(3)v9(2) value 0.\n \n77\n \n b  pic    s9(3)v9(2) value 0.\n \n77\n \n e\n-\nb pic  +z(3).z(2).\n \nProcedure division.\n \nPara\n-\n1.\n \n \nDisplay(1 1) erase.\n \n \n \nDisplay(3 5) “Enter first number :”.\n \n \nAccept a.\n \n \nDisplay(5 5) “Enter second number :”.\n \n \nAccept b.\n \n \n           Subtract a  from b.\n \n     \n \nMove b to e\n-\nb.\n \n        \n \nDisplay(15 5) “b\n-\na = “ e\n-\nb.\n \n \nStop run.\n \n \nExplanation :   This program gets 2 inputs from user.\n \n                         It subtracts them using SUBTRACT verb. \n \n \n             b\n-\na is calculated and \nstored in b.\n \n              \n \n After execution : OLD value of a is same\n \n                                                      OLD value of b is lost and\n \n                      \n \n \n \n      b\n-\na is stored in b.\n \n                         The unedited result is availa\nble in b.\n \n                         We move b to e\n-\nb, where edit characters are available.\n \n                         Note that the variable e\n-\nb makes use of the + edit character.\n \n \n \n \n Result is displayed with e\n-\nb.\n \n10.3\n  \nPROGRAM FOR MULTIPLY VERB\n \nW\nrite a simpl\ne program to demonstrate MULTIPLY verb. Use edit characters also in the \nprogram.\n \nIdentification division.\n \nProg\nram\n-\nid. Mulverb.\n \nEnvironment division.\n This watermark does not appear in the registered version - http://www.clicktoconvert.com\n \n52\n \nData division.\n \nWorking\n-\nstorage section.\n \n77\n \na  pic  s9(3)v9(2) value 0.\n \n77\n \n b  pic   s9(3)v9(2) value 0.\n \n77\n \n c pic    s9(4)v9(2) value 0.\n \n77\n \n e\n-\nc pic  \n-\nz(4).z(2).\n \nProcedure division.\n \nPara\n-\n1.\n \n \nDisplay(1 1) erase.\n \n \n \nDisplay(3 5) “Enter first number :”.\n \n \nAccept a.\n \n \nDisplay(5 5) “Enter second number :”.\n \n \nAccept b.\n \n            Multiply a by b giving  c.\n \n     \n \nMove c \nto e\n-\nc.\n \n        \n \nDisplay(15 5) “Product = “ e\n-\nc.\n \n \nStop run.\n \n \nExplanation :   This program gets 2 inputs from user.\n \n                         It multiplies  them using MULTIPLY verb. \n \n                         a*b is found and stored in c.\n \n                   \n      The unedited result is available in c.\n \n                         We move c to e\n-\nc, where edit characters are available.\n \n                         Note that the variable e\n-\nc makes use of the \n-\n edit character.\n \n \n \n \n Result is displayed with e\n-\nc.\n \n10.4\n PROGR\nAM FOR DIVIDE VERB\n \nWrite a simple program to demonstrate DIVIDE verb. Use edit characters also in the \nprogram.\n \nIdentification division.\n \nProgra\nm\n-\nid. Divverb.\n \nEnvironment division.\n \nData division.\n \nWorking\n-\nstorage section.\n \n77\n \na  pic    s9(3)v9(2) value 0.\n \n77\n \n \nb  pic     s9(3)v9(2) value 0.\n \n77\n \n \n \nc pic      s9(4)v9(2) value 0.\n \n77\n \n e\n-\nc pic   \n-\nz(4).z(2).\n \nProcedure division.\n \nPara\n-\n1.\n \n \nDisplay(1 1) erase.\n \n \n \nDisplay(3 5) “Enter first number :”.\n \n \nAccept a.\n \n \nDisplay(5 5) “Enter second number :”.\n \n \nAccept b.\n \n            Di\nvide a by b giving c.\n \n     \n \nMove c to e\n-\nc.\n \n        \n \nDisplay(15 5) “Answer = “ e\n-\nc.\n \n \nStop run.\n \n This watermark does not appear in the registered version - http://www.clicktoconvert.com\n \n53\n \nExplanation :   This program gets 2 inputs from user.\n \n                         It divides them using DIVIDE verb. \n \n \n \n a/b is calculated and stored in c.\n \n        \n                 The unedited result is available in c.\n \n                         We move c to e\n-\nc, where edit characters are available.\n \n                         Note that the variable e\n-\nc makes use of the \n-\n edit character.\n \n \n \n \n Result is displayed with e\n-\nc.\n \n10.5\n PROGRAM FOR SIZE ERROR \n \nWrite a simple program to demonstrate on size error option.\n \nIdentification division.\n \nProgram\n-\nid. sizeerr.\n \nEnvironment division.\n \nData division.\n \nWorking\n-\nstorage section.\n \n77\n \na     pic    s9(3) value 0.\n \n77\n \n \nb      pic    s9(3) val\nue 0.\n \n7   \n c      pic    s9(3) value 0.\n \n77 \n e\n-\nc   pic   +z(3).\n \nProcedure division.\n \nPara\n-\n1.\n \n \nDisplay(1 1) erase.\n \n \n \nDisplay(3 5) “Enter first number :”.\n \n \nAccept a.\n \n \nDisplay(5 5) “Enter second number :”.\n \n \nAccept b.\n \n            Add a b to c on size error \n \n    \n                  display (10 5) “Size error on c \n---\nPlease increase size”\n \n                       go to end\n-\npara.\n \n     \n \nMove c to e\n-\nc.\n \n        \n \nDisplay(15 5) “Sum = “ e\n-\nc.\n \nEnd\n-\npara.\n \n \nStop run.\n \nExplanation :   This program gets 2 inputs from user.\n \n         \n                It adds them using ADD verb. \n \n                         The unedited result is available in c.\n \n                         We move c to e\n-\nc, where edit characters are available.\n \n                         Note that the variable e\n-\nc makes use of t\nhe + edit character.\n \n \n \n \n Result is displayed with e\n-\nc.\n \n \n       Note : If the user gives\n \n                       a=955 and b=288 then c will become 1243 \n \n                      and   the size error will be present on c, \n \n                              as c can\n store at the maximum 3 digits.\n \n                     To clear out this problem the size of c can be declared like this.\n \n   \n \n          01 c pic 9(4) value 0.\n \n                      01 e\n-\nc pic +z(4).\n \n10.6\n PROGRAM FOR COMPUTE VERB\n \nWrite a simple program to dem\nonstrate COMPUTE verb. \n This watermark does not appear in the registered version - http://www.clicktoconvert.com\n \n54\n \nIdentification division.\n \nProgram\n-\nid. compverb.\n \nEnvironment division.\n \nData division.\n \nWorking\n-\nstorage section.\n \n77\n \na  pic s9(3)v9(2) value 0.\n \n77\n \nb  pic s9(3)v9(2) value 0.\n \n77\n \nc \n \npic s9(4)v9(2) value 0.\n \n7\n \ne\n-\nc pic  +z(4).z(2).\n \nProcedure \ndivision.\n \nPara\n-\n1.\n \n \nDisplay(1 1) erase.\n \n \n \nDisplay(3 5) “Enter first number :”.\n \n \nAccept a.\n \n \nDisplay(5 5) “Enter second number :”.\n \n \nAccept b.\n \n            Compute c= a+b.\n \n     \n \nMove c to e\n-\nc.\n \n        \n \nDisplay(15 5) “Answer = “ e\n-\nc.\n \n \nStop run.\n \n10.7\n LET US SUM U\nP\n \nWith the help of the above programs one can understand the working nature of \narithmetic verbs like Add, Subtract, Multiply, Divide and Compute. Also one can acquire \nknowledge about size error options.\n \n10\n.8  \n \nLESSON\n-\nEND ACTIVITIES\n \nTry to find the answers \nfor the following exercises on your own.\n \n1.\n \nWrite a Program to add 4 values using ADD verb.\n \n2.\n \nWrite a Program to subtract the  4\nth\n value from the first 3 values using SUBTRACT \nverb.\n \n3.\n \nWrite a Program to multiply 5 values and store the result in 6\nth\n variable..\n \n4.\n \nWri\nte a Program to convert the temperature given in \nC\nentigrade to Fahrenheit using \nCOMPUTE verb. \n( Hint : F= 1.8C+32)\n \n10.9 POINTS FOR DISCUSSION\n \n1) Write a simple COBOL program to illustrate ADD verb.\n \n2) Write a simple program in COBOL  to illustrate SUBTRACT\n verb.\n \n3) Write a simple program in COBOL to illustrate ON\n-\nSIZE error option.\n \n10.10 \nREFERENCES\n \n1.\n \nCOBOL Programming , M.K.Roy  & Ghosh Dastidar , Tata McGraw Hill, \n \n       \n2\nnd\n Edition,1998\n \n2.\n \nCOBOL Programming , V. RAJARAMAN, PHI Pub\n \n3.\n \nIntroduction to COBOL progra\nmming \n–\n Dr. R.Krishnamoorthy, JJ Publ\n \n4.\n \nStructured COBOL , Welburn, TataMcGraw Hill , 4\nth\n Edition.\n \n \n This watermark does not appear in the registered version - http://www.clicktoconvert.com\n \n55\n \n \nUNIT\n \n–\n \nIII\n \nLESSON \n–\n 1\n1\n: \nCONDITIONS\n \nCONTENTS\n \n1\n1.0\n \nAim\ns\n and objectives\n \n1\n1.1\n \nC\nondition\n \n1\n1.2\n \nRelational condition\n \n \n1\n1.3\n \nSign Condition\n \n1\n1.4\n \nClass Condition\n \n1\n1.\n5\n \nCondition\n-\nname Condition\n \n1\n1.6\n \nNegated Simple Condition\n \n1\n1.7\n \nCompound Condition\n \n1\n1.8     Let us Sum Up\n \n1\n1.9     Lesson\n-\nend Activities\n \n11.10\n \nPoints for Discussion\n \n11.1\n1\n \nReferences\n \n11.0\n  \nAIMS AND OBJECTIVES\n \nThe main aim of this lesson is to introduce what i\ns meant by condition and the different \ntypes of them. This will facilitate the learner to use whenever the need arise to include them \nin programs.\n \n1\n1.1\n \nCONDITION\n \nA condition is an entity that at one point of time can have only one of the two values \n–\n \ntrue \nor false. As already pointed out, the IF verb makes use of conditions. In COBOL a \ncondition can be any one of the following:\n \n \n(i)   \n \nRelational condition\n \n \n(ii)  \n \nSign condition\n \n \n(iii) \n \nClass condition\n \n \n(iv) \n \nCondition\n-\nname condition\n \n(v)  \n \nNegated simple co\nndition and \n \n(vi) \n \nCompound condition.\n \n1\n1.2 RELATIONAL CONDITION\n \nW\ne know that a relational condition indicates a comparison between two operands and \nhas the form.\n \n \n \nOperand\n-\n1    relational\n-\noperator   operand\n-\n2\n \nwhere the relational\n-\noperator can be any one o\nf the following:\n \n \n \n \nIS    [\nNOT\n]     \nGREATER\n     THAN\n \n \n \nIS    [\nNOT\n]     \n         >        \n    THAN\n This watermark does not appear in the registered version - http://www.clicktoconvert.com\n \n56\n \n \n \nIS    [\nNOT\n]     \nLESS          \n    THAN\n \n \n \nIS    [\nNOT] \n     \n        <        \n    THAN\n \n \n \nIS    [\nNOT\n]     \nEQUAL      \n    TO\n \n \n \nIS    [\nNOT]\n      \n        =        \n      \n \nIt was stated earlier that the operands can be an identifier or a literal. However, either \noperand can also be an arithmetic expression but must contain at least one reference to an \nidentifier. Sometimes, operand\n-\n1 and operand\n-\n2 are respectively ref\nerred to as the \nsubject\n and \nobject\n of the relational condition.\n \nComparison of Numeric Operands\n \nWe are familiar with the kind of relational condition where both the operands are \nnumeric. The comparison in this case is algebraic and the two operands can be c\nompared \nregardless of the size and USAGE of the fields.\n \nComparison of N\nonn\numeric Operands\n \nA nonnumeric operand (identifier/literal other than numeric) can be compared to another \nnonnumeric operand according to the following rules.\n \n(i) \nFields of Equal Sizes\n \nCharacters in the corresponding positions are compared to determine the value of the \nrelational condition. Comparison starts with the leftmost character in both the fields and \nproceeds in a left to right manner. If the two characters being compared are fo\nund to be \nunequal at any stage, the field containing the greater (according to the collating sequence of \nthe computer (NATIVE) or that specified by the PROGRAM COLLATING SEQURNCE \nclause in the OBJECT\n-\nCOMPUTER paragraph) characters is considered to be great\ner. Only \nwhen the characters are found to be identical does the comparison proceed to the next \nposition on the right. Two fields are taken to be equal only when all such pairs of characters \nhave been found to be identical and the rightmost end has been rea\nched.\n \n(ii) \nFields of Unequal Sizes\n \n \nIf the two operands are not of equal size, the shorter field is considered to be extended \non the right by spaces to make its size equal to the longer field and the rules for comparing \nfields of equal sizes are used.\n \nComp\narison of a Numeric Operand with a Nonnumeric Operand\n \nA numeric operand can be compared to a nonnumeric operand subject to the following \nrestrictions.\n \n \n(i)   The numeric operand must be an integer data item or integer literal.\n \n \n(ii)   Both the operands mus\nt have the same USAGE (DISPLAY or some \n \n \n        form of DISPLAY).\n \nAt the time of comparison, the numeric operand is treated as if its value were moved to \nan alphanumeric item were then compared to the nonnumeric field.\n \nGroup Item as an Operand in Relation\nal Condition\n \nWhen an operand of a relational condition is a group item, the said item is considered to \nbe an alphanumeric field. \n \nThe following examples illustrate the results of different comparisons. Usage DISPLAY \nis assumed in all cases.\n This watermark does not appear in the registered version - http://www.clicktoconvert.com\n \n57\n \n______________\n__________________________________________________\n \n \n            A (Operand\n-\n1)\n \n \n              B (Operand\n-\n2)\n \n__________________________________________________  Result of               \n \n \n    Picture\n \n        Value\n \n        Picture\n \n       Value            \n  Comparison\n \n \n \n \n                                                                                                     \n \n \n \n    X(3)\n \n \n \n001\n \n \nX(4)\n \n \n0001\n \n \nA>B\n \n \n   X(4)\n \n \n \n3254\n \n \nX(3)\n \n \n325\n \n \nA>B\n \n \n   X(3)\n \n \n \nBOY\n \n \nX(4)\n \n \nGIRL\n \n \nA<B\n \n \n   X(3)\n \n \n \nBOY\n \n \nX(4)\n \n \nBIRD\n \n \nA>B\n \n \n  X(3)\n \n \n \nBOY\n \n \nX(4)\n \n \nBOYb\n \n \nA=B\n \n \n  9(3)\n \n \n \n354\n \n \nX(2)\n \n \n46\n \n \nA<B\n \n \n  S9 (2)     \n \n \n-\n46\n \n \nX(2)\n \n \n46\n \n \nA=B\n \nLEADING\n \nSEPARATE\n \n \n  9(3)\n \n \n \n354\n \n \n9(2)\n \n \n46\n \n \nA>B\n \n \n \n1\n1\n.3 SIGN CONDITION\n \nThe sign condition determines whether or not the algebraic value of an operand is \npositive, negativ\ne or zero. The operand can be either a numeric identifier or an arithmetic \nexpression. The format of this condition is as follows:\n \n \n \n \n  \n \n                          identifier                                              \nPOSITIVE\n \n \n \n                        \n                IS [\nNOT\n]     \nNEGATIVE\n \n                                     arithmetic\n-\nexpression                         \nZERO\n \n \n \n \n \n \n \n \n \nWhen arithmetic expression is used, it must contain at least one identifier. The \nPOSITIVE option determines the value of t\nhe condition to be true only if the value of the \noperand strictly positive. This means that the value zero is not treated as positive. \n \nThe following examples illustrate the use of the sign condition.\n \nExample 1\n \n \n \n77\n \nBALANCE\n \nPIC\n \nS9 (6) V99.\n \n \n     .\n \n \n \n \n     \n.\n \n \n \nIF\n \nBALANCE   IS \n \nZERO GO TO NIL\n-\nBALANCE.\n \nIt may be noted that the above IF statement is equivalent to the following statement that \nmakes use of a relational condition.\n \n \n \nIF\n \nBALANCE\n \n=\n \n0\n \nGO TO NIL\n-\nBALANCE.\n \n \n This watermark does not appear in the registered version - http://www.clicktoconvert.com\n \n58\n \nExample 2\n \n \n \n02\n \nDEPOSIT \n \nPIC\n \n9(4) V99.\n \n \n \n02\n \nWITHD\nRAWAL\n \nPIC\n \n9(4) V99.\n \n \n \n \n.\n \n \n \n \n.\n \n \n \n \n.\n \nIF\n \nDEPOSIT \n-\nWITHDRAWAL  IS  POSITIVE  GO TO \nCALCULATION.\n \n \nThe control is transferred to the paragraph named CALCULATION if the current value \nof DEPOSIT is greater than that of WITHDRAWAL.\n \nIn general, any sign condition ca\nn be replaced by an equivalent relational condition. The \nuse of the sign condition may perhaps be convenient in certain cases and its use may also \nincrease the readability of the statement that uses it.\n \n1\n1\n.4 CLASS CONDITION\n \nThe class condition determines w\nhether or not the value of an operand is numeric or \nalphabetic. An operand is numeric if it contains only the digits 0 to 9 with or without an \noperational sign. An operand is alphabetic if it contains only the letters A to Z and space. The \nformat of the cl\nass condition is as follows:\n \n \n \n \nIdentifier\n \nIS\n \n[\nNOT\n]\n \n \nNUMERIC\n \n \n \n \n \n \n \n \n  \n \n \n \n \n \n \n \n \n  \nALPHABETIC\n \nThe following rules apply in the case of a class condition.\n \n(i)\n \nThe usage of the identifier must be DISPLAY or some forms of   \n \nDISPLAY.\n \n(ii)   \n \nFor the NUMERIC option \nthe identifier must be either numeric or \nalphanumeric. If the data item is defined with an operational sign (picture \ncontains S or a SIGN clause has been specified), then the appearance of sign \n(zoned in the units position or a leading  or trailing sign, a\ns the case may be) is \nconsidered to be normal.\n \n(iii)  \n \nFor the alphabetic option, the identifier must be either alphabetic or     \n \nalphanumeric.\n \n(iv)   \n \nThe identifier may be a group item. However, for the NUMERIC option, the   \n \ngroup item must not contain\n elementary items described with an operational \nsign.\n \nThe class condition is very useful for the validation of the input data. In COBOL, the \ndata is read into the record area in the same form as recorded on the external medium \nregardless of the specified c\nlass of the individual fields in the record. For example, if we are \nreading the value of a numeric field from a card and the corresponding position in the card \ncontains non\n-\nnumeric characters, the system will not detect it to be an error. Instead, the \nnonn\numeric characters will be stored in the character positions of the numeric field. This \nerror may even pass unnoticed because during any subsequent numeric operation (such as \nnumeric MOVE or arithmetic operation), only the numeric part of the characters in \nthe field \n(except for the position that may indicate the operational sign) will be used. Thus the possible \n This watermark does not appear in the registered version - http://www.clicktoconvert.com\n \n59\n \npunching mistake in the data card can go and detected unless proper care is taken. One may \navoid some of these blunders (though not all) through the \nuse of class condition.\n \nLet BASIC\n-\nPAY be a data name in a card record defined with picture\n \n9(5) V99. Having read the card we can test the value of BASIC\n-\nPAY to ensure that the data \non the card is actually numeric. This can be done as follows\n \n \nIF BASIC\n-\nPAY \nIS NOT NUMERIC GO TO PARA\n-\nERROR.\n \nIf the data contains any character other than digits, control will be transferred to PARA\n-\nERROR. Otherwise, control will go to the next sentence in sequence. It may be noted that the \ndata must be punched with leading zeros,\n if any, and not with leading spaces. The space \ncharacter is considered to be an alphabetic character.\n \n1\n1\n.5 CONDITIONS\n-\nNAME CONDITION\n \nA condition name is an entity which itself is a condition and as such can have either a \ntrue or false value. However, a co\nndition name cannot be defined independently. It must \nalways be associated to a data name called the \nconditional variable\n. The condition name may \nbe defined in any section of the DATA DIVISION and must be placed immediately after the \nentry that defines the\n conditional variable. There can be more than one condition names \nassociated to a conditional variable. In that case all the condition name entries must follow \nthe entry defining the conditional variable.\n \nA condition name entry specifies either a single va\nlue or a set of values and/or a range of \nvalues for the conditional variable. The condition name becomes true whenever the \nconditional variable assumes any of these values. Otherwise, the condition name is set to \nfalse. It must be noted that it is not poss\nible to set the value of a condition name explicitly. \nThe value of a condition name is always set implicitly depending on the current value of the \nconditional variable. The format of the condition name entry is given below.\n \n \n                            \n                   \nVALUE\n \nIS                             \nTHRU\n \n      88\n \ncondition\n-\nname                                               Literal\n-\n1                             literal\n-\n2\n \n \n \n \n \n           \nVALUES\n \nARE\n \n \n        \nTHROUGH\n \n \n \n                    THRU\n \n    \n       , literal\n-\n3                                      literal\n-\n4     …\n \n \n \n        THROUGH\n \n \n \n \nThe following rules apply for a condition name.\n \n(i) \n \nCondition names must be described at level 88. The level number begins in \nmargin A or any position after it. T\nhe condition name must begin from margin \nB or any position after it. There must be at least one space between the level \nnumber and condition name.\n \n(ii) \n \nThe normal rules for naming a data item also apply in the case of a condition \nname.\n \n(iii) \n \nIf the same \ncondition name is used in more than one place, the condition name \nmust be qualified by the name of its conditional variable.\n \n(iv) \n \nThe name of the conditional variable can be used as a qualifier for any of its \ncondition names. If the reference to a conditi\nonal variable requires \n \n \n \n \n \n This watermark does not appear in the registered version - http://www.clicktoconvert.com\n \n60\n \nqualification or subscripting, the same combination of qualification or \nsubscripting must also be used for the associated condition name.\n \n(v) \n \nThe values specified through the VALUE clause in the condition name entry \nmust not conflic\nt with the data description of the conditional variable. A literal \nin the VALUE clause can either a numeric literal, non numeric literal or \nfigurative constant.\n \n(vi) \n \nWhen the THRU/THROUGH phrase is used, literal \n–\n 1 must be less than \nliteral \n–\n 2 and liter\nal \n–\n 3 must be less than literal\n-\n 4.\n \n(vii) \n \nA conditional variable can be an elementary item or a group item. However, it \ncannot be another condition name, or a 66\n-\nlevel item (RENAMES clause) or a \ngroup containing the JUSTIFY clause, or the SYNCHRONIZED cl\nause or the \nUSAGE clause other than DISPLAY.\n \nThe following is an example of the use of condition names\n \n \n \n77\n \nMARITAL\n-\nSTATUS\n \n \n \nPIC\n \n \n9\n \n \n \n88\n \nSINGLE\n \n \nVALUE\n \n  IS \n \n \nZERO\n \n \n \n88\n \nMARRIED\n \n \nVALUE\n \n  IS\n \n \n1.\n \n \n \n88\n \nWIDOWED\n \n \nVALUE\n \n  IS\n \n \n2.\n \n \n \n88\n \nDIVORCED\n \n \nVALUE\n \n  IS\n \n \n3.\n \n \n \n88\n \nONCE\n-\nMARRIED\n \nVALUE\n \nARE\n \n \n1, 2, 3.\n \n \n \n88\n \nVALID\n-\nSTATUS\n \nVALUE\n \nARE\n \n \n0 THRU 3.\n \n \n \nIt may be noted that six condition names have been defined here. All of them are \nassociated with the conditional variable MARITAL \n–\n STATUS. If at a point of time, \nMARITAL STATUS gets\n the value of 2, then the condition names WIDOWED, ONCE\n-\nMARRIED and VALID\n-\nSTATUS will become true and others will become false.\n \nThe condition names can be used as conditions. Thus in PROCEDURE DIVISION we \nmay have statements, such as:\n \n(a)\n \nIF SINGLE SUBTRAC\nT 125 FROM DEDUCTIONS.\n \n(b)\n \nIF ONCE \n-\n MARRIED ADD 32 TO SPECIAL\n-\nPAY.\n \n(c)\n \nIF NOT VALID \n–\n STATUS GO TO ERROR \n–\n IN \n–\n STATUS.\n \nIn (a) above the statement SUBTRACT 125 FROM DEDUCTIONS will be executed if \nMARITAL\n-\nSTATUS is equal to zero. Similarly, in (b) the ADD \nstatement will be executed \nonly when MARITAL \n–\n STATUS is equal to 1, 2 or 3 and in  (c) the control goes to the \nprocedure ERROR\n-\nIN \n–\n STATUS only when MARITAL\n-\nSTATUS has a value other than the \n0, 1, 2 or 3 . As in (c) a condition name can be preceded by NOT\n to indicate the negation of \nthe condition. \n \nThe format for a condition \n–\n name condition is\n \n \n[NOT]\n \ncondition \n–\n name\n \nIt is important to note the usefulness of a condition name. When a condition name \nspecifies a single value for the conditional variable, the\n condition name is equivalent to a \nrelational condition. For example, in (a) above the condition name SINGLE is equivalent to \nthe relational condition MARITAL\n-\nSTATUS =0. Even when the condition name specifies \nmore than one value for the conditional variabl\ne, the condition name can be replaced by an \nequivalent compound condition. Thus it may not be absolutely necessary to make use of the \ncondition names. Thus it may not be absolutely necessary to make use of the condition This watermark does not appear in the registered version - http://www.clicktoconvert.com\n \n61\n \nnames. The main advantage of a condi\ntion name is that it increases the readability of the \nstatement that uses it. Certainly, the use of the condition name WIDOWED conveys more \ninformation to a reader of the program than the use of the relational condition MARITAL\n-\nSTATUS =2. Precisely for thi\ns reason, it is recommended that whenever possible, meaningful \ncondition names should be used in a program.\n \n1\n1.6 NEGATED SIMPLE CONDITION\n \nAny of the simple condition described above can be preceded by the logical operator \nNOT. The effect of placing the ope\nrator NOT before a simple condition is to reverse the \nvalue of the condition. It may be seen that the operator NOT can be used in two ways. In \nsimple conditions it can be used as a part of the condition. It can also be used to precede a \nsimple condition to\n make it a negated simple condition. An example of the first use may be \nDEPOSIT NOT LESS THAN 500.00 while an example of the second use is Not DEPOSIT \nLESS THAN 500.00. Of course, in this case, both the conditions mean the same thing and \ncan be used in eit\nher form. What matters is the role of the operator NOT. In the former case \nNOT is part of a relational operator and in the latter case it is a logical operator. However, \nNOT must not precede a simple condition that includes NOT as a part if it.\n \n1\n1\n.7 COMPOU\nND CONDITION\n \nTwo simple conditions can be connected by the logical operators AND or OR to form a \ncompound condition (also known as combined condition). When two conditions are combined by \nAND, the compound condition becomes true only when both the constitu\nent conditions are true. \nIn all other cases the compound condition is false. On the other hand, if OR is used to combine \ntwo conditions, the compound condition is true if either or both the constituent conditions are \ntrue. It is false only when both the co\nnditions are false.\n \nFor example, the compound condition AMOUNT GREATER THAN 499 AND AMOUNT \nLESS THAN 1000 is a compound condition which will be true only when the value of \nAMOUNT is in the range 500 to 999(inclusive of both). This is because both the simpl\ne \nconditions are true for these values of AMOUNT. For other values of AMOUNT, only one of \nthem is true. Similarly, the compound condition AMOUNT LESS THAN 500 OR AMOUNT \nGREATER THAN 999 will be false only when the value of AMOUNT is in the range 500 to \n999\n.\n \nA compound condition can consist of any number of simple or negated simple conditions \njoined either by AND or OR. Compound conditions in such cases are resolved as follows. \nNegated simple conditions are evaluated first. This is followed by the evaluation\n of pairs of \nresulting conditions around each AND in a left\n-\nto\n-\nright order. After this the resulting conditions \naround each OR are evaluated in a left\n-\nto\n-\nright manner. If required, parentheses can be used in \ncompound conditions. In such cases all the condi\ntions within the parentheses are evaluated first in \naccordance with the above rules. When parentheses are used within parentheses, evaluation \nproceeds from the least inclusive pair of the parentheses to the most inclusive pair.\n \n \nIn general, a compound cond\nition has the following form:\n \n \n \n \n \nCondition\n-\n1\n \n \n \nAND\n \n \n \n \n \n \n \n \nCondition\n-\n2\n \n \n……….\n \n \n \n \n \n \n  \nOR\n \n This watermark does not appear in the registered version - http://www.clicktoconvert.com\n \n62\n \n \nWhere condition\n-\n1 and condition\n-\n2 can be any one of the following:\n \n·\n \na simple condition\n \n·\n \na negated simple condition\n \n·\n \na compound condition optionally enclosed in parenthese\ns\n \n·\n \na negated compound condition where a compound condition enclosed in parentheses \nis preceded by NOT\n \nIt may be noted that no two logical operators can appear side by side except that the \noperators AND or OR may be immediately followed by NOT.\n \nUsing the abo\nve mentioned rules, fairly complicates compound conditions can be \nconstructed. However, in actual practice, the need for a complicated compound condition \nhardly arises. For the sake of readability, it is recommended that the use of complex \ncompound conditi\nons should be avoided.\n \nThe following is an example of the use of a compound condition. Consider the sentence\n \n \n \n \nIF AGE IS LESS THAN 30 AND (HIGHLY\n-\nEDUCATED OR \n \n \n \n \nHIGHLY\n-\nEXPERIENCE\nD\n) MOVE 3 TO BONUS\n-\nCODE.\n \nHere, HIGHLY\n-\nEDUCATED and HIGHLY\n-\nEXPERIENCED are co\nndition names. If \neither of them is true and if AGE is less than 30, 3 will be moved to BONUS\n-\nCODE. Notice \nthe importance of parentheses. If these are removed, the compound condition can become \ntrue if HIGHLY\n-\nEXPERIENCED is true regardless of the value of \nAGE and that of the \ncondition name HIGHLY\n-\nEDUCATED.\n \nAbbreviation\n \nConsecutive relational conditions in a compound condition can be abbreviated in certain \ncases as follows:\n \n(i)\n \nWhen the subjects in the consecutive relational conditions are identical, the \nsub\nject May be omitted from the one where it appears first.\n \n(ii)\n \nwhen the subjects and relational operators in the consecutive relational \nconditions are Identical, the subject as well as the relational condition may be \nomitted, the subject as well as the exce\npt from the one where they appear.\n \n \nSome examples of abbreviation are given below.\n \nExample 1\n \nThe compound condition \n \n \nAMOUNT GREATER THAN 499 AND AMOUNT LESS THAN 1000\n \nc\nan be abbreviated to\n \n \nAMOUNT GREATER THAN 499 AND LESS THAN 1000\n \nHere, the second appea\nrance of the common subject AMOUNT has been omitted.\n \nExample 2\n \nThe compound condition\n \n \n \nCARD\n-\nCODE\n \n   =    3    OR    CARD\n-\nCODE   =   5   OR  CARD\n-\nCODE   =  7\n \nmay be abbreviated to\n \n \n \nCARD\n-\nCODE   =  3   OR   5   OR   7\n \nHere, the subjects as well as the relat\nional conditions in the given compound condition \nare identical. Consequently, the second and third appearances of the subject and the relational \ncondition have been omitted.\n \nThe consecutives relational conditions that are being considered for abbreviation \nmay \n This watermark does not appear in the registered version - http://www.clicktoconvert.com\n \n63\n \nalso contain the word NOT. In this case the interpretation of the abbreviated condition can \nbecome ambiguous. To resolve the ambiguity the following rule has been recommended in \nthe ANS I standard. The word NOT preceding a relational operator in an ab\nbreviated \ncondition is considered part of the relational operator. Otherwise, NOT is considered to be a \nlogical operator negating the condition preceded by it. The following examples can help to \nunderstand this rule.\n \nExample 3\n \nThe condition\n \n \n \nAGE LESS THAN\n 30 AND NOT LESS THAN 20 OR 40\n \nis interpreted to be an abbreviation of the compound condition\n \n \nAGE LESS THAN 30 AND AGE NOT LESS THAN 20 OR AGE NOT LESS \nTHAN 40\n \nThis is because NOT precedes the relational operator LESS THAN in the abbreviated \ncondition and\n as such it is interpreted to be a part of the re\nlational operator NOT LESS \nTHAN.\n \nExample 4\n \nThe condition\n \n \n \nNOT AGE LESS THAN 20 AND 30\n \nwill be interpreted to be an abbreviation of \n \n \n \nNOT AGE LESS THAN 20 AND AGE LESS THA 30.\n \nHere, NOT precedes the data na\nme AGE. It is therefore not considered to be part of the \nrelational operator LESS THAN which has been abbreviated.\n \n1\n1\n.8 LET US SUM UP\n \nIn the present lesson we have focused our attention in learning what is meant by \ncondition and the different forms of them\n with sufficient examples. The learner with this \nknowledge will certainly be in a position to include them in pro\ngrams whenever the need \narises.\n \n1\n1\n.9 LESSON\n-\nEND ACTIVITIES\n \nTry to find the answers for the following exercises on your own.\n \n1.\n \nWhat do you mean by\n conditions?\n \n2.\n \nExplain about Relational condition\n \n3.\n \nExplain about Sign condition\n \n4.\n \nExplain about Condition Names\n \n5.\n \nWhat do you mean by compound conditions? Explain.\n \n11.10 \nPOINTS FOR DISCUSSION\n \n1)\n \nWrite notes on SIGN condition.\n \n2)\n \nWhat do you mean by condition\n-\nName Condi\ntion? Explain.\n \n3)\n \nExplain in detail about compound condition\n \n11.11  \nREFERENCES \n \n1)\n \nCOBOL Programming , M.K.Roy  & Ghosh Dastidar , Tata McGraw Hill, 2\nnd\n \nEdition,1998\n \n2)\n \nCOBOL Programming , V. RAJARAMAN, PHI Pub\n \n3)\n \nIntroduction to COBOL programming \n–\n Dr. R.Krishnamoort\nhy, JJ Publ\n \n4)\n \nStructured COBOL , Welburn, TataMcGraw Hill , 4\nth\n Edition.\n This watermark does not appear in the registered version - http://www.clicktoconvert.com\n \n64\n \nLESSON \n–\n \n1\n2\n: \nCONDITIONAL STATEMENTS\n \nCONTENTS\n \n1\n2.0 \n \nAims and objectives\n \n1\n2.1 \n \nIF statement\n \n1\n2.2 \n \nIF…ELSE statement\n \n1\n2.3 \n \nNested IF statement\n \n1\n2.4 \n \nLet us Sum Up\n \n1\n2.5  \n \nLesson\n-\nend Activi\nties\n \n12.6\n \nPoints for Discussion\n \n12.\n7\n \nReferences\n \n1\n2.0 AIMS AND OBJECTIVES\n \nProgram writing requires checking of many conditions. Hence the knowledge about \nconditional statements becomes vital, without which one can not write most of the real world \nprograms. \nKeeping this in view, this lesson introduces the learner the popular and effective IF \nstatement with its different forms.\n \n1\n2.1 IF STATEMENT\n \nThe simple form of IF statement is \n \n                  IF condition\n-\n1 statement\n-\n1\n \n               where the condition\n-\n1 may be any one of the following.\n \n \n \n       \n \n        Identifier\n-\n1                        IS [\nNOT\n] \nGREATER\n THAN\n \n \n          \nIdentifier\n-\n2\n \n        Literal \n-\n1                           IS [\nNOT\n]  \n> \n \n \n \n \n           \nLitreal\n-\n2\n \n \n \n \n \n \n   IS [\nNOT\n] \nLESSER\n THAN\n \n \n \n \n \n   \nIS [\nNOT\n] \n<\n \n \n \n \n  \n \n \n               IS [\nNOT\n] \nEQUAL\n TO\n \n           \n \n \n \n \n   IS [\nNOT\n] \n=\n \n \n \n \n \n \n \n \n \n \nIf the condition\n-\n1 becomes true then statement\n-\n1 will be executed. Statement\n-\n1 can be a \nsimple statement or a compound statement. If the condition fails then control g\noes out to the \nnext statement.\n \nExample :\n \n1)\n \nIF  A > B DISPLAY “ A IS BIG”\n \n \n2) \n \nIF BASIC\n-\nPAY  NOT  > 5000 GO TO TEST\n-\nPARA.\n \n \n1\n2.2   \n \nIF … ELSE  STATEMENT\n \nWe are already familiar with the simple form of the IF statement. The general form of \nthe IF statement is a\ns follows:\n \n \n \n This watermark does not appear in the registered version - http://www.clicktoconvert.com\n \n65\n \n \n \n                           statement\n-\n1\n \n                                     statement\n-\n2\n \n               \nIF\n condition\n \n;  \n \n \n                    ;\nELSE\n \n \n \n \n \n    \nNEXT SENTENCE\n} \n \n             \nNEXT SENTENCE\n \n \nThe condition can be any one of the condi\ntions discussed above. Each of statement\n-\n1 \nand statement\n-\n2 represents one or more COBOL statement. When more then one statement is \nspecified they must be separated by one or more spaces or by an optional semicolon (;) or \ncomma (,). During execution, if the\n condition is found to be true, the statements represented \nby statement\n-\n1 are executed. On the other hand, if the condition is found to be false, the \nstatements represented by statement\n-\n2 are executed. For ease of reference, we shall call the \nstatements re\npresented by statement\n-\n1 and statement\n-\n2 as \nthen part\n and \nelse part\n respectively.\n \nIt may be noted that either the then Part or else part is executed depending on the value of the \nspecified condition. After that the control implicitly goes to the statement \nthat immediately \nfollows the IF sentence.\n \nNormally, an If statement should be terminated by a period (.) followed by a blank (see \nnext section for exception). For this reason an IF statement is often referred to as an IF \nsentence. Sometimes, we encounter s\nituations where no action needs to be specified if the \ncondition is true, but some actions are necessary if the condition is false. In that case, the \nNEXT SENTENCE phrase can be used for the then part and the else part can be written to\n \nthe indicate the ac\ntions required. Similarly, the NEXT SENTENCE phrase can replace the \nelse part if no action is required when the condition is false. The NEXT SENTENCE phrase \nindicates that the control should pass to the statement that follows the IF sentence. Note that \nif \nno action needs to be specified for the else part, the phrase ELSE NEXT SENTENCE, \nbeing optional, can be omitted. It is in this form that we have used the IF statement so for. \nHowever, the phrase ELSE NEXT SENTENCE may not be omitted in certain cases. \n \nThe\n following examples illustrate the use of IF statement.\n \nExample 1\n \n \nIF   QUANTITY IS NUMERIC AND QUANTITY IS POSITIVE \n \n \n      MOVE ZERO TO ERROR\n-\nCODE. COMPUTE SALES VALUE=QUANTITY*RATE                                      \n \n \nELSE MOVE 1 TO ERROR \n–\nCODE \n \n \n    \n  MOVE ZERO TO SALES\n-\nVALUE\n \n \nThe specified condition tests whether or not the current value of the data name \nQUANTITY is numeric as well as positive. If the condition is true ERROR\n-\nCODE is set to \nzero and SALES\n-\nVALUE is computed by multiplying QUANTITY by R\nATE. On the other \nhand, if the condition is FALSE, ERROR CODE is set to 1 and SALES\n-\nVALUE is set to \nzero. In either case the control goes implicitly to the next statement after this IF sentence. The \nabove sentence is equivalent to the following flowchart.\n \n \n \n This watermark does not appear in the registered version - http://www.clicktoconvert.com\n \n66\n \n \n \n \n \nNo\n \n \n \n \nYes\n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \nExample 2\n \nIF OK\n-\nBALANCE NEXT SENTENCE ELSE MOVE 2 BALANCE\n-\nCODE\n \nHere, OK\n-\nBALANCE is a condition name. No action is specified if this condition is \ntrue. If the condition is false, BALANCE\n-\nCODE should be set to 2. T\nhe sentence is \nequivalent to the following flow chart.\n \n \n \n \n \n \n \n \nTrue\n \n \n \n \n \n \nFalse\n \n \n \n \n \n \n \n \n \n \nIt may be noted that any If sentence can be alternatively written by just negating the \ncondition. In order to retain the meaning of the original sentence, the th\nen and else parts are \nto be interchanged. Thus the following sentence has the same meaning as the one illustrated \nabove.\n \n \nIF NOT OK\n-\nBALANCE MOVE 2 TO BALANCE\n-\nCODE ELSE NEXT\n-\nSENTENCE\n \nIf desired, the ELSE NEXT SENTENCE phrase may be dropped to get the follow\ning \nequivalent form.\n \n \n \nIF NOT OK\n-\nBALANCE MOVE \n-\n2 TO BALANCE\n-\nCODE.\n \nIS \nQUANTITY \nnumeric and\n \npositive?\n \nERROR\n-\nCODE=1\n \nSALES\n-\nVALUE=0\n \nERROR\n-\nCODE=0\n \nSALES\n-\nVALUE=\n \nQUANTITY  X  RATE\n \nOK\n-\nBALANC\nE ?\n \nBALANCE\n-\nCODE=2\n This watermark does not appear in the registered version - http://www.clicktoconvert.com\n \n67\n \n1\n2.3 NESTED IF S\nTATEMENT\n \nThe then and else statement of an IF statement can contain other IF statements. The \nincluded IF statements in their turn may also contain other IF statements. Such \ninclusion of \none or more IF statements within the scope of an IF statement is called \nnesting\n. Note that the \nmost inclusive IF statement must have a terminating period and thus this statement along with \nall the included statements is often called \nor\n NESTED \nIF S\nTAT\nE\nMENT\n.\n \nSince the else phrase in an IF statement is optional, a nested If sentence may have fewer \nELSEs than Ifs. This makes the interpretation of a nested IF sentence rather difficult. The \nfirst step in interpreting such a sentence would be to find \nout which ELSE belongs to which \nIF and which are the IFs donot have the corresponding ELSEs. Once this is done, the actions \nspecified for the different cases can be recognized easily. To avoid any ambiguity in \ninterpretation, the COBOL rule in the matter i\ns as follows. \n \nThe nested IF \nsentence should be examined in a left\n-\n to\n-\nright manner to encounter each \nELSE in the order of its appearance. As soon as an ELSE is encountered, it must be\n \npaired \nwith the immediately preceding IF that has not yet been paired w\nith another ELSE.\n \nNote that the above rule also helps in detecting those Ifs for which the ELSE phrase may \nbe absent.\n \nThe above rule states how the COBOL compiler will interpret a nested IF sentence. \nTherefore, while writing such a sentence this rule must \nbe applied to verify that the \ninterpretation of the compiler will not be different from what is intended. The following are \nexamples to show how the meaning of a nested IF sentence can be obtained by applying the \nabove rule.\n \nExample 1\n \nConsider the followin\ng sentence\n \n \n \n \nIf account\n-\ncode is equal to old\n-\ncode\n \nk\n \nadd trans\n-\nvalue to trans\n-\ntotal\n \nif trans\n-\nvalue >1000\n \nj\n \nadd 1 to high\n-\ncount\n \nelse \n \nj\n \nadd 1 to low\n-\ncount\n \nThis nested IF sentence contains two IFs and one ELSE. The IF\n-\nELSE pair has been \nmarked by the number \n1 within a circle. The IF marked with 2 within a circle is a lone IF \nwithout any ELSE.\n \nNow it can be easily seen that the above sentence is equivalent to the following flow \nchart.\n This watermark does not appear in the registered version - http://www.clicktoconvert.com\n \n68\n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \nExample 2\n \nConsider the fo\nllowing nested sentence:\n \n \nIF STAFF\n-\nCODE =1\n \n \nk\n \nIF DAYS\n-\nWORKED IS GREATER THAN 175\n \n \n \nj\n \nMOVE\n \n1 TO BONUS\n-\nCODE\n \n \n \nELSE NEXT SENTENCE\n \n \nj\n \n \nELSE IF DAYS\n-\nWORKED IS GREATER THAN 205\n \n \nk\n \nl\n \nMOVE 2 BONUS\n-\nCODE\n \n \n \nELSE NEXT SENTENCE.\n \n \n \nl\n \nThe IF\n-\nELSE pairs in this sentence c\nan be detected by applying the rule stated above. \nWe indicate the IF\n-\nELSE associations by marking each pair with identical numbers within \ncircle. The sentence can now be easily recognized as an implementation of the following flow \nchart.\n \n \n \n \nIS ACCOUNT\n-\nCODE = OLD\n-\nACCOUNT\n \nAdd TRANS\n-\nVALUE\n \nto TRANS\n-\nTOTAL\n \nIS TRANS\n-\nVALUE\n \n>1000?\n \nAdd 1 to LOW\n-\nCOUNT\n \nAdd 1 to HIGH\n-\nCOUNT\n \nYes\n \nN\n \nY\n \nNo\n This watermark does not appear in the registered version - http://www.clicktoconvert.com\n \n69\n \n \n \n \n \n \nNo\n \nY\nes\n \n \n \n \n \n \n \n \nYes\n \nYes\n \n \n \n \n \nNo\n \n \nNo\n \n \n \n \n \n                 \n \n \n         \n \n \nIt can also be seen that while the last ELSE NEXT SENTENCE phrase can be dropped, \nit is not possible to drop the first ELSE NEXT SENTENCE phrase. If this first phrase is \nomitted, \nthe pairing of IF’s and ELSE’s will be disturbed. It is left as an exercise to verify \nthat the BONUS\n-\nCODE will then remain unchanged if the STAFF\n-\nCODE is other than the 1. \nAlthough the same action will be taken when STAFF\n-\nCODE is equal to 1, it is worth wh\nile to \nobserve that this is because the condition (DAYS\n-\nWORKED IS GREATER THAN 205) in \nthe last IF statement can never be true. \n \nTherefore, we observe the ELSE NEXT SENTENCE phrase is useful in certain cases. \nThe phrase also increases the readability. Ther\nefore, the use of NEXT SENTENCE either in \nthe then or else parts of an IF statement is recommended. The only exception can be when the \nELSE NEXT SENTENCE phrase is immediately followed by the terminating period of the IF \nsentence. This is because in this c\nase the said ELSE must apply to the IF of the most \ninclusive IF statement of the nesting. Therefore, the control will be transferred to the next \nsentence regardless of whether or not the ELSE NEXT SENTENCE phrase is explicitly \nincluded.\n \n1\n2.4 LET US SUM UP\n \nThe above lesson has introduced the learner the IF statement and its variants with \nexamples. With this knowledge the learner can make use of these statements whenever the \nneed arises to use them. Most of the programs will be making use of IF statement. Nes\nted IF \nstatement has to be used carefully. \n \nIS STAFF\n-\nCODE=1?\n \nIS DAYS\n-\nWORKED \n175?\n \nIS DAYS\n-\nWORKED \n205?\n \nBONUS\n-\nCODE=2\n \nBONUS\n-\nCODE=1\n This watermark does not appear in the registered version - http://www.clicktoconvert.com\n \n70\n \n1\n2.5 LESSON\n-\nEND ACTIVITIES\n \nTry to find the answers for the following exercises on your own.\n \n1.\n \nExplain with syntax IF statement .\n \n2.\n \nExplain with syntax IF .. ELSE  statement .\n \n3.\n \nExplain with syntax NESTED ..  IF statem\nent .\n \n4.\n \nWrite a few IF statements and explain them.\n \n12.6 POINTS FOR DISCUSSION\n \n1) Explain in detail about the different types of IF statements with examples. \n \n12.\n7\n \nREFERENCES\n \n1.\n \nCOBOL Programming , M.K.Roy  & Ghosh Dastidar , Tata McGraw Hill, 2\nnd\n \nEdition,1998\n \n2.\n \nCOBOL Programming , V. RAJARAMAN, PHI Pub\n \n3.\n \nIntroduction to COBOL programming \n–\n Dr. R.Krishnamoorthy, JJ Publ\n \n4.\n \nStructured COBOL , Welburn, TataMcGraw Hill , 4\nth\n Edition.\n This watermark does not appear in the registered version - http://www.clicktoconvert.com\n \n71\n \n \nLESSON \n–\n \n13\n: \nPERFORM STATEMENTS\n \nCONTENTS\n \n1\n3.0 \n \nAim and objectives\n \n1\n3.1 \n \nPERFORM STATEME\nNT\n \n1\n3.2 \n \nPERFORM with TIMES option\n \n1\n3.3\n \nPERFORM with UNTIL  option\n \n1\n3.4\n \nPerform with Varying Option\n \n1\n3.5 \n \nLet us Sum Up\n \n1\n3.6 \n \nLesson\n-\nend Activities\n \n13.7\n \nPoints for Discussion\n \n13.\n8\n \nReferences\n \n1\n3.0\n \nAIM AND OBJECTIVES\n \nPerform statements play an important role\n in COBOL programs.  Repeated executions of \nparagraphs based on conditions make use of Perform statements. The learner will therefore be \nintroduced the different forms of the Perform statements. Based on the requirement, the \nappropriate one can be employed\n in the programs. \n \n1\n3.1 PERFORM STATEMENT\n \nThe PERFORM statement can be used to execute a group of consecutive statements \nwritten elsewhere in the program. We shall refer to this group of statements as the range of \nthe PERFORM statement. During execution, w\nhen a PERFORM statement is encountered, a \ntemporary departure from the normal sequential execution takes place and the statements \ncontained in the specified range are executed. Upon execution of the said statements, the \ncontrol implicitly returns to the ne\nxt statement following the PERFORM statement. It is also \npossible to get the statements in the said range executed repetitively for a specified number of \ntimes or until a condition is satisfied. PERFORM is a powerful COBOL verb and has five \ndifferent forms\n. \n \n \nThe format of a simple PERFORM statement is as follows:\n \n \n \nPERFORM\n \nprocedure\n-\nname\n-\n1\n \n     \nTHRU\n \n \n \n \n \n \n \n \n \n    procedure\n-\nname\n-\n2\n \n \n \n \n \n \n \n    \nTHROUGH\n \n \nThe statement group beginning with the first statement of the procedure named in \nprocedure\n-\nname\n-\n1 and ending \nwith the last statement of the procedure names in procedure\n-\nname\n-\n2, constitutes the range consists of the statements contained in the procedure referred to \nby procedure\n-\nname\n-\n1. when the simple PERFORM statement is executed, this range is \nexecuted only once\n.\n \n \nSome examples of the PERFORM statement are given below.\n \n \n \n This watermark does not appear in the registered version - http://www.clicktoconvert.com\n \n72\n \nExample 1\n \n \nPERFORM \n \nCALCUALTE\n-\nTAX.\n \nIn this example, CALCULATE\n-\nTAX is either a section name or paragraph name. Suppose it \nis a section name. All the statements contained in this section will be exe\ncuted as a result of \nthe execution of the PERFORM statement and after the execution of these statements, the \ncontrol will come back to the statement following the PERFORM statement.\n \nExample 2\n \n \nPERFORM BEGIN\n-\nCALCULATION THRU END\n-\nCALCULATION.\n \nSuppose, BEGIN\n-\nCALCULATION and END\n-\nCALCULTION are paragraph names. \nThe execution of the above PERFORM statement will cause the execution of the group of the \nstatements starting with the first statement of BEGIN\n-\nCALCULATION and ending with the \nlast statement of end\n-\ncalcul\nation. It may be noted that there may be other paragraphs in \nbetween these two paragraphs. All these paragraphs area also included in the range. Upon the \nexecution of the range, the control returns to the statement following the PERFORM \nstatement.\n \nIt may b\ne noted that the return of control after the execution of the statements in the \nspecified range takes place implicitly. This means that at the end of the range, the \nprogrammer should not put any statement (such as GO TO) to transfer the control explicitly \nto the statement following the PERFORM statement. The compiler establishes a \nreturn \nmechanism\n at the end of the range and it is this mechanism which is responsible for the return \nof the control.\n \nThe following points may be noted in connection with the rang\ne of a PERFORM \nstatement.\n \n \n(i)\n \nA GO TO statement is allowed within the range of a PERFORM statement.\n \n \n \nHowever, it is the responsibility of the programmer to ensure that the control \n \n \n \nUltimately reaches the last statement of the range.\n \n(ii)\n \nThere is no re\nstriction as to what can be the last statement of a range except \nthat it cannot be a GO TO statement. When an IF sentence is used at the end \nof a range, he next sentence (specified implicitly or explicitly) for that IF \nsentence refers to the return mechani\nsm.\n \n(iii)\n \nThe use of a PERFORM statement within the range of another PERFORM \nStatement is allowed, Some compilers allow unrestricted use of such nesting \nof PERFORM statements (except that there may be limitations on the depth of \n \nNesting depending on the o\nperating system and hardware capabilities). Some \nCompilers require that the range of the included PERFORM statement must \nbe either completely within or completely outside the range of the invoking \nPERFORM statement. In other words, the sequence of ranges s\npecified in the \n \n \n \nNested PERFORM statements should neither overlap nor share the same \n \n \n \nTerminal statement. It is better to observe these restrictions for the sake of \n \n \n \nPortability.\n \n(iv)\n \nThe range of statements that should be performed gets linked up wi\nth the \nPERFORM STATEMNT ONLY WHE NTHE LATTER IS EXECUTED. If \nthe control reaches the first statement of the range through normal sequence or \nthrough explicit transfer of the control, then also the range gets executed in the This watermark does not appear in the registered version - http://www.clicktoconvert.com\n \n73\n \nnormal way. After the execution \nof the last statement of the range, the control \nfalls through the next statement following the range.\n \n1\n3.2  \nPERFORM WITH TIMES OPTION\n \nThe format of  PERFORM  TIMES statement is as follows:\n \n \n \nPERFORM\n \nprocedure\n-\nname\n-\n1\n \n     \nTHRU\n \n \n \n \n \n \n \n \n \n    procedure\n-\nname\n-\n2\n \n \n \n \n \n \n \n    \nTHROUGH\n \n                          \n \n                                                  \n \n                                              Identifier\n \n \nTIMES\n \n                                              integer\n \n \n \nExample :\n \n 1)\n \nPerform para\n-\n2 5 times.\n \n                  \n \nIn this case the specified para\n-\n2 will be repeatedly executed 5 \ntimes.\n \n \n \n      \n \n \n2)\n \nPerform para\n-\n2 thru para\n-\n5  n  times.\n \nIn this case the specified range of  all paragraphs from para\n-\n2 to para\n-\n5 will be \nrepeatedly executed n  times. Not\ne that the value of n should be available before this \nstatement gets executed.\n \n1\n3.3 \nPERFORM WITH UNTIL  OPTION\n \nThe format is as follows:\n \n \n \nPERFORM\n \nprocedure\n-\nname\n-\n1\n \n     \nTHRU\n \n \n \n \n \n \n \n \n \n   procedure\n-\nname\n-\n2\n \n \n \n \n \n \n \n    \nTHROUGH\n \n                          \n \n       \n                             \nUNTIL \n  condition\n \n \nExamples :\n \n1)\n \nPerform p\n-\n3 until i > 5.\n \nHere p\n-\n3 will be executed whenever i <= 5 . When the condition fails \nit executes p\n-\n3 and if the condition turns out to be true it skips p\n-\n3.  \n \n \n \n                   \n \n2)\n \nP\nerform p\n-\n2 thru p\n-\n4 until k > n.\n \nIt is similar to the previous example. All the paragraphs from p\n-\n2 to p\n-\n4 will be executed till the specified condition is satisfied.\n \n1\n3.4 \nPERFORM WITH VARYING OPTION\n \nThe format is as follows:\n \n \nPERFORM\n \nprocedure\n-\nname\n-\n1\n \n  \n      \nTHRU\n \n \n \n \n \n \n \n \n \n      procedure\n-\nname\n-\n2\n \n \n \n \n \n \n \n     \nTHROUGH\n \n                          \n \n \n \n \n \n \n \n \n This watermark does not appear in the registered version - http://www.clicktoconvert.com\n \n74\n \n                                   \n \n   \nVARYING \n     identifier\n-\n1 \n \n \nFROM  \n   identifier\n-\n2\n        \n \n        \n \n \n    Index\n-\nname\n-\n1\n \n \n     index\n-\nname\n-\n2\n \n \n \n \n \n \n \n    Literal\n-\n1\n \n \n \n  BY  \n      identifier\n-\n3      \nUNTIL \n  condition\n \n   \n \n Literal\n-\n2\n \n \n \n \nExamples \n:\n \n1)\n \nPerform para\n-\n3 varying k from 1 by 1 until k > 10.\n \n \n           \n \n \n \n \nHere para\n-\n3 will be repeatedly executed 10 times (For k=1,2,3, …..10)\n \n         \n \n     \n \n2) \n \nPerform p\n-\n2 thru p\n-\n4 varying  j from 1 by 2 until j > 100.\n \nHere paragraphs from p\n-\n2 through p\n-\n4 will be repeatedly executed for \nj=1,3,5 …,99. \n \n      \n \n \n3) \n \nPerform para\n-\n3 varying I  from 1 by 1 until I  > 50 \n \n                 \n \n \nafter J from 1 by 1 until J > 10.\n \nHere para\n-\n3 w\nill be executed 500 times. Keeping I=1 \n(J=1,2,3,…10),I=2 (J=1,2,3…10) …. And I=50 (J=1,2,3,…10). In this \nexample 2 loops are used.\n \n13.5\n \n \nLET US SUM UP\n \nThe learner has just now been introduced the fascinating forms of PERFORM \nstatements with their syntaxes \nand examples. The learner has been completely explained \nabout  Simple PERFORM, PERFROM…THRU, PERFORM …TIMES, PERFORM … \nUNTIL and PERFORM… VARYING options. This lesson will make the learner to use the \nmost appropriate form of PERFORM that suits based on  th\ne purpose of work.\n \n1\n3.6 \nLESSON\n-\nEND ACTIVITIES\n \nTry to find the answers for the following exercises on your own.\n \n1.\n \nWhy we need PERFORM statements?\n \n2.\n \nExplain with syntax PERFORM … THRU \n \n3.\n \nExplain with syntax PERFORM … TIMES\n \n4.\n \nExplain with syntax PERFORM … UNTIL\n \n5.\n \nExpla\nin with syntax PERFORM … VARYING\n \n13.7 POINTS FOR DICUSSION\n \n1) Explain in detail about the different types of PERFORM statements with examples.\n \n13.8\n \nREFERENCES\n \n1.\n \nCOBOL Programming , M.K.Roy  & Ghosh Dastidar , Tata McGraw Hill, 2\nnd\n \nEdition,1998\n \n2.\n \nCOBOL Programm\ning , V. RAJARAMAN, PHI Pub\n \n3.\n \nIntroduction to COBOL programming \n–\n Dr. R.Krishnamoorthy, JJ Publ\n \n4.\n \nStructured COBOL , Welburn, TataMcGraw Hill , 4\nth\n Edition.\n \n \n \n This watermark does not appear in the registered version - http://www.clicktoconvert.com\n \n75\n \n \nLESSON \n–\n \n1\n4\n \n: \nRENAMES & REDEFINES CLAUSES\n \nCONTENTS\n \n1\n4.0 \n \nAims and Objectives\n \n1\n4.1 \n \nRENAMES CLAUSE\n \n1\n4.\n2 \n \nRules of RENAMES Clause\n \n1\n4.3 \n \nREDEFINES CLAUSE\n \n1\n4.4 \n \nRules of REDEFINES clause\n \n1\n4.5 \n \nLet us Sum Up\n \n1\n4.6 \n \nLesson\n-\nend Activities\n \n14.7\n \nPoints for Discussion\n \n14.\n8\n  \n \nReferences\n \n1\n4.0  \nAIMS AND OBJECTIVES\n \nThis lesson introduces the Renames Clause and Redefines\n Clause to the learner. Many \nCOBOL applications require renaming of existing groups and redefining them for specific \npurpose. \n \n1\n4.1 RENAMES CLAUSE\n \nSometimes a re\n-\ngrouping of elementary data items in a record may be necessary so  that \nthey can belong to the\n original as well as to the new group. This is possible in COBOL by the \nuse of the RENAMES clause. The following example illustrates the  use of the RENAMES \nclause.\n \n01         PAY\n-\nREC.\n \n             03            FIXED \n–\n PAY.\n \n                             05\n           BASIC PAY                                    PIC                     9(6) V99\n \n                             05           DEARNESS\n-\nALLOWANCE         PIC                     9(6) V99\n \n             03            ADDITIONAL \n–\n PAY\n \n                     \n        05           HOUSE \n-\n  RENT                            PIC                      9(4)V99\n \n                             05           MTHLY \n-\n INCENTIVE                 PIC                       9(3)V99\n \n             03            DEDUCTIONS.\n \n            \n                 05            PF \n–\n DEDUCT                              PIC                        9(3)V99\n \n                             05            IT \n–\n DEDUCT                               PIC                        9(4)V99\n \n                             \n05            OTHER \n-\n DEDUCT                      PIC                        9(3)V99\n \n66\n \nPAY\n-\nOTHER\n-\nTHAN\n-\nBASIC RENAMES DEARNESS\n-\nALLOWANCE THRU \nM\nTHLY\n-\nINCENTIVE\n \n66\n \nIT\n-\nAND\n-\nPF\n-\nDEDUCTIONS RENAMES PF\n-\nDEDUCT THRU IT\n-\nDEDUCT\n \nIn the example, PAT\n-\nOTHER\n-\nTHAN\n-\nBASIC will \nbecome a new group consisting of \nDEARNESS\n-\nALLOWANCE, HOUSE\n-\nRENT and MTHLY\n-\nINCENTIVE. Note that the new \ngroup overlaps on two original groups, namely, part of FIXED\n-\nPAY and the entire \nADDITIONAL\n-\nPAY. Such overlapping is allowed provided the elementary items\n are all \ncontiguous. In a similar way IT\n-\nAN\n-\nDEDUCTIONS has two elementary items PF\n-\nDEDUCT This watermark does not appear in the registered version - http://www.clicktoconvert.com\n \n76\n \nand IT\n-\nDEDUCT. This new group is formed out of the original group deductions. \nAlternatively, the same thing can also be done in the original description itself by pla\ncing the \nIT\n-\nAND\n-\nPF\n-\nDEDUCTIONS at level 04 under DEDUCTIONS. The exact syntax of the \nRENAMES clause is as follows:\n \n66\n \ndata\n-\nname\n-\n1 \nRENAMES\n daa\n-\nname\n-\n2 \nTHRU\n data\n-\nnmae\n-\n3\n \n1\n4.2  \n \nRULES OF RENAMES CLAUSE\n \nThe following rules must be observed while using the RENAMES cl\nause:\n \n(i)\n \nAll RENAMES entries must be written only after the last record \ndescription entry.\n \n(ii) \n \nThe RENAMES clause must be used only with the special level \nnumber 66. the level number begins in margin A or any position after \nit. Data\n-\nname\n-\n1 must begin fr\nom margin B or any position after it. \nThere must be at least one space between the level number and data\n-\nname\n-\n1.\n \n(iii) \n \nData\n-\nname\n-\n2 and data\n-\nname\n-\n3 can be the names of elementary items \nor group items. They, however, cannot be items of level 01, 66, 77 or \n8\n8.\n \n(iv)\n \nData\n-\nname\n-\n1 may not be used as a qualifier. It can only be qualified by \nthe name of the record within which it is defined.\n \n(v) \n \nNeither data\n-\nname\n-\n2 nor data\n-\nname\n-\n3 can have an OCCURS clause in \nits neither description entry, nor can they be subordin\nate to an item \nthat has an OCCURS clause in its data description entry.\n \n(vi) \n \nData\n-\nname\n-\n3, if mentioned, must follow data\n-\nname\n-\n2, in the record \nand must not be one of its subfields.\n \n1\n4.3 REDEFINES CLAUSE\n \nSometimes it may be found that two or more storage a\nreas defined in the DATA \nDIVISION are not in use simultaneously. In such cases only one storage area can serve the \npurpose of two or more areas if the area is redefined. The REDEFINES clause used for the \npurpose allows the said area to be referred to by mo\nre than one data name with different sizes \nand pictures. Let us consider the following example.\n \n \n01\n \nSALES\n-\nRECORD\n \n \n \n02\n \nSALES\n-\nTYPE\n \n \nPIC\n \n \n9.\n \n \n \n02\n \nSALES\n-\nBY\n-\nUNTI.\n \n \n \n \n03\n \nQTY\n \n \nPIC\n \n \n9(4).\n \n \n \n \n03\n \nUNIT\n-\nPRICE\n \nPIC\n \n \n9(8) V99.\n \n \n \n02\n \nTOTAL\n-\nSALES\n \nREDEFINES\n \nSALES\n-\nBY\n-\nUNIT\n \n \n \n \n03\n \nAMOUNT\n \nPIC\n \n \n9(10) V99.\n \n \n \n \n03\n \nFILLER\n \nPIC\n \n \nX (2).\n \nThis example describes a sales record which may either contain the total amount of sale \n(AMOUNT) or the quantity (QTY) and UNIT\n-\nPRICE. The purpose of such description may \nbe to have two types of records an\nd their types may be determined from the data item named \nSALES\n-\nTYPE. Depending on some predetermined values of SALES\n-\nTYPE the record will \nbe interpreted in one of the two forms, Note that SALES\n-\nBY\n-\nUNIT and TOTAL\n-\nSALES \nrefer to the same storage space. They \nreally represent two different mappings of the same \nstorage area.\n This watermark does not appear in the registered version - http://www.clicktoconvert.com\n \n77\n \nThe REDEFINES clause as illustrated above are quite common in use. However, the \nclause may be simply used for the purpose of conservation of storage space possibly in the \nworking\n-\nstorage sec\ntion. In such cases two records having no meaningful connection between \nthem can also be used to share same storage space provided both of them are not used in the \nprogram simultaneously. The syntax of the REDEFINES clause is as follows:\n \n \nLevel\n-\nnumber daa\n-\nname\n-\n1 \nREDEFINES\n data\n-\nname\n-\n2\n \n1\n4.4  \n \nRULES OF REDEFINES CLAUSE\n \nThe following rules govern the use of the REDEFINES clause:\n \n \n(i)\n \nThe level\n-\nnumber of data\n-\nname\n-\n1 and data\n-\nname\n-\n2 must be identical.\n \n(ii)\n \nExcept when the REDEFINES clause is used to 01 level, dat\na\n-\nname\n-\n1 and \ndata\n-\nname\n-\n2 must be of same size. In the case of 01 level, the size of data\n-\nname\n-\n2 must not exceed \n \n \n \nthat of data\n-\nname\n-\n2 (originally defined area).\n \n(i)\n \nMultiple redefinition is allowed. The entries giving the new descriptions must \n \nImmediately fo\nllow the REDEFINES entry. In the case of multiple \nredefinitions the data\n-\nname\n-\n2 must be the data\n-\nname of the entry that \noriginally defined the area.\n \n(ii)\n \nThe REDEFINES clause must immediately follow data\n-\nname\n-\n1.\n \n(iii)\n \nEntries giving new descriptions cannot have VALUE\n clauses(except in the \ncase of condition\n-\nnames, i.e., 88\n-\nlevel). This means that data\n-\nname\n-\n1 or any of \nthis subordinate \n \nMust not have any VALUE clause.\n \n(iv)\n \nThe REDEFINES clause must not be used for records (01 level) described in \nthe FILE SECTION. The appeara\nnce of multiple 01 entries in the record \ndescription is implicitly assumed to be the redefinition of the first 01\n-\nlevel \nrecord.\n \n(v)\n \nThis clause must not be used for level\n-\nnumber 66 or 88 items.\n \n1\n4.5  \nLET US SUM UP\n \nThis lesson has taught the learner \n \n·\n \nRenames Cl\nause and \n \n·\n \nRedefines Clause\n \nAs many applications of COBOL require renaming and redefining the existing groups, \nthe knowledge about these two clauses is of critical importance. \n \n \n1\n4.6  \nLESSON\n-\nEND ACTIVITIES\n \nTry to find the answers for the following exercises\n on your own.\n \n1.\n \nExplain the role of RENAMES clause.\n \n2.\n \nSpecify the rules of RENAMES clause.\n \n3.\n \nWhat is meant by Redefines clause?\n \n4.\n \nBring out the rules of REDEFINES clause.\n \n5.\n \nWhat level numbers are used for Renames and Redefines clauses?\n This watermark does not appear in the registered version - http://www.clicktoconvert.com\n \n78\n \n14.7 POINTS FOR DISCUSSION\n \n1)\n Discuss the usage of RENAME and REDEFINES clauses.\n \n14.\n8\n  \n \nREFERENCES\n \n1.\n \nCOBOL Programming , M.K.Roy  & Ghosh Dastidar , Tata McGraw Hill, 2\nnd\n \nEdition,1998\n \n2.\n \nCOBOL Programming , V. RAJARAMAN, PHI Pub\n \n3.\n \nIntroduction to COBOL programming \n–\n Dr. R.Krishnamoorthy, JJ \nPubl\n \n4.\n \nStructured COBOL , Welburn, TataMcGraw Hill , 4\nth\n Edition.\n This watermark does not appear in the registered version - http://www.clicktoconvert.com\n \n79\n \nLESSON \n–\n \n1\n5\n: \nPROGRAMS\n \nCONTENTS\n \n1\n5.0 \n \nAims and objectives\n \n1\n5.1  \n \nProgram for IF \n \n1\n5.2 \n \nProgram for IF \n–\nELSE\n \n1\n5.3 \n \nProgram for simple PERFORM\n \n1\n5.4 \n \nProgram for PERFORM…THRU\n \n1\n5.5 \n \nProgram for PE\nRFORM …UNTIL\n \n1\n5.6 \n \nProgram for PERFORM … VARYING\n \n1\n5.7 \n \nPrograms for REDEFINES clause\n \n1\n5.8 \n \nProgram for RENAMES clause\n \n1\n5.9 \n \nLet us Sum Up\n \n1\n5.10 \n \nLesson\n-\nend Activities\n \n15.11\n \nPoints for Discussion\n \n15.1\n2\n \nReferences\n \n1\n5.0 \nAIMS AND OBJECTIVES\n \nThe learner will no\nw be exposed to the complete programs that make use of \n \nIF,IF\n-\nELSE,PERFORM statements,  REDEFINES and RENAMES clauses.\n \n15.1\n \nPROGRAM FOR IF  \n \nWrite a program to check whether the given number is ODD or EVEN.\n \nIdentification division.\n \nProgram\n-\nid. Ifst.\n \nEnviro\nnment division.\n \nData division.\n \nWorking\n-\nstorage section.\n \n01 n pic 9(3) value 0.\n \n01 q pic 9(3) value 0.\n \n01 r pic 9(3) value 0.\n \nProcedure division.\n \nPara\n-\n1.\n \n \nDisplay(1 1) erase.\n \n \nDisplay( 3 5) “ Enter a Number :”.\n \n \nAccept n.\n \n \nDivide n by 2 giving q remainder r\n.\n \n            If  (r = 0) \n \n                 Display(10 5) “ EVEN NUMBER”\n \n \n     Go to end\n-\npara.\n \n            Display(10 5) “ ODD NUMBER”\n \nEnd\n-\npara.\n \n             \n \nStop run.\n This watermark does not appear in the registered version - http://www.clicktoconvert.com\n \n80\n \n1\n5.2  \nPROGRAM FOR IF \n–\nELSE\n \nWrite a program to check whether the given number is ODD or\n EVEN. Use IF..ELSE.\n \nIdentification division.\n \nProgram\n-\nid. IfElse.\n \nEnvironment division.\n \nData division.\n \nWorking\n-\nstorage section.\n \n \n01 n pic 9(3) value 0.\n \n01 q pic 9(3) value 0.\n \n01 r pic 9(3) value 0.\n \n \nProcedure division.\n \nPara\n-\n1.\n \n \nDisplay(1 1) erase.\n \n \nDisplay\n( 3 5) “ Enter a Number :”.\n \n \nAccept n.\n \n \nDivide n by 2 giving q remainder r.\n \n            If  (r = 0) \n \n                 Display(10 5) “ EVEN NUMBER”\n \n            else\n \n    \n \n                 Display(10 5) “ ODD NUMBER”\n.\n \n             Stop run.\n \n1\n5.3 \nPROGRAM FOR S\nIMPLE PERFORM\n \nWrite a program to  demonstrate simple PERFORM statement\n \nIdentification division.\n \nProgram\n-\nid.  Perf1.\n \nEnvironment division.\n \nData division.\n \nProcedure division.\n \nPara\n-\n1.\n \n \nDisplay(1 1) erase.\n \n \nDisplay “ABC”.\n \n            Perform  para\n-\n2.\n \n         \n   Display “XYZ”.\n \n            Stop run.\n \nPara\n-\n2.\n \n             Display “DEF”.\n \n \nExplanation : The output of the program will be      ABC\n \n \n \n \n \n \n \n \nDEF\n \n \n \n \n \n \n \n \nXYZ\n \n1\n5.4 \nPROGRAM FOR PERFORM…THRU\n \nWrite a program to  demonstrate PERFORM …THRU statement\n \nIdentification\n division.\n \nProgram\n-\nid.  Perfthru.\n \nEnvironment division.\n This watermark does not appear in the registered version - http://www.clicktoconvert.com\n \n81\n \nData division.\n \nProcedure division.\n \nPara\n-\n1.\n \n \nDisplay(1 1) erase.\n \n \nDisplay “ABC”.\n \n            \nPerform  para\n-\n2 thru para\n-\n4.\n \n            Display “XYZ”.\n \n            \nStop run.\n \nPara\n-\n2.\n \n             Display “\nDEF”.\n \nPara\n-\n3.\n \n \nDisplay “GHI”.\n \n            Display “ Gandhi”.\n \nPara\n-\n4.\n \n            Display “Bharathiar”.\n \n \nThe output of the above program will be \n \nABC\n \n \n \n \n \n \n \nDEF\n \n \n \n \n \n \n \nGHI\n \n \n \n \n \n \n \nGandhi\n \n \n \n \n \n \n \nBharathiar \n \n \n \n \n \n \n \nXYZ\n \n1\n5.5 \nPROGRAM FOR PERFORM …UNTIL\n \nWrite a progra\nm to find the sum of “n” natural numbers.\n \nIdentification division.\n \nProgram\n-\nid. PerfUntil.\n \nEnvironment division.\n \nData division.\n \nWorking\n-\nstorage section.\n \n01 n pic 9(2) value 0.\n \n01  i  pic 9(2) value 1.\n \n01 sum pic 9(4) value 0.\n \n \nProcedure division.\n \nPara\n-\n1.\n \n \nD\nisplay(1 1) erase.\n \n \nDisplay(5 5) “Enter a Number “.\n \n \nAccept n.\n \n \n             Perform calc\n-\npara until i > n.\n \n             Display(10 5) “ Sum = “ sum.\n \n             Stop run.\n \n \nCalc\n-\npara.\n \n \nCompute sum = sum + i.\n \n             Add 1 to i.\n \n1\n5.6 \nPROGRAM FOR \nPERFO\nRM … VARYING\n \nWrite a program to demonstrate PERFORM …VARYING\n This watermark does not appear in the registered version - http://www.clicktoconvert.com\n \n82\n \nIdentification division.\n \nProgram\n-\nid. PerfVary.\n \nEnvironment division.\n \nData division.\n \nWorking\n-\nstorage section.\n \n01 n pic 9(2) value 0.\n \n01  i  pic 9(2) value 1.\n \n01 sum pic 9(4) value 0.\n \n \nProcedure di\nvision.\n \nPara\n-\n1.\n \n \nDisplay(1 1) erase.\n \n \nDisplay(5 5) “Enter a Number “.\n \nAccept n.\n \n             Perform calc\n-\npara varying i from 1 by 1 until  i > n.\n \n             Display(10 5) “ Sum = “ sum.\n \n             Stop run.\n \n \nCalc\n-\npara.\n \n \nCompute sum = sum + i.\n \n1\n5.7 \nPRO\nGRAMS  FOR REDEFINES CLAUSE \n \nWrite a simple program to explain  REDEFINES clause at 01 level.\n \n \nidentification division.\n \n \nprogram\n-\nid. Redef.\n \n \nenvironment division.\n \n \ndata division.\n \n \nworking\n-\nstorage section.\n \n \n01  a  pic 9(3) value 125.\n \n \n01  r  pic 9(2) redefi\nnes a.\n \n \n \nprocedure division.\n \n \np\n-\n1.\n \n \n \ndisplay(1 1) erase.\n \n \n \ndisplay(5 5) \"Value of r = \" r.\n \n \n \nstop run.\n \n \nNote :  The output of the program will be \n \n                    Value of r = 12.\n \n             This output is arrived using Redefining the variable a.\n \n \n  \n            \nAnother Program for Redefines\n \n             Write a program to explain  REDEFINES clause at level other than 01.\n \n \n \nidentification division.\n \n      \n \nprogram\n-\nid.\n \n \nenvironment division.\n \n \ndata division.\n \n \nworking\n-\nstorage section.\n \n \n01  emp\n-\ndetails.\n This watermark does not appear in the registered version - http://www.clicktoconvert.com\n \n83\n \n \n \n \n02  emp\n-\nrec.\n \n \n \n \n03 emp\n-\nname pic x(20).\n \n \n \n \n03 emp\n-\nsal  pic 9(2).\n \n \n \n02  pay\n-\nrec redefines emp\n-\nrec.\n \n \n \n \n03 name   pic x(20).\n \n \n \n \n03 sal    pic 9(2).\n \n \n \nprocedure division.\n \n \np\n-\n1.\n \n \n \ndisplay(1 1) erase.\n \n \n \ndisplay(3 5) \"Name : \" accept emp\n-\nname.\n \n \n \ndisplay(5 5) \"Sala\nry : \" accept emp\n-\nsal.\n \n \n \ndisplay(7 5) \"Name : \" name.\n \n \n \ndisplay(9 5) \"Salary : \" sal.\n \n \n \nstop run.\n \n \n1\n5.8  \nPROGRAM FOR RENAMES CLAUSE\n \n \nidentification division.\n \n \nprogram\n-\nid.\n \n \nenvironment division.\n \n \ndata division.\n \n \nworking\n-\nstorage section.\n \n \n01 emp.\n \n \n     02 em\npdet.\n \n \n \n03 name pic x(25).\n \n \n \n03 age  pic 9(3).\n \n \n \n03 sal  pic 9(6).\n \n \n \n     66 paydet renames name thru sal.\n \n \n \nprocedure division.\n \n \np1.\n \n \n \ndisplay(1 1) erase.\n \n \n \ndisplay(5 5) \"Name : \".\n \n \n \naccept name.\n \n \n \ndisplay(7 5) \"Age : \".\n \n \n \naccept age.\n \n \n \ndisplay(9 5) \"Sal \n: \".\n \n \n \naccept sal.\n \n \n \n \ndisplay(1 1) erase.\n \n \n \n \ndisplay(5 5) \"Details (Renaming used) : \" paydet.\n \n \n \nstop run.\n \n1\n5.9  \nLET US SUM UP\n \nHaving tried the above programs the learner gets clear ideas about the working \nprinciples of IF, IF \n–\nELSE,PERFORM,REDEFINES and \n \nRENAMES clauses.\n \n This watermark does not appear in the registered version - http://www.clicktoconvert.com\n \n84\n \nThe Learner can make simple modifications in the above programs to see the \nconsequences on the screen which will make him/her  confident to use these important verbs \nin his/her  programs without any ambiguity.\n \n1\n5.10 \n \nLESSON\n-\nEND ACTIVITIES\n \nTry to find the answers for the following exercises on your own.\n \n1.\n \nWrite a program to find whether the given number is +ve or not.\n \n2.\n \nWrite a program to display your name 5 times using Perform Times.\n \n3.\n \nWrite a program to find the factorial of a given number.\n \n4.\n \nWri\nte a program to check  whether the given number is prime or not.\n \n15.11 POINTS FOR DISCUSSION\n \n1) Write a simple COBOL program to illustrate PERFORM . . . . . THRU verb.\n \n2) Explain PERFORM . . . . . UNTIL  verb with an example.\n \n15.1\n2\n \nREFERENCES\n \n1.\n \nCOBOL Program\nming , M.K.Roy  & Ghosh Dastidar , Tata McGraw Hill, \n \n2\nnd\n Edition,1998\n \n2.\n \nCOBOL Programming , V. RAJARAMAN, PHI Pub\n \n3.\n \nIntroduction to COBOL programming \n–\n Dr. R.Krishnamoorthy, JJ Publ\n \n4.\n \nStructured COBOL , Welburn, TataMcGraw Hill , 4\nth\n Edition.\n \n This watermark does not appear in the registered version - http://www.clicktoconvert.com\n \n85\n \nUNIT \n–\n \nIV\n \nLESSON\n \n–\n 16\n: \nSEQUENTIAL FILES\n \nCONTENTS\n \n16.1\n \n \nAims and objectives\n \n16\n.1 \n \nFile Characteristics\n \n16\n.2 \n \nFile\n-\nControl Entries For Sequential Files\n \n1\n6\n.3 \n \nFile Description\n-\n Fixed\n-\nLength Records\n \n1\n6\n.4 \n \nStatements For Sequential Files\n \n1\n6\n.5 \n \nSequential Files With Variable\n-\nLe\nngth Records\n \n1\n6\n.6 \n \nLet us Sum Up\n \n1\n6\n.7 \n \nLesson\n-\nend Activities\n \n16.8\n \nPOINTS FOR DISCUSSION\n \n16.\n9\n \nReferences\n \n16.0\n \nAIMS AND OBJECTIVES\n \nThe aim of the proposed lesson is to introduce the concepts like  File characteristics, \nFile\n-\nControl Entries For Sequential Fil\nes, File Description for Fixed\n-\nLength Records, \nStatements For Sequential Files and  Sequential Files With Variable\n-\nLength Records.\n \nThe \nobjective in this lesson is to explain how to create and read a tape or disk file. A magnetic \ntape file, such as a card o\nr printer file, can only have a sequential organization.\n \n1\n6\n.1 \nFILE CHARACTERISTICS\n \nThe task of file handling is the responsibility of the system software known as IOCS \n(Input\n-\nOutput control system).\n \nRecord Size:\n  \n \nWe know that the records of a card file mu\nst consist of 80 characters(this can vary with \nthe model and make of the printer). The size of the records in a tape or disk file,  on the other \nhand,  may be chosen by the programmer.\n \nBlock Size:\n \nThe usual practice is to group a number of consecutive reco\nrds to form what is known as \na block or physical record. The number of records in a block is often called “blocking \nfactors”.\n \nThe IOCS reserves a memory space equal to the size of a block of the file. This memory \nspace is known as the buffer.\n \nBuffers:\n \nMode\nrn computers are capable of handling I\n-\nO operations independent of the CPU by \nmeans of the hardware known as data channel.\n \nFor example, if two buffers are allocated for an input file, the IOCS can fill\n-\nin one buffer \nwhile the program processes the records \nalready read and available in another buffer.\n \nLabel Records / Disk Directory:\n This watermark does not appear in the registered version - http://www.clicktoconvert.com\n \n86\n \nThe most important of the information stored in the header label is what is known as the \nfile title. In the case of magnetic\n-\ndisk files the labels usually do not exist(there are \nmany \nexceptions). Since, more than one file is stored on a disk pack, the IOCS also maintains a disk \ndirectory for all the files.\n \n16\n.2  FILE\n-\nCONTROL ENTRIES FOR SEQUENTIAL FILES\n \nThe characteristics of each of the files handled in a program are specified in\n the \nENVIRONMENT DIVISION and DATA DIVISION.\n \n       \nSELECT\n       [  \nOPTIONAL\n  ]     file\n-\nname         \nASSIGN\n     TO   hardware\n-\nname\n \n \n                               ;   \nRESERVE\n      integer\n-\n1         AREA \n \n                                                 \n                                 AREAS   \n \n                                 \n \n                            [   ;   \nORGANIZATION\n    IS   \nSEQUENTIAL\n   ]\n \n                \n \n                            [   ;   \nACCESS\n   MODE  IS   \nSEQUENTIAL\n   ]\n \n                    \n       [  ;   FILE    \nSTATUS\n   IS    data\n-\nname\n-\n1   ]\n \n \nRESERVE clause:\n \n \nThis clause specifies the number of buffers to be used for the file.\n \nInteger\n-\n1 indicates this number.\n \n ORGANIZATION/ACCESS clause:\n \nThese two clauses indicate that the said file is organ\nized as a sequential file and will be \naccessed sequentially.\n \nFILE STATUS clause:\n \nThis clause has been included in the above syntax for completeness. The REVERSE, \nORGANIZATION, ACCESS and STATUS clause can be specified in any order.\n \n16\n.3 FILE DESCRIPTION\n-\n F\nIXED\n-\nLENGTH RECORDS:\n \nThe general characteristics of a file are described in the file description (FD) entry of the \nDATA DIVISION.\n \n \nFD      file\n-\nname\n \n \n          \n \n           ;    \nBLOCK\n CONTAINS     integer\n-\n1     \nRECORDS\n \n                                    \n                                       CHARACTERS               \n \n \n \n \n          \n \n            ;   \nRECORD\n     CONTAINS    integer\n-\n2          CHARACTERS\n \n \n \n \n \n \n This watermark does not appear in the registered version - http://www.clicktoconvert.com\n \n87\n \n \n \n         \n \n                                          \nRECORD\n     IS                 \nSTANDARD\n \n         \n    ;   \nLABEL\n            \nRECORDS\n   ARE            \nOMITTED\n \n \n \n \nBLOCK \nCONTAINS CLAUSE:\n \nInteger \n–\n1 of the BLOCK CONTAINS clause specifies the block size either in terms of \nrecords or in terms of characters. For example, BLOCK CONTAINS 50 RECORDS means \nthat the\nre are 50 records in the block.\n \nRECORDS \nCONTAINS CLAUSE:\n \nThis clause specifies the records size. Integer\n-\n2 specifies the number of characters in a \nrecord. The RECORD CONTAINS clause is used for documentary purposes only.\n \nLABEL \nRECORD CLAUSE:\n \nThis clause sp\necifies whether or not the standard header and trailer labels should be \npresent in the magnetic\n-\ntape files.\n \nVALUE OF \nCLAUSE:\n \nThe VALUE OF clause is entirely implementation\n-\ndependent. In most compilers this \nclause is used to specify a file title. The clause\n in such cases has the form.\n \n     \nVALUE OF\n               \nID\n                                                       data\n-\nname\n \n                                         \nIDENTIFICATION\n            IS          literal\n   \n \n \n \n               The following are examp\nles of the VALUE OF clause.\n \n \n                      VALUE      OF        IDENTIFICATION        IS          “FILEA”\n \n                      VALUE      OF        ID        MY\n-\nFILE\n \nDATA \nRECORD CLAUSE:\n \nThis clause documents the record names defined for the file. \nFor example, DATA \nRECORDS ARE REC\n-\n1, REC\n-\n2, REC\n-\n3 means that there are three different record \ndescriptions following the FD entry in which this DATA RECORDS clause is used.\n \nCODE\n-\nSET CLAUSE:\n \nThe CODE\n-\nSET clause is used to describe the code in which the data\n is recorded on the \nexternal medium. The alphabet name must be specified in the SPECIAL\n-\nNAMES paragraph. \nThe format is as follows:\n \n                                 Alphabet\n-\nname       IS       implementor\n-\nname\n \nNONSTANDARD CLAUSES:\n \nThe different clauses des\ncribed above are as per the ANSI standard. Most compilers also \nprovide for additional nonstandard clauses to meet the specific requirements of the \ncorresponding computer.\n \n \n \n \n \n This watermark does not appear in the registered version - http://www.clicktoconvert.com\n \n88\n \nExample of file\n-\ndescription entries:\n \n         FD   FILE \n–\n A\n \n                 RECORD \n CONTAINS   130   CHARACTERS\n \n                 BLOCK  CONTAINS  20   RECORDS\n \n                 DATA RECORD IS FIRST\n-\nRECORD\n \n                 LABEL RECORDS ARE STANDARD\n \n                 VALUE   OF   ID   IS    “MY\n-\nLIFE”.\n \n \n      01       FIRST\n-\nRECORD     PIC   \n     X(130).      \n \n \n1\n6\n.4\n \nSTATEMENTS FOR SEQUENTIAL FILES\n \nBasic operations on a file involve the reading and writing of its records.\n \nWhen the file is sequential, there are three verbs for the purpose. These are READ, WRITE \nand REWRITE.\n \nOPEN statement:\n \nWe kn\now that the processing of a file should begin with the execution of an OPEN \nstatement. A file can be opened in any one of the four open modes \n–\n INPUT, OUTPUT, \nEXTEND and I\n-\nO. The following is the syntax (simplified) of the OPEN statement.\n \n \nOPEN\n           \nINPUT\n \n                      \nOUTPUT\n                file\n-\nname\n-\n1            [  ,  file\n-\nname\n-\n2  ]  …\n \n                      \nEXTEND\n \n                      \nI\n-\nO\n \n \n \n                     \nINPUT\n \n                     \nOUTPUT\n                 file\n-\nname\n-\n3           [  ,   \nfile\n-\nname\n-\n4  ]   …         …\n \n                     \nEXTEND\n \n                     \nI\n-\nO\n \n \n \nCLOSE statement:\n \n               \nThe following is the syntax (simplified) of the CLOSE statement.\n \nCLOSE\n          file\n-\nname\n-\n1   [WITH   \nLOCK\n   ]\n \n \n                      [  , f\nile\n-\nname\n-\n2   [WITH   \nLOCK\n   ]    ] …\n \n \n      \n   The CLOSE statement terminates the processing of the file.\n \nWRITE statement:\n \nThe WRITE statement for tape and sequential\n-\ndisk files has the following syntax.\n \n \nWRITE\n            record\n-\nname      [  \nFROM\n    identi\nfier   ]\n \n  \n \nA\ns a result of the execution of the WRITE statement, the record is released from the \nrecord area and is written onto the file.\n \nREWRITE statement:\n \nThe REWRITE statement is used to update an existing record in the disk file.\n \n \n \n This watermark does not appear in the registered version - http://www.clicktoconvert.com\n \n89\n \nThe general format is\n as follows:\n \n              \nREWRIE\n     record\n-\nname        [  \nFROM\n      identifier   ]\n \nIt may be noted that the syntax is similar to that in the case of a WRITE statement and \nthe FROM option has the same meaning.\n \n1\n6\n.5  SEQUENTIAL FILES WITH VARIABLE\n-\nLENGTH R\nECORDS\n \n   Magnetic \n-\n tape or disk files can contain variable\n-\nlength records. In this case the file \ncan have records with different fixed lengths or one or more records can contain variable \nnumber of table elements. In the latter case the table elements are\n defined with the \nOCCUR….DEPENDING clause.\n \nFD Entry for variable\n-\nlength Records:\n \nThe RECORDS CONTAINS and BLOCK CONTAINS clause are quite different in the \ncase of files with variable\n-\nlength records. The syntax of these two clauses are as follows:\n \n        \n \nBLOCK\n    CONTAINS     [  integer\n-\n1       \nTO\n    ]  integer\n-\n2      \nRECORDS\n \n \n \n \n \n \n \n \n \n                 CHARACTERS\n \n RECORD\n     CONTAINS   [  integer\n-\n3     \nTO\n    ]   integer\n-\n4       CHARACTERS\n \n \nRecord Description for Variable\n-\nlength Records:\n \nWhen the variable\n-\nle\nngth records consists of records of different lengths, each record \ntype is to be described at level 01 following the FD entry for the file. The variable part is to \nbe defined with the OCCURS…DEPENDING clause.\n \nFD VARIABL\nE\n-\nFILE\n \n \nRECORD CONTAINS 40 TO 92 CHA\nRACTERS\n \n            BLOCK CONTAINS 933 TO 1024 CHARACTES\n \n \nLABEL RECORDS AERA ATANDARDA\n \n \nRECORDING MODE IS V\n \n \nVALUS OF INDENTIFICATION IS “VARFILE”.\n \n \n01 VARIABLE\n-\nRECORD.\n \n \n02 ACCOUNT\n-\nNUMBER    PIC 9(6).\n \n \n02 NAME  PIC  X(20).\n \n \n02 NO\n-\nOF\n-\nPAYAMENTS    PIC 9.\n \n \n02\n PAYMENTS    OCCURS 1 TO 5 TIMES DEPENDING ON\n \n                          NO\n-\nOF\n-\nPAYMENTS   INDEXED BY TAB\n-\nINDEX.\n \n \n \n \n03 DATE\n-\nOF\n-\nPAYAMENT   9(6).\n \n \n \n03 AMOUNT\n-\nOF\n-\nPAYMENT\n \n9(5)V99.\n \n1\n6\n.6  \nLET US SUM UP\n \nThis lesson has introduced the learner  the concepts like  Fil\ne characteristics, File\n-\nControl Entries For Sequential Files, File Description for Fixed\n-\nLength Records, Statements \nFor Sequential Files and  Sequential Files with Variable\n-\nLength Records. Having learnt all \nthese concepts the learner gets knowledge about s\nequential file entries in different forms.\n \n This watermark does not appear in the registered version - http://www.clicktoconvert.com\n \n90\n \n16\n.7  \nLESSON\n-\nEND ACTIVITIES\n \nTry to find the answers for the following exercises on your own.\n \n1.\n \nSpecify the file characteristics.\n \n2.\n \nBring out file\n-\ncontrol entries for sequential files.\n \n3.\n \nBring out the file description e\nntries for fixed length records.\n \n4.\n \nWith syntax explain OPEN,WRITE statements of sequential file.\n \n5.\n \nWith syntax explain REWRITE,CLOSE statements of sequential file.\n \n16.8 POINTS FOR DISCUSSION\n \n1) Explain in detail about the file manipulation statements for a seq\nuential file.\n \n2) Write notes on different modes of file operation.\n \n16.\n9\n \nREFERENCES\n \n1.\n \nCOBOL Programming , M.K.Roy  & Ghosh Dastidar , Tata McGraw Hill, 2\nnd\n \nEdition,1998\n \n2.\n \nCOBOL Programming , V. RAJARAMAN, PHI Pub\n \n3.\n \nIntroduction to COBOL programming \n–\n Dr. R.Krishn\namoorthy, JJ Publ\n \n4.\n \nStructured COBOL , Welburn, TataMcGraw Hill , 4\nth\n Edition.\n This watermark does not appear in the registered version - http://www.clicktoconvert.com\n \n91\n \nLESSON \n–\n \n17\n: \nDIRECT ACCESS FILES\n \n \nCONTENTS\n \n17\n.0 \n \nAims and objectives\n \n17\n.1 \n \nRelative Files\n \n17\n.2 \n \nFile\n-\nContr\nol Paragraph for Relative Files\n \n17\n.3 \n \nProcedure Divisio\nn Statements for \nRelative Files\n \n17\n.4 \n \nLet us Sum Up\n \n17\n.5 \n \nLesson\n-\nend Activities\n \n17.6\n \nPoints for Discussion\n \n17.\n7\n \nReferences\n \n17\n.0 \nAIMS AND OBJECTIVES\n \nThe aim of this lesson is to introduce the concepts related with relative files. It also \nexposes the learner to the file\n-\ncont\nrol and procedure division statements that are required for \nrelative files.\n \n \n17\n.1 \n \nRELATIVE FILES\n \nFiles which are stored on a direct access storage medium such as a magnetic disk, are \noften called direct access files. COBOL supports three different organiz\nation for disk files\n-\n \nsequential, relative and index sequential.\n \nA\n relative file is a magnetic\n-\ndisk file organized in such a way that each record is \nidentified by a relative record number. The relative record number specifies the position of \nthe record fro\nm the beginning of the file. Thus the relative record number 1identifies the first \nrecord, the relative record number 2 identifies the second record and so on.\n \nA relative file can be access either sequentially or randomly. When the file is accessed \nsequent\nially the records are accessed in the increasing order of their relative record numbers. \nWhen a file is accessed randomly, the programmer must specify the relative record number.\n \nIt may be noted that in the case of relative organization, the reading as wel\nl as the \nwriting can be done randomly. Thus when a file is created by writing the record randomly, \nsome of the record position may remain empty. While these positions can be filled in sub \nsequentially, the programmer should avoid specifying these empty pos\nitions while reading \nsuch as relative file randomly. If a relative file is read in a sequential manner, such empty \nposition within it, if any, are ignored.\n \nThe handling of relative files requires some special codes in the FILE\n-\nCONTROL \nparagraph as well as \nin the PRCEDURE DIVISION. These are discussed bellow.\n This watermark does not appear in the registered version - http://www.clicktoconvert.com\n \n92\n \n17.\n2  FILE\n-\nCONTROL paragraph for relative files:\n \nThe general format for the SELECT clause for a relative file is as follows.\n \nSELECT\n    file\n-\nname   \nASSIGN\n    TO   implementor\n-\nname\n \n               \n \n  \n          ; \n RESERVE\n     integer\n-\n1        AREA\n \n                                                            AREAS\n \n \n            ;  \nORGANIZATION\n    IS   \nRELATIVE\n \n            \n \n  ;   \nACCESS \n  MODE   IS  \n SEQUENTIAL\n  [, \nRELATIVE\n   KEY IS data\n-\nname\n-\n1]\n \n         \n                                     \nRANDOM\n          \n \n                                              \nDYNAMIC \n        , \n RELATIVE\n   KEY IS data\n-\nname\n-\n1\n \n \n  [; FILE    \nSTATUS\n    IS data\n-\nname\n-\n2]\n \n   Whether the file should be used sequentially or randomly, should\n specified through the \nword SEQUNTIALLY or RANDOMLY in the access mode clause the clause ACCESS \nMODE IS DYNAMIC it indicates that the file is accessed sequentially and / or randomly in \nthe PROCEDURE DIVISION.\n \n17\n.3 PROCEDURE DIVISION statements for relative\n files\n \nThe statements OPEN,CLOSE,READ,WRITE and REWRITE which are available for \nsequential files are available for the relative files. In addition, two other words, namely, \nDELETE and START are also available. As regards the OPEN and CLOSE  statements, \nThe\nre is no difference  between relative file and sequential disk file.\n \n        READ STATEMENTS:\n \n           The general format for the read statements are shown bellow.\n \n \n            \nFormat 1:\n \n \n                 \nREAD\n  file\n-\nname RECORD  [ \nINTO\n   identifier ]\n \n   \n                  [  ;  AT   \nEND\n     imperative\n-\nstatements  ] \n \n \n            \nFormat 2:\n \n \n                 \nREAD\n   file\n-\nname  RECORD   [  \nINTO\n   identifier ]\n \n                                [ ;  \nINVALID\n   KEY   imperative\n-\nstatement  ]\n        \n \n \n            \nForm\nat 3:\n \n \n                  \nREAD\n   file\n-\nname   [ \nNEXT\n  ]   RECORD  [  \nINTO\n   identifier  ]\n \n                                [   ;   AT   \nEND\n   imperative\n-\nstatements   ]\n \nAs usual, a READ statements reads a record of the file. The file must be open in either \nthe\n input or I\n-\nO mode.\n \n     Format 1 is the normal form of the READ  statements.\n \n     Format 2 is used when the access mode is either random or dynamic. For example, \nsuppose REL\n-\nKEY are the names for the relative file and the relative key data item \nrespective\nly. The following statements will read the 50\nth\n record from this file.\n \n This watermark does not appear in the registered version - http://www.clicktoconvert.com\n \n93\n \n     MOVE    50    TO    REL\n-\nKEY.\n \n     READ    REL\n-\nFILE  RECORD  INVALID\n-\nKEY   GO  TO  PARA\n-\nINVALID.\n \nFormat 3 of the read statement can be used when the access mode is dynamic and the \nrecords are to be read sequentially. The next record is identified according to the following \nrules:\n \n \n \n(i)\n \nWhen the READ NEXT  statements is the first statement to be executed  after \nthe open statement on the file, the next record is the first record of the fi\nle.\n \n(ii)\n \nWhen  the execution of the READ NEXT statement follows the execution of \nanother READ statement on the same file  (format 2 or format 3 above), the next \nrecord is the record following the one previously read.             \n \n(iii)\n \nWhen the execution of the READ \nNEXT statement follows the execution of the \nstart statement .\n \nWRITE Statement\n \n \n     \nThe WRITE  statement for a relative file has the following format.\n \n \n           \nWRITE \n    record\n-\nname   [ \nFORM\n   identifier ]\n \n                                               \n     [  ;   INVALID KEY  imperative statement  ]\n \nAt the time of execution of the WRITE  statement, the file must be open either in the \nOUTPUT or I\n-\nO mode. For example, suppose REL\n-\nOUTPUT AND REL\n-\nKEY are the record \nname and relative key data item name for a\n relative file opened in the I\n-\nO mode. Then, upon \nexecution of the following statements\n \n             MOVE     50  TO  REL\n-\nKEY.\n \n             WRITE REL\n-\nOUTPUT  INVALID KEY GO TO PARA\n-\nINVALID.\n \n \n    The record is written at the 50\nth\n record position on the file\n.    \n \n     \nThe imperative statement of the INVALID KEY phrase is execution in the following case:\n \n(i)\n \nwhen an attempt is made to write beyond the externally\n-\ndefined boundaries of \nthe file.\n \n(ii)\n \nWhen an attempt is made to write in the record position which already \nc\nontains a valid record.\n \nREWRITE STATEMENT:\n \n     \n \nThe REWRITE statement has the following format for a relative file,\n \n            \nREWRITE\n  record\n-\nname  [ FORM identifier ]\n \n                                                      [  ;   \nINVALID\n  KEY   imperativ\ne \n–\nstatement  ]\n \nThe REWRITE statement is used to replace an exiting record by the contents of the \nrecord specified in the record name. The file must be opened in the I\n-\nO mode.\n \nDELETE STATEMENT:\n \n    The format of the delete statement is as follows:\n \n \n \n      \n      \nDELETE\n   file\n-\nname  RECORD   [  ;   \nINVALID\n   KEY  imperative\n-\nstatement  ]\n \nWhen the ACCESS MODE IS SEQUENTIAL the execution of the DELETE statement \nmust be preceded by the execution of a READ statement on the file and the INVALID KEY \nphrase should no\nt  be specified.\n This watermark does not appear in the registered version - http://www.clicktoconvert.com\n \n94\n \n17\n.4  \nLET US SUM UP\n \nIn this lesson the learner has been introduced  the concepts related with relative files. It \nhas also exposed the learner to the file\n-\ncontrol and procedure division statements that are \nrequired for relative files. Havi\nng learnt these concepts the learner can write programs that \ninvolve relative files comfortably.\n \n17\n.5  \nLESSON\n-\nEND ACTIVITIES\n \nTry to find the answers for the following exercises on your own.\n \n1.\n \nWhat is meant by relative file?\n \n2.\n \nExplain file control paragraph of \nrelative file\n \n3.\n \nExplain READ statement of Relative File.\n \n4.\n \nExplain WRITE statement of Relative File.\n \n5.\n \nExplain REWRITE statement of Relative File.\n \n17.6 POINTS FOR DISCUSSION\n \n1) Discuss in detail about the procedure division statements for a relative file.\n \n2) Dif\nferentiate WRITE statement from RE\n-\nWRITE statement.\n \n17.\n7\n \nREFERENCES\n \n1.\n \nCOBOL Programming , M.K.Roy  & Ghosh Dastidar , Tata McGraw Hill, 2\nnd\n \nEdition,1998\n \n2.\n \nCOBOL Programming , V. RAJARAMAN, PHI Pub\n \n3.\n \nIntroduction to COBOL programming \n–\n Dr. R.Krishnamoorthy, JJ Pu\nbl\n \n4.\n \nStructured COBOL , Welburn, TataMcGraw Hill , 4\nth\n Edition.\n This watermark does not appear in the registered version - http://www.clicktoconvert.com\n \n95\n \nLESSON \n–\n 18\n: \nINDEXED SEQUENTIAL FILES\n \nCONTENTS\n \n18\n.0  \n \nAims and objectives\n \n18\n.1 \n \nIndexed Sequential Files\n \n18\n.2 \n \nFile\n-\nControl Paragraph for Indexed Files:\n \n18\n.3 \n \nProcedure Division Statements for \nIndexed Files\n \n18\n.4 \n \nUpdating Of Relative and Indexed Files\n \n18\n.5 \n \nLet us Sum Up\n \n18\n.6 \n \nLesson\n-\nend Activities\n \n18.7\n \nPoints for Discussion\n \n18.\n8\n \nReferences\n \n18\n.0  \nAIMS AND OBJECTIVES\n \nThe aim of this lesson is to introduce the Indexed Sequential Files, File\n-\nContro\nl \nParagraph for Indexed Files,\n \nProcedure Division Statements for Indexed Files, Updating of \nRelative and Indexed Files\n. \n \n18\n.1 \nINDEXED  SEQUENTIAL FILES\n \nIn indexed sequential files (also referred to as indexed files), the records are stored in the \nkey seque\nnce order (usually ascending order). In addition, some index tables are also created \nand maintained with the file.\n \nAn indexed file on COBOL can be accessed either sequential or randomly. However, \nwhile creating an indexed file the records can be written on\nly sequentially and in the \nascending order of the key. When an indexed file is accessed randomly, the sequence in \nwhich the records are accessed is controlled by the programmer by specifying the value of a \ndata item called \nrecord key.\n \nIndexed files in a CO\nBOL program can be handled through suitable special codes in the \nFILE\n-\nCONTROL paragraph and in the PROCEDURE DIVISION. These are described \nbelow.\n This watermark does not appear in the registered version - http://www.clicktoconvert.com\n \n96\n \n18\n.2  FILE\n-\nCONTROL paragraph for indexed files\n \nThe general format for the SELECT clause for an files is as fo\nllows:\n \n   \nSELECT\n  file\n-\nname  \nASSIGN\n   TO  implementor \n–\nname\n \n \n                                                                \n \n                                                                       AREA\n \n                     ;   \nRESERVE\n  INTEGER\n-\n1\n \n      \n                                                                 AREA\n \n                  \n \n                     , \nORGANIZATION\n   IS   \nINDEXED\n \n \n \n                                                                     \nSEQUENTIAL\n \n                 ;    \nACCESS\n    \nMODE     IS        \nRANDOM\n \n                                                                      \nDYNAMIC\n \n \n                    ;     \nRECORD\n   KEY  IS   data\n-\nname\n-\n1\n \n \n                    ;     \nALTERNATIVE\n   \nRECORD\n   KEY  IS  data\n-\nname\n-\n2\n \n                      \n                                                  [ WITH \nDUPLICATES\n  ]     …..\n \n \n               [  ; FILE  \nSTATUS\n  IS  data\n-\nname\n-\n3]\n \n \nThe ORGANIZATION clause indicates that the file is an indexed file. The RECORD \nKEY clause specifies the record key data item\n on the basis of which the file is sequenced. \nThe field which is specified in the RECORD KEY clause (data\n-\nname\n-\n1) is also known as the \nprimary key.\n While the files is stored and stored on the basis of the prime key, the records of \nan \nalternative key.\n \n18\n.3 \n PROCEDURE DIVISION statements for indexed files\n \nAll the statements that are available for a relative file are also available for the indexed \nfiles.\n \nREAD STTATEMENT\n \nWhen either the RANDOM or DYNAMIC access mode is specified and the records are \nto be read i\nn a random manner, the syntax is as follows:\n \n               \nREAD\n  file\n-\nname RECORD  [  \nINTO\n  IDENTIFIER  ]\n \n                         [  ; \nKEY\n   IS data\n-\nname ]\n \n                         [  ; \nINVALID\n  KEY  imperative\n-\nstatement  ]\n \nThe data name in the KEY IS ph\nrase must be either the prime key or the alternative key \nitem. If the phrase is not specified, the prime key is assumed. Let PERSONNEL be an \nindexed file and let EMP\n-\nNO be the prime key and NAME the alternative key.\n \nWRITE STATEMENT\n \nThe records are written \nto be logical position as determined from the value of the record \nkey. The INVALID KEY condition arises in the following cases:\n \n \n \n \n \n \n \n This watermark does not appear in the registered version - http://www.clicktoconvert.com\n \n97\n \n(i)\n \nwhen an attempt is made to write a record beyond the externally defined boundaries \nof the file.\n \n(ii)\n \nWhen the file is opened in the O\nUTPUT mode and the value of the record key is not \ngrater than the value of the record key for the previous record written.\n \n(iii)\n \nWhen the value of the record key is equal to the record key of a record key already \npresent in the file.\n \nREWRITE STATEMENT\n \nAs in the \ncase of a relative file, the REWRITE statement requires that the file must be \nopened in the I\n-\nO mode, and if the SEQENTIAL access mode is specified, the value of the \nrecord key of the record being replaced must be equal to that of the record last from this\n file. \nThe INVALID KEY condition arises in the following cases:\n \n(i)\n \nwhen the record key does not match that of an existing record in the file.\n \n(ii)\n \nFor SEQUENTIAL access, when the value of the record key is not identical to that \nof the last record read from the fil\ne.\n \nDELETE STATEMENT\n \nThe file must be opened in the I\n-\nO mode. If the access is SEQUENTIAL, the INVALID \nKEY phrase should be specified. Instead, the last input\n-\noutput statement executed on the file \nmust be a successful READ statement for the said record.\n \nSTA\nRT STATEMENT\n \nThe START statement positions the files to the first logical record whose record key \nsatisfies the condition specified by the KEY phrase. The access mode must be \nSEQUENTIAL or DYNAMIC and the file must be opened in the I\n-\nO mode.\n \n18\n.4  \nUPDATING\n OF RELATIVE AND INDEXED FILES\n \nSequential files are updated by creating a new maser file from an existing old master file \nand a transaction file. Such an Updating is known as \nupdating by copy\n. Direct access files can \nbe updated by the technique known as \nUp\ndating by overlay.\n In this case no new file is \ncreated. instead, the necessary changes are incorporated in the body of the file.\n \nThe transaction code (T\n-\nCODE) is a one\n-\ndigit code having the following meaning.\n \n          \nTransaction Code\n                     \n                            \nMeaning\n \n1\n \nThe transaction record is to be inserted\n \n2\n \nThe corresponding master record is to be \ndeleted.\n \nOther than\n \n1 or 2                                    \n \nThe master record is to be replaced by the                                 \n                                                                                                    \n \n                                                                         transaction record.\n \nFile Description for Relative and Indexed Files\n \nThe FD entry f\nor a relative or an indexed file is identical to that of a sequential file. \nSome compilers do not allow variable\n-\nlength record or the blocking of records in the case of \ndirect access files.\n \nDECLARATIVE and FILE STATUS Clause\n \nThe input\n-\noutput exception cond\nition in the case of a direct access files can be handled \nby a declarative procedure in a manner similar that of sequential files.\n \nDirect Organization\n \nBesides the relative or indexed organization, a direct access file can also be designed to \nhave what is k\nnown as \ndirect organization. \n In this organization, data records are stored or This watermark does not appear in the registered version - http://www.clicktoconvert.com\n \n98\n \n“accessed” using a scheme of converting the of a record into the disk address to which the \nrecord is placed. Thus, no index table as in the case of an indexed file is necessary.\n \n \nSelection of file Organization\n \nWhile designing a file, the programmer must select a suitable organization for a file. The \norder in which the choice is to be made is as follows:\n \n(i)\n \nImplementation support difficulty.\n \n(ii)\n \nSoftware support required.\n \n(iii)\n \nEfficiency of p\nrocessing.\n \nFile Activity\n \n \nThe file activity is a measure of the proportion of records processed during a update run\n.\n \nThus we define the activity ration as follows.\n \n \n \n \n \nActivity\n \nratio\n \n=\n \nm\n \n/\n \nn\n \nWhere m = number of records to be inserted, modified or deleted a\nnd \n \n \n \nn = number of records in the file.\n \nFile volatility\n \n \n \nFile volatility relates to the number of times the updating of records are required \nduring some time period.\n \nFile interrogation\n \nSome files contain reference data. These files are used mainly for th\ne purpose of \ninterrogation. interrogation means a reference to a specific record for a specific response \nwithout changing the record in any manner.\n \nEg: Price list can be file which is to be constantly interrogative during a billing run.\n \n18\n.5 \nLET US SUM UP\n \nWith the help of this lesson, the learner gets clear ideas about the concepts related with  \nIndexed Sequential Files. File\n-\nControl Paragraph for Indexed Files,\n \nProcedure Division \nStatements for Indexed Files, Updating \no\nf Relative and Indexed Files. Having\n \nleant these \nconcepts , the learner can write application programs that involve indexed sequential files.\n \n18\n.6 \nLESSON\n-\nEND ACTIVITIES\n \nTry to find the answers for the following exercises on your own.\n \n1.\n \nExplain about Indexed Sequential files.\n \n2.\n \nExplain the file co\nntrol Para of Indexed Sequential files.\n \n3.\n \nExplain READ,WRITE  statements of Indexed Sequential file.\n \n4.\n \nExplain REWRITE,DELETE statements of Indexed Sequential file.\n \n5.\n \nWhat parameters are to be considered for selecting file organization?\n \n18.7 POINTS FOR DISCUSSIO\nN\n \n1) Explain in detail about procedure division statements for indexed sequential files.\n \n18.\n8\n \nREFERENCES\n \n1.\n \nCOBOL Programming , M.K.Roy  & Ghosh Dastidar , Tata McGraw Hill, 2\nnd\n \nEdition,1998\n \n2.\n \nCOBOL Programming , V. RAJARAMAN, PHI Pub\n \n3.\n \nIntroduction to COBOL prog\nramming \n–\n Dr. R.Krishnamoorthy, JJ Publ\n \n4.\n \nStructured COBOL , Welburn, TataMcGraw Hill , 4\nth\n Edition.\n This watermark does not appear in the registered version - http://www.clicktoconvert.com\n \n99\n \n \nLESSON \n–\n \n19\n: \nSORTING AND MERGING OF FILES\n \nCONTENTS\n \n19\n.0  \n \nAims and objectives\n \n19\n.1 \n \nThe Simple Sort Verb\n \n19\n.2 \n \nFile Updating\n \n19.\n3\n \nSimple Merge Verb\n \n19\n.4\n \nIn\nput and Output Procedure in Sort Statement\n \n19\n.5\n \nMerge Verb with Output Procedure\n \n19\n.6 \n \nLet us Sum Up\n \n19\n.7 \n \nLesson\n-\nend Activities\n \n19.8\n \nPoints for Discussion\n \n19.\n9\n \nReferences\n \n19\n.0  \n \nAIMS AND OBJECTIVES\n \nThe aim of this lesson is to introduce the learner the So\nrt Verb, File Updating, Simple \nMerge Verb,  Input and   Output   Procedure   in  Sort  Statement and  Merge Verb with \nOutput Procedure ,as they play important role in many application programs. \n \n19\n.1  THE SIMPLE SORT VERB\n \nThe process of sequencing the reco\nrds in some desired manner is known as sorting. \nSorting is done upon s\nome key data item in the record\n. F\nor example, consider the case of a \npay roll file where each \nreco\nrd contains all the n\necessary information of an employee, such as \nhis identification num\nber, name, address, department number, basic pay, allowances, \ndeductions, etc.\n \nWhen a sequential file is to be sorted, its record reside on the file medium and can be \naccessed to only serially. In COBOL, there is no specific feature for the sorting of a ta\nble.\n \nHowever, its provides a sort verb that can be used to SORT a sequential file. In addition to \nthe sort verb, the MERGE verb can be used to merge several sorted files to create a new file \ncontaining the records of these files in the sorting order.\n \nThe s\nort verb like many other Cobol verbs, then have different forms. This form is to be \nused when it is required to sort a given input file. The simple sort verb requires the naming of \nthree files \n–\n the unsorted input file, the sorted output file and the work \nfile. The format of the \nsimple SORT verb is as follows:\n \n        \nSORT\n  \nfile \n–\nname\n-\n1 { \nACENDING DESCENDING} KEY \ndata\n-\nname\n-\n1 [,data\n-\nname\n-\n2]….\n \n         \n[\n ON { ASCENDING DESCENDING} KEY data\n-\nname\n-\n3 [,data\n-\nname\n-\n4]…\n]\n….\n \n         \nUSING \n file\n-\nname\n-\n2 \nGIVING\n  file\n-\nnam\ne\n-\n3.\n \n     \nThe work file is to be defined by a sort description entry(SD entry).The format of SD \nentry is as follows.\n This watermark does not appear in the registered version - http://www.clicktoconvert.com\n \n100\n \n    \nSD\n          file\n-\nname\n \n[;  \nRECORD\n      CONTAINS  [integer\n-\n1   \nTO\n]   integer\n-\n2  CHARACTERS]\n \n \n ; \nDATA   \n        \nRECORD \n  IS           d\nata\n-\nname\n-\n1     [, data\n-\nname\n-\n2]….\n \n                          \nRECORDS \n  ARE    \n \n \nThe following rules should be taken into considerations while specifying this sort verb\n \n(i)\n \nThe input, output as well as the work file are open by the sort statement before the \nstart\ning begins and are closed by the sort statement itself  after the sorting is over.\n \n(ii)\n \nThere can be any number of SORT statement in a program.\n \n(iii)\n \nThe sorting can be done on any number of keys.\n \n(iv)\n \nAll the keys on which the sorting is done, must appear with their desc\nription in the \nrecord description of file name1.\n \n(v)\n \nKeys in the sort statement do not require any qualification.\n \n(vi)\n \nWhen two or more records in the input file have identical keys.\n \n(vii)\n \nThe SELECT clauses for the work file file\n-\n name\n-\n1 is SELECT file\n-\nname\n-\n1 \nASSIGN TO \nhardware\n-\nname.\n \nEg: Assume that we have a card file with the following records description in the data \ndivision.\n \n \nFD   KARD\n-\nFILE.\n \n01\n \nINPUT\n-\n RECORD.\n \n02   ID\n-\nNUMBER              PIC          9(6).\n \n02   NAME\n \n \n          PIC          X(24).\n \n02   DEPARTMENT         \n PIC           X(10).\n \n02    BASIC\n-\nPAY               PIC           9(5)V99.\n \n02    ALLOWANCE           PIC           9(4)V99.\n \n02    DETECTION              PIC           9(4)V99.\n \nThe names of the work file and output file be SORT\n-\nFILE and OUTPUT\n-\nFILE \nrespecti\nvely. the DATA DIVISION entries for these two files are as follows.\n \n \nSD    SORT\n-\nFILE.\n \n01\n \nSORT\n-\nRECORD   \n \n \n02   FILLER                       PIC            X(30).\n \n02   DEPARTMENT          PIC            X(10).\n \n02   BASIC\n-\nPAY                PIC            9(5)V9\n9.\n \n02   FILLER                        PIC           X(12).\n \n \n \nFD   OUTPUT\n-\nFILE.\n \n       01    OUTPUT\n-\nRECORD           PIC          X(59).\n \nThe following statement will sort the input file and will create the sorted output file.\n \n19\n.2\n \nFILE UPDATION\n \nThe process \nof modifying a\nn\n old file with current information is known as file updating.\n \n \nMaster file\n \nA master file is a file that is used to as an authority in a given job. It may contain \nsomewhat permanent, historical, statistical or identification type of data.\n \n \n This watermark does not appear in the registered version - http://www.clicktoconvert.com\n \n101\n \nTr\nansaction file\n \n \nA transaction file is a file that contains a new records are changes to old records which \nare used to update the master file.\n \n         \n \nThe problem of file updating can be defined as follows.\n \nv\n \nInsertion of new records.\n \nv\n \nModification of some e\nxisting records.\n \nv\n \nDeletion of obsolete records.\n \nv\n \nCopy of those records which are neither obsolete nor require any modification.\n \n19\n.3  \n \nSIMPLE MERGE VERB\n \nLike sorting, the merging of files is frequently required in various commercial \napplication. It  is possi\nble to merge two or more files with one MERGE statement. The \nformat of the simple MERGE verb is as follows.\n \n    \nMERGE\n  file\n-\nname\n \n                               \n \n                    \nASCENDING\n \n    ON                                             KEY     data\n-\nname\n-\n1             [  , data\n-\nname\n-\n2  ] ……\n \n                    \nDECENDING\n                                                                                                                                                                                         \n                                                                                                             \n \n \n \n                    \nASCENDING\n \n    ON                                                   KEY    data\n-\nname\n-\n3         [ , data\n-\nname\n-\n4 ]……..\n \n      \n              \nDECENDING\n \n \n      \nUSING \n     file\n-\nname\n-\n2,  file\n-\nname\n-\n3   [  , file\n-\nname\n-\n4  ]  …..\n \n   \n \n      \nGIVING\n    file\n-\nname\n-\n5.\n \nThe input files to be merged through the MERGE statement are specified in the USING \nphrase. These files must be sequential files\n and must be sorted on the merge keys. The rules \nof the SORT statement in respect of the ASCENDING/DECENDING KEY phrase are also \napplicable in this case.\n \nLet us assume there are three zones and as such three sales files are to be merged. Three \nfiles are na\nmed as ZONE\n-\nFILE\n-\n1, ZONE\n-\nFILE\n-\n2 and ZONE\n-\nFILE\n-\n3.\n \nFILE CONTROL.\n \n                     SELECT     ZONE\n-\nFILE\n-\n1      ASSIGN   TO   TAPE.\n \n                     SELECT     ZONE\n-\nFILE\n-\n2      ASSIGN   TO   TAPE.\n \n                     SELECT     ZONE\n-\nFILE\n-\n3      ASSIGN\n   TO   TAPE.\n \n                     SELECT     WORK\n-\nFILE        ASSIGN   TO   MERGE\n-\nDISK.\n \n                     SELECT     MERGED\n-\nFILE   ASSIGN   TO   TAPE.\n \nDATA DIVISION.\n \nFILE  SECTION.\n \nFD     ZONE\n-\nFILE\n-\n1\n \n          BLOCK   CONTAINS   20   RECORDS\n \n          \nVALUE    OF    ID     “ZONEFILE1”.\n \n01      FILE\n-\n1\n-\nRECORD       PIC          X(90).\n \n \nFD     ZONE\n-\nFILE\n-\n2\n \n \n \n This watermark does not appear in the registered version - http://www.clicktoconvert.com\n \n102\n \n          BLOCK   CONTAINS   15   RECORDS\n \n          VALUE    OF    ID     “ZONEFILE2”.\n \n01      FILE\n-\n2\n-\nRECORD       PIC          X(90).\n \n \nFD     ZONE\n-\nFILE\n-\n3\n \n          BLOCK   CONTAINS   10   RECORDS\n \n          VALUE    OF    ID     “ZONEFILE3”.\n \n01      FILE\n-\n3\n-\nRECORD       PIC          X(90).\n \n \nFD     MERGED\n-\nFILE\n \n          BLOCK   CONTAINS   20   RECORDS\n \n          VALUE    OF    ID     “MERGEDFILE”.\n \n01      MER\nGED\n-\nRECORD       PIC          X(90).\n \n \nSD WORK\n-\nFILE.\n \n01 WORK\n-\nRECORD.\n \n     02    FILLER                                      PIC                   X(50).\n \n     02    PROCEDURE\n-\nNAME              PIC                    X(20).\n \n     02     FILLER                 \n                   PIC                    X(20).\n \n \nPROCEDURE DIVISION.\n \nMERGING\n-\nPARA.\n \n                    MERGE    WORK\n-\nFILE  ON  ASCENDING  KEY    PRODUCT\n-\nNAME\n \n                    \nUSING      ZONE\n-\nFILE\n-\n1,      ZONE\n-\nFILE\n-\n2,    ZONE\n-\nFILE\n-\n3\n \n                    \nGIVING     MERGED\n-\nFILE.\n \n                    STOP   RUN.\n \n \n   \n \nIt has been assumed that all the three input files and the final merged file named as \nMERGED\n-\nFILE are tape files.\n \n19\n.4  INPUT AND OUTPUT PROCEDURE IN SORT STATEMENT\n \n    The general format of the \nSORT statement can written as follows.\n \n \n                                                     \nASCENDING\n \n    \nSORT\n    file\n-\nname\n-\n1     ON                                    KEY     data\n-\nname\n-\n1 [data\n-\nname\n-\n2]\n \n                                                    \n  \nDESCENDING\n \n \n    \n \n                \nASCENDING\n            \n \n    ON                                    KEY  data\n-\nname\n-\n3    [,  data\n-\nname\n-\n4] ….     ……..\n \n                \nDESCENDING\n \n \n \n[  COLLATING    \nSEQUENTIAL\n   IS  alphabet\n-\nname]  \n \n \n \n This watermark does not appear in the registered version - http://www.clicktoconvert.com\n \n103\n \n \n \n                     \n                                                                           \nTHRU\n \nINPUT\n   \nPROCEDURE\n        IS          section\n-\nname\n-\n1                                  section\n-\nname\n-\n2\n \n                                                                            \n                    \nTHROUGH\n \nUSING\n     file\n-\nname\n-\n2      [  , file\n-\nname\n-\n3]  ….\n \n \n \n \n                                                                                     \n \nTHRU\n \n OUTPUT\n  \nPROCEDURE\n    IS    section\n-\nname\n-\n3                                    sect\nion\n-\nname\n-\n4\n \n                                                                                      \n \nTHROUGH\n     \n \n \n GIVING\n    file\n-\nname\n-\n4\n \n \n                When   an   INPUT   PROCEDURE  is mentioned\n \n                  \n \n                                       \n        \n \nTHRU\n \n                Section\n-\nname\n-\n1                                 section\n-\nname\n-\n2\n \n                                               \n \nTHROUGH\n \n \n \n    The format of the RELEASE  statement is as follows:\n \n                            \nRELEASE  \n    record\n-\nna\nme        [  \nFROM\n   identifier   ]\n \n    The format of the RETURN  statement is as follows:\n \n                             \nRETURN\n      file\n-\nname    RECORD     [  \nINTO\n  identifier  ]\n \n                                                  ;  AT   \nEND\n  imperative stat\nement.\n \n    The following are the restrictions when these procedure are used.\n \n(i)\n \nProcedure must not contain any SORT/MERGE statement.\n \n(ii)\n \nAn explicit transfer of control outside the procedures is not allowed.\n \n(iii)\n \nThe control must reach the statements only through asso\nciated SORT statement.\n \n(iv)\n \nProcedure must consist of one or more sections and they must appear \ncontiguously in the body of the program.\n \n(v)\n \nThe input and output  procedure must not shae any section or any part between \nthem.\n \n19\n.5  MERGE VERB WITH OUTPUT PROCEDURE\n \n \n   \nLike the sort verb, the merge verb can also have an output procedure. The syntax of \nthe MERGE verb is given below.\n \nMERGE\n    file\n-\nname\n-\n1\n \n \n              \nASCENDING\n \n  ON                                            KEY    data\n-\nname\n-\n1   [  , data\n-\nname\n-\n2  ]  \n …..                                                                        \n \n \n              \nDESCENDING\n \n \n                \n \n                \nASCENDING\n \n  \nON                                            KEY    data\n-\nname\n-\n3   [  , data\n-\nname\n-\n4  ]   …..             \n                                                           \n \n \n              \nDESCENDING\n \n \n     [COLLATING    \nSEQUENCE\n   IS  alphabet\n-\nname  ]\n \n \n \n \n \n \n \n \n \n \n \n \n This watermark does not appear in the registered version - http://www.clicktoconvert.com\n \n104\n \n \nUSING\n  file\n-\nname2,    file\n-\nname\n-\n3   [  ,  file\n-\nname\n-\n4  ] ….\n \n \n                                                    \n                                  \nTHRU\n \nOUTPUT\n   \nPROCEDURE\n    IS     section\n-\nname\n-\n1                                   section\n-\nname\n-\n2\n \n                                                                                      \nTHROUGH\n \n \nGIVING\n   file\n-\nname\n-\n5\n \n        \n     \n \nThe rules for specifying and coding the output procedure is identical to those in the case \nof the SORT verb.\n \nSAME SORT AREA CLAUSE:\n \nLike the SAME AREA clause, this clause can also be specified in the I\n-\nO\n-\nCONTROL \nparagraph to have two or more files to\n share same memory area during execution.\n \n \n                        \nSORT\n \n     SAME                                         AREA    FOR    file\n-\nname\n-\n2    [  ,  file\n-\nname\n-\n3  ]  …..       \n \n                        \nSORT\n-\nMERGE\n \nAt least one of the files quoted in\n this clause must be defined with SD. The SAME \nSORT AREA clause enables two or more SORT/MERGE work files to use same area.\n \n19\n.6\n \nLET US SUM UP\n \nThis lesson has  introduced  the learner the Sort Verb, File Updating, Simple Merge \nVerb,  Input and   Output   P\nrocedure   in  Sort  Statement and  Merge Verb with Output \nProcedure. These are essential for any COBOL programmer for writing industr\ny\n oriented \napplications.\n \n19\n.7 Lesson\n-\nend Activities\n \nTry to find the answers for the following exercises on your own.\n \n1.\n \nWhat \ndo you mean by Sorting?\n \n2.\n \nExplain with syntax SORT verb\n \n3.\n \nState the rules for SORT verb\n \n4.\n \nExplain how input\n-\noutput procedure is used with SORT statement.\n \n5.\n \nExplain with syntax MERGE verb\n \n19.8 POINTS FOR DISCUSSION\n \n1) Write a simple COBOL program to illustrate the \nSORT verb.\n \n2) Discuss the usage of MERGE verb with example.\n \n19.9\n \nREFERENCES\n \n1.\n \nCOBOL Programming , M.K.Roy  & Ghosh Dastidar , Tata McGraw Hill, 2\nnd\n \nEdition,1998\n \n2.\n \nCOBOL Programming , V. RAJARAMAN, PHI Pub\n \n3.\n \nIntroduction to COBOL programming \n–\n Dr. R.Krishnamoorth\ny, JJ Publ\n \n4.\n \nStructured COBOL , Welburn, Tata\n \nMcGraw Hill , 4\nth\n Edition.\n \n \n \n \n This watermark does not appear in the registered version - http://www.clicktoconvert.com\n \n105\n \nLESSON \n–\n \n20\n: \nPROGRAMS\n \nCONTENTS\n \n20\n.0   \n \nAims and objectives\n \n20\n.1   \n \nSequential File Creation and Rewriting\n \n20\n.2   \n \nProgram for  Sequential File Creation & Rewriting\n \n20\n.3   \n \nProgram for \n Indexed Sequential File Creation (Dynamic mode)\n \n20\n.4   \n \nProgram for  Indexed Sequential File Creation (Random Mode)\n \n20\n.5   \n \nProgram to demonstrate  SORT Verb\n \n20\n.6   \n \nProgram to demonstrate  Merge Verb\n \n20.7\n \n \nLet us Sum Up\n \n20\n.8 \n \nLesson\n-\nend Activities\n \n20.9\n \nP\noints for Discussion\n \n20.\n10\n \nReferences\n \n20\n.0  \nAIMS AND OBJECTIVES\n \nThe aim of this lesson is to introduce the learner the programs for  sequential files \nand\n \nindexed sequential files. It also focuses the programs that involve the concept of Sorting and \nMerging\n.\n \n20\n.\n1 \nSEQUENTIAL FILE CREATION AND REWRITING\n \nWrite a program to create a student  file with just two fields : sno (Student Number) and \nsame (Student Name). Add a few records. Modify the record with sno=1 as sno=10. Use \nsequential file I\n-\nO.\n \n \nidentification\n division.\n \n \nprogram\n-\nid. s2.\n \n \nenvironment division.\n \n \ninput\n-\noutput section.\n \n \nfile\n-\ncontrol.\n \n \n \nselect stu\n-\nfile assign to disk\n \n \n \norganization is line sequential\n \n \n \naccess mode is sequential\n \n \n \nfile status is fs.\n \n \ndata division.\n \n \nfile section.\n \n \nfd stu\n-\nfile\n \n \n \nlabel\n records are standard\n \n \n \nvalue of file\n-\nid is 'stu.dat'\n \n                data record is stu\n-\nrec.\n \n \n \n01  stu\n-\nrec.\n \n \n \n02  sno   pic 9(2).\n \n \n \n02  sname pic x(10).\n \n \nworking\n-\nstorage section.\n This watermark does not appear in the registered version - http://www.clicktoconvert.com\n \n106\n \n \n01   ans pic x value space.\n \n      \n \n01   fs  pic x(2) value spaces.\n \n \n01   eo\nf pic x value space.\n \n \nprocedure division.\n \n \np\n-\n1.\n \n \n \ndisplay(1 1) erase.\n \n \n \nopen extend stu\n-\nfile.\n \n \n \nperform g\n-\nw\n-\npara until ans = \"n\".\n \n \n \nclose stu\n-\nfile.\n \n \n \n \n \n \nopen i\n-\no stu\n-\nfile.\n \n \n \n     if fs = '30'\n \n \n \n \n \nopen output stu\n-\nfile\n \n \n \n \n \nclose stu\n-\nfile\n \n \n \n \n \nopen i\n-\no stu\n-\nfil\ne.\n \n \n \nread stu\n-\nfile at end move 'y' to eof.\n \n \n \nperform rewrite\n-\npara until eof = 'y'.\n \n \n \nclose stu\n-\nfile.\n \n \n \nstop run.\n \n \ng\n-\nw\n-\npara.\n \n \n \ndisplay(1 1) erase.\n \n \n \ndisplay(3 5) \"Sno : \".\n \n \n \naccept sno.\n \n \n \ndisplay(5 5) \"Sname : \".\n \n \n \naccept sname.\n \n \n \nwrite stu\n-\nrec.\n \n \n \ndisplay(1\n0 5) \"Continue [ y/ n ] : \".\n \n \n \naccept ans.\n \n \n \nrewrite\n-\npara.\n \n \n \nif sno=\"01\"\n \n \n \n \nmove 10 to sno\n \n \n \n \nrewrite stu\n-\nrec.\n \n \n \nread stu\n-\nfile at end move 'y' to eof.\n \n \n20\n.2 Program for  Sequential File Creation & Rewriting \n \nWrite a program to create a Length file with jus\nt two fields : l (Length) and l\n-\nc (Length\n-\nCode) . Add a few records. Modify  the record with l\n-\nc =1 as l\n-\nc=5. Use sequential file I\n-\nO.\n \n \nidentification division.\n \n \nprogram\n-\nid.\n \n \nenvironment division.\n \n \ninput\n-\noutput section.\n \n \nfile\n-\ncontrol.\n \n \n \nselect len\n-\nfile ass\nign to disk.\n \n \ndata division.\n \n \nfile section.\n \n \nfd len\n-\nfile\n \n \n \nlabel records are standard\n \n \n \nvalue of file\n-\nid is \"len.dat\".\n This watermark does not appear in the registered version - http://www.clicktoconvert.com\n \n107\n \n \n01 len\n-\nrec.\n \n \n \n02   l   pic 9(2).\n \n \n \n02   l\n-\nc pic 9(1).\n \n \nworking\n-\nstorage section.\n \n \n01   ans pic x value space.\n \n \n01   eof pic x value space\n.\n \n \n \nscreen section.\n \n \n01  cls\n-\nscreen.\n \n \n \n \n02  blank screen.\n \n \n01  get\n-\nscreen.\n \n \n \n02  line 3 column 5 value \"Length = \".\n \n \n \n02   column plus 3 pic 9(2) to l auto bell.\n \n \n \n02  line 5 column 5 value \"Code = \".\n \n \n \n02  column plus 3 pic 9 to l\n-\nc bell reverse\n-\nvideo.\n \n \n \nprocedure division.\n \n \np\n-\n1.\n \n \n \nopen output len\n-\nfile.\n \n \n \nperform g\n-\nw\n-\npara until ans = 'n' or 'N'.\n \n \n \nclose len\n-\nfile.\n \n \n \n \nopen i\n-\no len\n-\nfile.\n \n \n \nread len\n-\nfile at end move 'y' to eof.\n \n \n \nperform rewrite\n-\npara until eof = 'y'.\n \n \n \nclose len\n-\nfile.\n \n \n \nstop run.\n \n \n \ng\n-\nw\n-\npara.\n \n \n \ndisplay cls\n-\nscreen.\n \n \n \ndisplay get\n-\nscreen.\n \n \n \naccept get\n-\nscreen.\n \n \n \nwrite len\n-\nrec.\n \n \n \ndisplay (10 5) \"Continue [y/n] :\".\n \n \n \naccept ans.\n \n \n \nrewrite\n-\npara.\n \n \n \nif l\n-\nc = 1 \n \n \n \n \nmove 5 to l\n-\nc\n \n \n \n \nrewrite len\n-\nrec.\n \n \n \nread len\n-\nfile at end move 'y' to eof.\n \n \n20\n.3 \nPROGRAM FOR\n  INDEXED SEQUENTIAL FILE CREATION \n \n        \n (DYNAMIC MODE)\n \nWrite a program to create an Indexed Sequential File in dynamic mode for Student \nparticulars. Assume just 3 fields : rno(Roll Number), cl (Class) and m(Mark). Read the file \nand display the records\n.\n \n This watermark does not appear in the registered version - http://www.clicktoconvert.com\n \n108\n \n \nidentification division.\n \n \nprogram\n-\nid.\n \n \nenvironment division.\n \n \ninput\n-\noutput section.\n \n \nfile\n-\ncontrol.\n \n \n \nselect stu\n-\nfile assign to disk\n \n \n \norganization is indexed\n \n \n \naccess mode is dynamic\n \n \n \nrecord key is rno\n \n \n \nfile status is fs.\n \n \n \ndata division.\n \n \nfile secti\non.\n \n \nfd stu\n-\nfile\n \n \n \nlabel records are standard\n \n \n \nvalue of file\n-\nid is 'stu.dat'.\n \n \n01 stu\n-\nrec.\n \n \n \n02  rno   pic 9(3).\n \n \n \n02  cl pic x(4).\n \n \n \n02  m  pic 9(3).\n \n \nworking\n-\nstorage section.\n \n \n01  ans pic x value space.\n \n \n01  a\n-\nrno pic 9(3) value 0.\n \n \n01  fs  pic x(2) val\nue spaces.\n \n \nprocedure division.\n \n \np\n-\n1.\n \n \n \nopen i\n-\no  stu\n-\nfile.\n \n \n \n \nif fs = \"30\"\n \n \n \n \n \nopen output stu\n-\nfile\n \n \n \n \n \nclose stu\n-\nfile\n \n \n \n \n \nopen i\n-\no stu\n-\nfile.\n \n \n \nperform g\n-\nw\n-\npara until ans = 'n'.\n \n \n \ngo to p\n-\n2.\n \n \ng\n-\nw\n-\npara.\n \n \n \ndisplay(1 1) erase.\n \n \n \ndisplay \"Enter Data :\".\n \n \n \nacc\nept rno.\n \n \n \naccept cl.\n \n \n \naccept m.\n \n \n \nwrite stu\n-\nrec invalid key\n \n \n \n \n \ndisplay \"Record Exists!\".\n \n \n \ndisplay \"Continue [y/n] : \".\n \n \n \naccept ans.\n \n \np\n-\n2.\n \n \n \ndisplay(1 1) erase.\n \n \n \ndisplay(3 5) \"Give Roll No : \".\n \n      \n \n \naccept a\n-\nrno.\n \n      \n \n \nmove a\n-\nrno to rno.\n \n \n \nread s\ntu\n-\nfile  key is rno\n \n \n \n \ninvalid key \n This watermark does not appear in the registered version - http://www.clicktoconvert.com\n \n109\n \n \n \n \n \ndisplay(10 5) \"No Record Found\"\n \n \n \n \n \ngo to c\n-\npara.\n \n \n \ndisplay(5 5) \"Rno = \" rno.\n \n \n \ndisplay(7 5) \"Class = \" cl.\n \n \n \ndisplay(9 5) \"Mark = \" m.\n \n      \nc\n-\npara.\n \n \n \ndisplay(20 5) \"Continue [y/n]: \".\n \n \n \naccept ans.\n \n \n \nif ans = 'y' \nor 'Y' go to p\n-\n2.\n \n \n \nclose stu\n-\nfile.\n \n \n \n \nstop run.\n \n20\n.4  \nPROGRAM FOR  INDEXED SEQUENTIAL FILE CREATION      \n \n         (RANDOM MODE)\n \nWrite a program to create an Indexed Sequential File in random  mode for Student \nparticulars.  Assume just 2 fields : rno(Roll\n Number), name(Name  of Student) \n \n \nidentification division.\n \n \nprogram\n-\nid.\n \n \nenvironment division.\n \n \ninput\n-\noutput section.\n \n \nfile\n-\ncontrol.\n \n \n \nselect stu\n-\nfile assign to disk\n \n \n \norganization is indexed\n \n \n \naccess mode is random\n \n \n \nrecord key is rno\n \n \n \nfile status is fs\n.\n \n \ndata division.\n \n \nfile section.\n \n \nfd stu\n-\nfile\n \n \n \nlabel records are standard\n \n \n \nvalue of file\n-\nid is \"stu.dat\".\n \n \n01 stu\n-\nrec.\n \n \n \n02 rno pic 9(3).\n \n \n \n02 name pic x(20).\n \n \nworking\n-\nstorage section.\n \n \n01 fs pic x(2) value spaces.\n \n \n01 ans pic x value space.\n \n \n \n \nprocedure\n division.\n \n \n \np\n-\n1.\n \n \n \nopen i\n-\no stu\n-\nfile.\n \n \n \nif fs = \"30\"\n \n \n \n \nopen output stu\n-\nfile\n \n \n \n \nclose stu\n-\nfile\n \n \n \n \nopen i\n-\no stu\n-\nfile.\n \n \n \nperform g\n-\nw\n-\npara until ans = \"n\".\n \n \n \nclose stu\n-\nfile.\n \n \n \nstop run.\n \n \ng\n-\nw\n-\npara.\n This watermark does not appear in the registered version - http://www.clicktoconvert.com\n \n110\n \n \n \ndisplay(1 1) erase.\n \n \n \ndisplay(3 5) \"Rno : \".\n \n \n \naccept rno.\n \n \n \ndisplay(5 5) \"Name : \".\n \n \n \naccept name.\n \n \n \nwrite stu\n-\nrec invalid key display(15 5) \"Error!\".\n \n \n \ndisplay(20 5) \"Continue [y/n] : \".\n \n \n \naccept ans.\n \n20\n.5  \nPROGRAM TO DEMONSTRATE  SORT VERB\n \nA file for which a record having 2 fields, namely, Account Number and Na\nme is already \navailable. Sort the file based on the ascending order of Account Number.\n \n \nidentification division.\n \n \nprogram\n-\nid.\n \n \nenvironment division.\n \n \ninput\n-\noutput section.\n \n \nfile\n-\ncontrol.\n \n \n \nselect o1\n-\nfile assign to disk\n \n \n \norganization is line sequential.\n \n \n \n \nselect s1\n-\nfile assign to disk\n \n \n \norganization is line sequential.\n \n \n \n \n \n \nselect w\n-\nfile assign to disk.\n \n \ndata division.\n \n \nfile section.\n \n \nfd o1\n-\nfile\n \n \n \nlabel records are standard\n \n \n \nvalue of file\n-\nid is \"o1.dat\".\n \n \n01  o1\n-\nrec.\n \n \n \n02 o1\n-\nacc\n-\nno pic 9(2).\n \n \n \n02 o1\n-\nname \npic x(4).\n \n \n \n \nfd s1\n-\nfile\n \n \n \nlabel records are standard\n \n \n \nvalue of file\n-\nid is \"s1.dat\".\n \n \n \n01  s1\n-\nrec.\n \n \n \n02 s1\n-\nacc\n-\nno pic 9(2).\n \n \n \n02 s1\n-\nname pic x(4).\n \n \n \n \nsd w\n-\nfile.\n \n \n \n01  w\n-\nrec.\n \n \n \n02 w\n-\nacc\n-\nno pic 9(2).\n \n \n \n02 w\n-\nname pic x(4).\n \n \n \nprocedure division.\n \n \np\n-\n1.\n \n        \n      \n This watermark does not appear in the registered version - http://www.clicktoconvert.com\n \n111\n \n                sort w\n-\nfile on ascending key w\n-\nacc\n-\nno using o1\n-\nfile\n \n \n \n \n \n \ngiving s1\n-\nfile.\n \n \n \n \nstop run.\n \n \n \n20\n.6  \nPROGRAM TO DEMONSTRATE  MERGE VERB\n \nTwo files for which a record having 2 fields namely Account Number and Name are  \nalready available. Merg\ne these two files and create a new file based on the ascending order of \nAccount Number.\n \n \nidentification division.\n \n \nprogram\n-\nid.\n \n \nenvironment division.\n \n \ninput\n-\noutput section.\n \n \nfile\n-\ncontrol.\n \n \n \nselect o1\n-\nfile assign to disk\n \n \n \norganization is line sequential.\n \n \n \n \nselect o2\n-\nfile assign to disk\n \n \n \norganization is line sequential.\n \n \n \n \n \nselect s1\n-\nfile assign to disk\n \n \n \norganization is line sequential.\n \n \n \n \nselect s2\n-\nfile assign to disk\n \n \n \norganization is line sequential.\n \n \n \n \nselect m\n-\nfile assign to disk\n \n \n \norganization is li\nne sequential.\n \n \n \n \n \n \nselect w\n-\nfile assign to disk.\n \n \ndata division.\n \n \nfile section.\n \n \nfd o1\n-\nfile\n \n \n \nlabel records are standard\n \n \n \nvalue of file\n-\nid is \"o1.dat\".\n \n \n01  o1\n-\nrec.\n \n \n \n02 o1\n-\nacc\n-\nno pic 9(2).\n \n \n \n02 o1\n-\nname pic x(4).\n \n \n \n \nfd o2\n-\nfile\n \n \n \nlabel records are standar\nd\n \n \n \nvalue of file\n-\nid is \"o2.dat\".\n \n \n01  o2\n-\nrec.\n \n \n \n02 o2\n-\nacc\n-\nno pic 9(2).\n \n \n \n02 o2\n-\nname pic x(4).\n \n \n \nfd s1\n-\nfile\n \n \n \nlabel records are standard\n This watermark does not appear in the registered version - http://www.clicktoconvert.com\n \n112\n \n \n \nvalue of file\n-\nid is \"s1.dat\".\n \n \n01  s1\n-\nrec.\n \n \n \n02 s1\n-\nacc\n-\nno pic 9(2).\n \n \n \n02 s1\n-\nname pic x(4).\n \n \n \n \nfd s2\n-\nfile\n \n \n \nlabel reco\nrds are standard\n \n \n \nvalue of file\n-\nid is \"s2.dat\".\n \n \n01  s2\n-\nrec.\n \n \n \n02 s2\n-\nacc\n-\nno pic 9(2).\n \n \n \n02 s2\n-\nname pic x(4).\n \n \n \nfd m\n-\nfile\n \n \n \nlabel records are standard\n \n \n \nvalue of file\n-\nid is \"m.dat\".\n \n \n01  m\n-\nrec.\n \n \n \n02 m\n-\nacc\n-\nno pic 9(2).\n \n \n \n02 m\n-\nname pic x(4).\n \n \n \nsd w\n-\nfile.\n \n \n \n0\n1  w\n-\nrec.\n \n \n \n02 w\n-\nacc\n-\nno pic 9(2).\n \n \n \n02 w\n-\nname pic x(4).\n \n \n \nprocedure division.\n \n \np\n-\n1.\n \n              \n \n                sort w\n-\nfile on ascending key w\n-\nacc\n-\nno using o1\n-\nfile\n \ngiving s1\n-\nfile.\n \n                sort w\n-\nfile on ascending key w\n-\nacc\n-\nno using o2\n-\nfile\n \ngivin\ng s2\n-\nfile.\n \n \n   \nmerge w\n-\nfile on ascending key w\n-\nacc\n-\nno  using s1\n-\nfile  s2\n-\nfile giving m\n-\nfile.\n \n \nstop run.\n \n \n \n20\n.7  \n \nLET US SUM UP\n \nWith the help of the above programs, the learner gets very clear ideas about how to \ncreate a sequential file , how to rewrite rec\nords , how to cerate indexed sequential file in \ndynamic and random modes. Also the learner \nbecomes\n quite familiar with the concepts of \nSorting and Merging after having tried these programs.\n \n20\n.8  \n \nLESSON\n-\nEND ACTIVITIES\n \nTry to find the answers for the follo\nwing exercises on your own.\n \n \n1)\n \nWrite a program to create a sequential file for bank details. Assume the necessary \nfields.\n \n2)\n \nWrite a program to read the records of a bank file and display the customers who \nhave amount > 10000 in their account.\n This watermark does not appear in the registered version - http://www.clicktoconvert.com\n \n113\n \n3)\n \nUsing Indexed Seq\nuential Organization create an employee file. Assume \nnecessary details.\n \n4)\n \nWrite a program to sort the marks of students in the ascending order.\n \n5)\n \nWrite a program to merge two student files based on\n the ascending order of \nmarks.\n \n20.9 POINTS FOR DISCUSSION\n \n1) Di\nscuss in detail about the creation and rewriting of a sequential file in COBOL.\n \n20.\n10\n \nREFERENCES\n \n1.\n \nCOBOL Programming , M.K.Roy  & Ghosh Dastidar , Tata McGraw Hill, 2\nnd\n \nEdition,1998\n \n2.\n \nCOBOL Programming , V. RAJARAMAN, PHI Pub\n \n3.\n \nIntroduction to COBOL programming \n–\n Dr. R.Krishnamoorthy, JJ Publ\n \n4.\n \nStructured COBOL , Welburn, TataMcGraw Hill , 4\nth\n Edition.\n \n \n This watermark does not appear in the registered version - http://www.clicktoconvert.com\n \n114\n \nUNIT\n \n–\n V\n \nLESSON \n–\n \n21\n: \nTABLE HANDLING\n \nCONTENTS\n \n21\n.0  \n \nAims and objectives\n \n2\n1.1  \n \nOccurs clause\n \n2\n1.2 \n \nRules for OCCURS clause\n \n2\n1.3 \n \nMULTI\n-\nDIMMENSIONAL TABLES\n \n2\n1.4 \n \nLet us Sum Up\n \n2\n1.5 \n \nLesson\n-\nend Activities\n \n21.6\n \nPoints for Discussion\n \n2\n1\n.\n7\n \nReferences\n \n21.0\n \nAIMS AND OBJECTIVES\n \nIt becomes quite often necessary to handle a group consisting of similar items. Such a \ngroup is called a \ntable\n. The aim of this lesson is to intro\nduce the learner Occurs clause and \nrules for Occurs clause .\n \n2\n1.1  Occurs Clause\n \nLet us introduce tables with the help of an example. Suppose there are ten different types \nof income\n-\ntax rates which are read from some input medium and these rates are stored\n in a \ntable named INCOME\n-\nTAX\n-\nRATE. The DATA DIVISION entries for this table may be as \nfollows:\n \n01              INCOME\n-\nTAX\n-\nRATE\n \n \n02\n \nTAX\n-\nRATE\n-\n1\n \n \n \nPIC\n \n99.\n \n02\n \nTAX\n-\nRATE\n-\n2\n \n \n \nPIC\n \n99.\n \n02\n \nTAX\n-\nRATE\n-\n3\n \n \n \nPIC\n \n99.\n \n02\n \nTAX\n-\nRATE\n-\n4\n \n \n \nPIC\n \n99.\n \n02\n \nTAX\n-\nRATE\n-\n5\n \n \n \nPIC\n \n99.\n \n02\n \nTAX\n-\nR\nATE\n-\n6\n \n \n \nPIC\n \n99.\n \n02\n \nTAX\n-\nRATE\n-\n7\n \n \n \nPIC\n \n99.\n \n02\n \nTAX\n-\nRATE\n-\n8\n \n \n \nPIC\n \n99.\n \n02\n \nTAX\n-\nRATE\n-\n9\n \n \n \nPIC\n \n99.\n \n02\n \nTAX\n-\nRATE\n-\n10\n \n \nPIC\n \n99.\n \nObviously, there are ten different data names, such as TAX\n-\nRATE\n-\n1, TAX\n-\nRATE\n-\n2 \netc., in the table named INCOME\n-\nTAX\n-\nRATE and each of these items i\ns of two digits. Since \nthe picture of all these items are identical, these can be described by having just one entry and \nthen specifying that the description is to be repeated ten times. This is done as follows:\n \n01              INCOME\n-\nTAX\n-\nRATE\n \n \n02\n \nTAX\n-\nRATE\n \n \nPIC\n \n99\n \nOCCURS\n \n10\n \nTIMES.\n \n This watermark does not appear in the registered version - http://www.clicktoconvert.com\n \n115\n \nThis OCCURS clause indicates that the table named INCOME\n-\nTAX\n-\nRATE is having \nten elements and each one is of two digits. Now in order to refer to an individual element \nuniquely we must use a subscript. The first element is referre\nd to as TAX\n-\nRATE (1), the \nsecond one as TAX\n-\nRATE (2), the seventh one as TAX\n-\nRATE (7), and so on. TAX\n-\nRATE \n(1), TAX\n-\nRATE (2) etc., are known as \nsubscripted data names\n and 1, 2 etc., which are \nenclosed in parentheses are called \nsubscripts\n.\n \n \nThe general form\nat of OCCURS clause is as follows:\n \n \n \n \n{OC}\n \n \n \n \ninteger \n \nTIMES\n \n \n{OCCURS}\n \n2\n1\n.2 \nRULES FOR OCCURS CLAUSE\n \nThe following rules apply for the OCCURS clause and the subscripts.\n \n(i) \n \nThe integer in the OCCURS clause must be a positive integer.\n \n \n(ii) \n \nThe OCCURS clau\nse can be specified for an elementary item or for a group \nitem. The clause causes contiguous fields to be set up internally. Each field is \nequivalent to the elementary or group item for which the OCCURS clause has \nbeen specified. The number of fields that \nare set up is equal to the integer in \nthe OCCURS clause. The OCCURS clause cannot be specified for an item \nwhose level number is 01, 66, 77 or 88.\n \n \n(iii) \n \nWhen a data name is defined with the occurs clause that data name as well as \nany of its subordinate i\ntems cannot be referred to in the PROCEDURE \nDIVISION without a subscript. A subscript may be a positive integer constant, \na numeric integral data item or an arithmetic expression. For example, an \nelement of the above INCOME\n-\nTAX\n-\nRATE table, can be referred \nto in the \nPROCEDURE DIVISION as\n \n \n \n \n \nTAX\n-\nRATE\n \n(I) \n \nor\n \nas\n \n(3*J)\n \n \n      \n \nIn the first case, a data name I has been used as the subscript. If the current \nvalue of I is, say 5, then TAX\n-\nRATE (I) will refer to the fifth element of the \ntable. In the second case, \nan arithmetic expression has been used as a \nsubscript. The value of this expression is used to identify the particular \nelement of the table. Thus, if the current value of J is 1, TAX\n-\nRATE (3*J) will \nrefer to the third element of the table.\n \n \n(iv) \n \nThe highe\nst value that a subscript can take is the one specified in the \nOCCURS clause. For any table, the lowest value of a subscript is implicitly \nassumed to be 1. By the range of a subscript we mean the range of values from \n1 to the highest possible value of the \nsubscript. In the above example, the \nrange of the subscript is 1 to 10. If during the execution of a program, the \nvalue of a subscript is found to be outside its range, an execution error occurs \nand the program is terminated by the system.\n \n \n(v) \n \nThe subscr\nipts should be enclosed in a set of parentheses. In general, blank \nspace may not follow the left parenthesis whereas there must be a space \npreceding the left parenthesis and following the right one.\n \n This watermark does not appear in the registered version - http://www.clicktoconvert.com\n \n116\n \n(vi) \n \nIf a data name with the OCCURS clause requires any\n qualification by its \nhigher level, the subscripts to be written after the last qualified name. For \nexample, if TAX\n-\nRATE should be qualified, it must appear as TAX\n-\nRATE \nOF INCOME\n-\nTAX\n-\nRATE (I) and not as TAX\n-\nRATE (I) OF INCOME\n-\nTAX\n-\nRATE.\n \n \n(vii) \n \nWhen an entr\ny is defined with the OCCURS clause, the VALUE clause cannot \nbe specified for that particular item or any item subordinate to it.\n \n \n(viii) \n \nThe REDEFINES clause cannot appear in the same data description entry \nwhich contains an OCCURS clause. However, the R\nEDEFINES clause can \nappear for a group item whose subordinate items are defined with the occurs \nclause.\n \n \n \n(ix) \n \nThe OCCURS clause can appear in the data description entry in any order.\n \n \n \n \nExample:\n \n \nConsider the following table:\n \n \n \n02\n \n \nAMOUNT\n-\nTABLE\n \nOCCURS\n \n20\n \nTIMES.\n \n \n \n \n03\n \nAMOUNT\n \nPIC\n \n9(6) V99\n \n \n \n \n \n03\n \nAMOUNT\n-\nCODE\n \nPIC\n \nX.\n \nSuppose it is required to find the total of all the amounts of the table in the following \nmanner. If the amount code is 1, the corresponding amount is to be considered positive, \notherwise the corr\nesponding amount should be considered negative. (Note that the amount \nfields being unsigned contain only absolute value.) The following statements will perform the \nsaid task. It is assumed that the field named TOTAL and I are suitably defined, say with \npic\nture S9 (7) V 99 and 99 respectively.\n \n \n \n \nMOVE \n \nZERO\n \nTO\n \nTOTAL.\n \nMOVE\n \n1\n \nTO\n \nI.\n \n \n \nPARA\n-\nLOOP\n \n   \n \nIF\n \nAMOUNT\n-\nCODE\n \n(I)\n \n IS\n \nEQUAL\n \nTO\n \n“1”\n \n \n \nADD\n \nAMOUNT\n \n(I)\n \nTO \n \nTOTAL\n \n \nELSE\n \nSUBTRACT\n \nAMOUNT\n \n(I)\n \nFROM\n \n TOTAL.\n \n \nADD\n \n1\n \nTO\n \nI\n \n \nIF\n \nI\n \nIS\n \nNOT\n \nGREATER\n \nTHAN\n \n20\n \n \n \n \nGO\n \nTO\n \nPARA\n-\nLOOP.\n \n \nI\nt may be noted how to use of the data name as a subscript helps to write the above code. \nThe reader may try to find the required total without using data name or arithmetic expression \nas subscripts. In that case the loop cannot be designed and one must use\n twenty IF sentences \nto do the job.\n This watermark does not appear in the registered version - http://www.clicktoconvert.com\n \n117\n \n2\n1\n. 3  MULTI\n-\nDIMENSIONAL TABLES\n \nThe kind of table that has been considered above is called a \none\n-\ndimensional table\n. \nWhen a table is such that each of its elements in turn is a table of one dimension, it is called a \ntwo\n-\ndimensional table. The following is an example of a two\n-\ndimensional table.\n \n01\n \nSALES\n-\nTABLE\n \n             02\n \nBRANCH\n-\nFIGURES\n \nOCCURS\n \n18\n \nTIMES.\n \n \n \n03\n \nMONTHLY\n-\nSALES\n \nPIC\n \n9(6)\n \nV99\n \nOCCURS\n \n12\n \nTIMES.\n \nThe table is assumed to store monthly sales figures for 12 months for ea\nch of the 18 \nbranches of an organization. Note that this is a two\n-\ndimensional table because each of the 18 \nBRANCH\n-\nFIGURES is itself a table having 12 elements. It may be further noted that a \nreference to an element of a two\n-\ndimensional table requires tow s\nubscripts. We must specify \nthe branch as well as the month so that the desired element is identified. Thus MONTHLY\n-\nSALES (3, 5) means the sales figure for fifth month of the third branch. Because of the \norganization specified in the above description of th\ne table, the first subscript implicitly refers \nto the branch and the second subscript to the month. The two\n-\ndimensional table has been \ndivided first into 18 one\n-\ndimensional tables through the entry at level 02. Each of these tables \nhas then been defined by\n the entry at level 03. This organization can be diagrammatically \nshown as\n \n \n \n9 more\n \nOccurrences\n \n… of MONTHLY SALES\n \n9 more\n \nOccurrences\n \n…of MONTHLY SALES\n \n16 more Occurrences\n \nBRANCH\n-\nFIGURES\n \n…\n \n                                                         \n \n \n  (B\nRANCH\n-\nFIGURE\n-\n1)\n \n         \n(BRANCH\n-\nFIGURE\n-\n2)\n \nIf required, the tables for the individual branches can be referred to by the name \nBRANCH\n-\nFIGURE with only one subscript indicating the branch. Thus BRANCH\n-\nFIGURE \n(4) will indicate the monthly sales table for the \nfourth branch.\n \nThe above notion of a two\n-\ndimensional table can be easily extended to tables having \nthree or more dimensions. Handling of tables up to three dimensions are allowed by most \ncompilers; some even allow more than three. The following rules may b\ne noted in connection \nwith multi\n-\ndimensional tables.\n \n(i)\n \nMulti\n-\ndimensional tables are to be defined as records with OCCURS clauses \nat various levels. As we go down the hierarchy, each lower level item with an \nOCCURS clause specifies an additional dimension. Fo\nr example, consider the \nfollowing table.\n \n \n \n01\n \nTABLE\n-\nEXAMPLE\n \n02\n \nA\n \nPIC\n \n9(5)\n \nOCCURS\n \n \n50\n \nTIMES\n \n02\n \nB\n \nOCCURS\n \n20\n \nTIMES\n \n \n03\n \nC\n \nPIC\n \n9(3)\n \n \n This watermark does not appear in the registered version - http://www.clicktoconvert.com\n \n118\n \n \n03\n \nD OCCURS\n \n10\n \nTIMES.\n \n \n \n \n04  E  OCCURS\n \n15\n \nTIMES PIC 9(4)V99.\n \n \n \n04\n \nF\n \nPIC\n \nX (4).\n \nA and C are one\n-\ndimensional, F is a two\n-\ndimensional \ntable and E is a three dimensional \ntable. B and D are group items which can be referred to as one\n-\ndimensional and two \ndimensional tables respectively. \n \n        (ii)\n \nA table is stored in such a way that a subscript on the right of another subscript \nchanges \nmore rapidly than the latter.\n \n \nThe organization of the SALES\n-\nTABLE shown above illustrates this. The elements \nMONTHLY\n-\nSALES (1, 12) are stored first. The elements MONTHLY\n-\nSALES (2, 1) to \nMONTHLY\n-\nSALES (2, 12) are stored next, and so on. Note that the secon\nd subscript is \nchanged more frequently than the first subscript. This fact should be taken into consideration \nwhile redefining a multi\n-\ndimensional table.\n \n \n(ii)\n \nMultiple subscripts should be separated from one another either by a comma \nor space.\n \n2\n1\n.4 \nLET US SUM \nUP\n \n This lesson has introduced the learner  the Occurs clause, rules  for OCCURS clause \nand  multi\n-\ndimensional tables. These are necessary to write many application programs.\n \n \n2\n1\n.5 \nLESSON\n-\nEND ACTIVITIES\n \nTry to find the answers for the following exercises o\nn your own.\n \n1.\n \nWhy we need OCCURS clause?\n \n2.\n \nState the rules for OCCURS clause.\n \n3.\n \nGive the syntax for OCCURS clause.\n \n21.6 POINTS FOR DISCUSSION\n \n1) Explain the usage of OCCURS clause with example.\n \n2) Write notes on\n \n \na) Single dimensional one dimensional table.\n \n \nb) \nMultidimensional table.\n \n3) What do you mean by a TABLE? How to manipulate tables in COBOL? Explain.\n \n2\n1\n.\n7\n \nREFERENCES\n \n1.\n \nCOBOL Programming , M.K.Roy  & Ghosh Dastidar , Tata McGraw Hill, \n \n2\nnd\n Edition,1998\n \n2.\n \nCOBOL Programming , V. RAJARAMAN, PHI Pub\n \n3.\n \nIntroduction t\no COBOL programming \n–\n Dr. R.Krishnamoorthy, JJ Publ\n \n4.\n \nStructured COBOL , Welburn, TataMcGraw Hill , 4\nth\n Edition.\n This watermark does not appear in the registered version - http://www.clicktoconvert.com\n \n119\n \nLESSON \n–\n \n2\n2\n: \nINDEXED TABLES AND INDEX NAMES\n \nCONTENTS\n \n2\n2.0  \n \nAims and objectives\n \n2\n2.1 \n \nIndexed Tables\n \n2\n2.2 \n \nRules for Indexed Tables\n \n2\n2.3. \n \nSET v\nerb\n \n2\n2.4 \n \nLet us Sum Up\n \n2\n2.5 \n \nLesson\n-\nend Activities\n \n22.6\n \nPoints for Discussion\n \n22.\n7\n \nReferences\n \n2\n2.0  \nAIMS AND OBJECTIVES\n \nThe aim of this lesson is to introduce the learner  Indexed Tables, Rules for Indexed \nTables and  SET verb. Along with their syntaxes a\nnd rules governing them\n,\n these will be \ndiscussed in this lesson.\n \n2\n2.1  \nINDEXED TABLES\n \nThe OCCURS clause which is used to define tables can optionally have an INDEXED \nphrase. This phrase includes the names of data items of data items that are to be used as \nsubscripts to identify table elements. Such a data item is called an \nindex. \nThe following \nexample illustrates the table description with the INDEXED phrase.\n \n01\n \nENROLL\n-\nTABLE.\n \n02\n \nFACULTY OCCURS 3 TIMES INDEXED BY F1.\n \n03\n \nDEPARTMENT OCCURS 6 TIMES INDEXED BY D\n1.\n \n \n \n04\n \nYEAR PIC 9(4) OCCURS 5 TMES.\n \n \n \n \n \nINDEXED BY Y1.\n \n \nThe reference to an element of this table can be done as YEAR (F1, D1, Y1) having \nset appropriate values to the index names F1, D1 and Y1.\n \n \nThe general form of the INDEXED \n \nphrase is as follows:\n \n \nIND\nEXED\n BY index\n-\nname\n-\n1 [, index\n-\nname\n-\n2]…\n \n \nThe OCCURS clause with the INDEXED phrase takes the following form\n \n \nOC\n \n \nOCCURS}\n \ninteger \n \nTIMES\n \n \n \n \n \n[INDEXED BY index\n-\nname\n-\n1 [, index\n-\nname\n-\n2]…]\n \n2\n2.2 \nRULES FOR INDEXED TABLES\n \nThe following are the rules of  indexing a\n table with the INDEXED phrase:\n \n \n(i)\n \nIf indexing is done for any one level of a table, then indexing must be used for all \nlevels. Thus it will be error if in the above the INDEXED phrase is used only for \nFACULTY and not for DEPARTMENT and YEAR.\n \n This watermark does not appear in the registered version - http://www.clicktoconvert.com\n \n120\n \n(ii)\n \nIndex names can\nnot be used in combination with subscripts. Thus a reference as \nYEAR (F1, S2, S3) will be treated as an error as F1 is an index name but S2 and \nS3 are data names. However, index names can be used in combination with \nnumeric positive integral literals. Thus\n YEAR (F1, 2, 3) is valid because F1 is an \nindex name, whereas 2 and 3 are numeric integral literals.\n \n(iii)\n \nIndexes are valid only for the tables where they have been specified. Indexes for \none table cannot be used for another table. Thus F1, D1 and Y1, being in\ndexes for \nthe table ENROLL\n-\nTABLE, cannot be used for other tables in the same program.\n \n(iv)\n \nThe index names must be unique. The same index name must not be used for \ndifferent levels of a table.\n \n(v)\n \nThe indexes must not appear anywhere in the DATA DIVISION except in\n the \nINDEXED phrase of the OCCURS clause. This means that the index names \nshould be implicitly defined and should not be defined explicitly.\n \n(vi)\n \nIndexes can be manipulated only by the SET, SEARCH and PERFORM \nstatements. The value of an index is often called th\ne occurrence number. The \ninternal representation of the occurrence number is system dependent.\n \n(vii)\n \nAn index can be coded plus or minus an integer literal for the relative addressing \nof the table elements. For example, YEAR (F1+1, D1\n-\n2, Y1\n-\n1) is valid. If F1, D\n1 \nand assume the value 1,3 and 4 respectively then this will refer to the third YEAR \nof the first DEPARTMENT of the second FACULTY.\n \n(viii)\n \nThere can be more than one index for each level. For example, the ENROLL\n-\nTABLE can also be defined as\n \n \n01\n \nENROLL\n-\nTABLE.\n \n02FACUL\nTY OCCURS 3 TIMES INDEXED BY F1, F2, F3.\n \n02\n \nDEPRTMENT OCCURS 6 TIMES INDEXED BY                        \nD1, D2, and D3\n \n03\n \nDEPRTMENT OCCURS 6 TIMES INDEXED \nBY D1, D2, and D3\n \n04\n \nYEAR PIC 9(4) OCCURS 5 TIMES \nINDEXED BY Y1, Y2, and Y3.\n \nIndex items defined throu\ngh the INDEXED phrase of the OCCURS clause are one kind \nof indexes. There can be another kind of index items which are defined like data names in the \nDATA DIVISION with USAGE IS INDEX clause. Note that earlier we discussed only the \nDISPLAY and COMPUTATIONA\nL usages. Index is another type of usage. An index name \ndefined with INDEX usage should not have nay picture clause in the entry.\n \nFor example, the entry\n \n \n77\n \nI\n \nUSAGE\n \nIS\n \nINDEX\n \ndefines the index I.\n \nThe indexes defined with the usage INDEX are called \nindex dat\na items\n. They are \nfunctionally identical to the indexes defined through the INDEXED phrase with the exception \nthat when an index name is defined with the USAGE IS INDEX phrase, the same index name \ncan be used for subscripts in more than one table or in mor\ne than one level of table.\n \n2\n2.3. SET VERB\n \nThe set verb is used to set, increase or decrease the values of the indexes. For example, \nthe statement\n \n This watermark does not appear in the registered version - http://www.clicktoconvert.com\n \n121\n \n \n \nSET \n \nF1\n \nTO\n \n4\n \n \nwill set the value of the index F1 to 4.\n \nThere are several forms of the SET verb:\n \n(I)\n \nTo set one \nparticular value to tone one or more index names we can use the \nfollowing form.\n \n           \nSET\n \nindex\n-\nname\n-\n1\n \n[, index\n-\nname\n-\n2]…\n \nTO\n {identifier\n-\n1 integer\n-\n1}\n \n \nFor example,\n \nSET\n \nF1, Y1 TO 3.\n \nOnly positive integral values can be set to an index.\n \n \n(II)\n \nTo move the curr\nent value of an index to one or more identifiers, the following \nform of the SET verb can be used.\n \nSET\n \nidentifier\n-\n2\n \n[, identifier\n-\n3]…\n \nTO\n \nindex\n-\nname\n-\n3\n \n \n \n \n      If A and B are data names and F1 is an index name, the statement\n \n \n \nSET\n \n A, B TO F1\n \n \nIndicates that\n the current value of F1 will be stored in both the data names A and B.\n \n \n(III)\n \nWhen it becomes necessary to increment or decrement one or more indexes by a \npositive integer value, the following form may be applied.\n \nSET\n \nindex\n-\nname\n-\n4\n \n[, index\n-\nname\n-\n5] … {\nUP\n \nBY}\n{\nDOW\nN\n \nBY} \n{identifier\n-\n4 integer\n-\n2}\n \nThe phrase UP BY is used to increment the values of the indexes and the phrase DOWN \nBY is used to decrement their values.\n \nThus, to increment the current value of F1 and Y1 by 2, the following statement may be \nused.\n \n \n \nSET\n \n F1,\n Y1\n \nUP\n \nBY\n \n2.\n \n \n \nOn the other hand, the statement\n \n \n \nSET\n \n D1\n \nDOWN\n \nBY\n \nA\n \nIndicates that the current value of the index D1 will be decremented by the current value \nof the data name A. If before the execution of the above statement, A and D1 contain 3 and 7 \nrespe\nctively, then after the execution of this statement, D1 will contain 4.\n \n2\n2\n.4 \nLET US SUM UP\n \nThis lesson has taught the learner in detail about  Indexed Tables, Rules for Indexed \nTables and  SET verb. The learner can now be in a position to employ them where\nver any \napplication program finds suitability of these discussed verbs.\n \n2\n2\n.5 \nLESSON\n-\nEND ACTIVITIES\n \nTry to find the answers for the following exercises on your own.\n \n1.\n \nWhat do you mean by Indexed Table?\n \n2.\n \nState the rules for Indexed Tables.\n \n3.\n \nWhat is the use of SE\nT Verb?\n \n4.\n \nSpecify different forms of SET verb.\n \n This watermark does not appear in the registered version - http://www.clicktoconvert.com\n \n122\n \n22.6 POINTS FOR DISCUSSION\n \n1) Differentiate table from indexed Table.\n \n22.7\n \nREFERENCES\n \n1.\n \nCOBOL Programming , M.K.Roy  & Ghosh Dastidar , Tata McGraw Hill, \n \n2\nnd\n Edition,1998\n \n2.\n \nCOBOL Programming , V. RAJARAMAN, PHI Pu\nb\n \n3.\n \nIntroduction to COBOL programming \n–\n Dr. R.Krishnamoorthy, JJ Publ\n \n4.\n \nStructured COBOL , Welburn, TataMcGraw Hill , 4\nth\n Edition.\n This watermark does not appear in the registered version - http://www.clicktoconvert.com\n \n123\n \n \nLESSON \n–\n \n2\n3\n: \nSEARCH AND START VERBS\n \nCONTENTS\n \n2\n3.0 \n \nAims and objectives \n \n2\n3.1. \n \nSearch Verb\n \n2\n3.2 \n \nRules for SEARCH verb\n \n2\n3.3 \n \nST\nART Statement\n \n2\n3.4 \n \nLet us Sum Up\n \n2\n3.5 \n \nLesson\n-\nend Activities\n \n23.6\n \nPoints for Discussion\n \n23.\n7\n \nReferences\n \n2\n3.0 \nAIMS AND OBJECTIVES\n \nThe learner will be introduced Search Verb, rules for SEARCH verb and START \nStatement in this lesson. With the syntaxes and ex\namples of these verbs, the concepts will be \ndiscussed.\n \n2\n3.1 SEARCH VERB\n \nThe SEARCH verb is used to locate elements in one\n-\ndimensional tables. Let us consider \nthe following problem. Suppose each element of a table consists of three fields, namely, the \naccou\nnt number of a person, the name of that and the amount that he has deposited. There are \nfour hundred such elements in the table and we want to find out whether a particular name is \npresent in the table or not. The desired name is given in the field is call\ned NAME and if this \nname appears in an element of the table, we would like to display the name as well as the \ncorresponding account number and amount. The DATA DIVISION entries for this problem \nare as follows:\n \n \nDATA DIVISION\n \n \n \n.\n \n \n \n.\n \n \n \n.\n \n \n \n.\n \n \n \n \n \n77\n \nNAME\n \n \nPI\nC\n \nX (20).\n \n \n \n01\n \nSAVINGS\n-\nBANK\n-\nACCOUNT.\n \n \n \n \n02\n \nACCOUNT\n-\nTABLE OCCURS 400 TIMES\n \n \n \n \n \n \n \nINDEXED BY A1.\n \n \n \n \n \n03\n \nACCOUNT\n-\nNUMBER \n \nPIC\n \n9(6).\n \n \n \n \n \n03\n \nNAME\n-\nOF\n-\nTHE\n-\nPERSON\n \nPIC\n \nX (20).\n \n \n \n \n \n03\n \nAMOUNT\n \n \n \nPIC\n \n9(6).99. \n \nThe following PROCEDURE DIVISION statements can be a solutio\nn to the above \nproblem.\n \n This watermark does not appear in the registered version - http://www.clicktoconvert.com\n \n124\n \nPROCEDURE DIVISION\n \n \n.\n \n \n.\n \n \n.\n \nSET\n \nA1 TO 1.\n \nSEARCH ACCOUNT\n-\nTABLE\n \n \nAT\n \nEND DISPLAY “NAME NOT FOUND”\n \n \nNAME=NAME\n-\nOF\n-\nTHE\n-\nPERSON (A1)\n \n \nDISPLAY ACCOUNT\n-\nNUMBER (A1), NAME,\n \n \n \nAMOUNT (A1).\n \nIn the above SEARCH statement, there are two parts\n-\n th\ne AT END part and the WHEN \npart. If the condition NAME= NAME\n-\nOF\n-\nTHE\n-\nPERSON (A1) is satisfied for some value of \nthe index name A1, the statement DISPLAY ACCOUNT\n-\nNUMBER (A1), NAME, \nAMOUNT (A1) is executed. The AT END part is executed only when the entire tab\nle is \nsearched and the condition is not satisfied for any value of A1. The increment of A1 is taken \ncare of by the SEARCH verb.\n \nTo illustrate another use of the SEARCH verb, suppose we wish to search the same table \nto find the number of persons whose depos\nited amount is greater than 5000.00. For this we \ndescribe another data NO\n-\nOF\n-\nPERSONS in the DATA DIVISION with the picture say 999. \nThe following statements in the PROCEDURE DIVISION will perform the desired search.\n \n \n \nMOVE ZEROS TO NO\n-\nOF\n-\nPERSONS\n \n \n \nSET A1 T\nO 1.\n \n \nPARA\n-\nREPEAT\n \n \n \nSEARCH ACCOUNT\n-\nTABLE\n \n \n \n \nAT END GO TO PARA\n-\nNEXT\n \n \n \nWHEN AMOUNT (A1) IS\n-\nGREATER THAN 5000.00\n \n \n \n \nADD 1 TO NO\n-\nOF\n-\nPERSONS\n \n \n \n \nSET A1 UP BY 1\n \n \n \n \nGO TO PARA\n-\nREPAEAT\n \nPARA NEXT\n \n \n.\n \n \n.\n \n \n.\n \n \n.\n \nSEARCH\n \nidentifier\n-\n1\n \n[\nVARYING  \n \n   identifier\n-\n2 index\n-\nname\n-\n1}]\n \n \n[; AT \nEND\n \nimperative\n-\nstatement\n-\n1]\n \n;\n \nWHEN \n \nCondition\n-\n1\n \n{imperative\n-\nstatement\n-\n2 \n \nNEXT    SENTENECE}\n \n[; when\n \nCondition\n-\n2\n \n{imperative\n-\nstatement\n-\n2\n \nNEXT\n \n \nSENTENCE}\n]…\n \n2\n3.2  \nRULES FOR SEARCH VERB\n \nThe following rules apply for the SEARCH verb.\n \n(I)\n \nThe SEARCH verb \ncan only be applied to a table which has the OCCURS clause \nand INDEXED phrase. The identifier\n-\n1 indicates the table to be searched and it \nmust not be indexed or subscripted.\n \n(II)\n \nBefore the use of the SEARCH verb, the index must have some initial value. The \nini\ntial value must not exceed the size of the table. If it exceeds, the search is This watermark does not appear in the registered version - http://www.clicktoconvert.com\n \n125\n \nterminated immediately. Then if the AT END clause is specified, statements after \nAT END will be executed; otherwise the control passes to the next sentence.\n \n(III)\n \nIf the AT END condit\nion is specified, as in the case of the first example, and if the \nelement which is being searched is not found in the table, the statement after the \nAT END clause will be executed if statements after AT END do not transfer the \ncontrol elsewhere in the prog\nram. On the other hand, if AT END is not used and \nthe end of the table is reached, the control will be automatically transferred to the \nnext sentence.\n \n(IV)\n \nThe SEARCH verb starts with the initial value of the index and tests whether the \nconditions stated in the\n WHEN clauses have been satisfied or not. If none of the \nconditions are satisfied the index is incremented automatically by 1. The process \nis continued until the index value exceeds the size of the table, the statements \nfollowing the condition in the relev\nant WHEN clauses are executed. If these \nstatements do not transfer the control elsewhere, after their execution, it is \ntransferred to the next sentence. The value of the index remains set at the point \nwhere the condition has been satisfied.\n \n(V)\n \nConnected with \nthe VARYING option, identifier\n-\n2 can be either a data, an \nintegral elementary item or an index data item (described with USAGE AS \nINDEX CLAUSE). The purpose of specifying the VARYING clause is that \nidentifier\n-\n2 is also incremented each time the index of th\ne table is incremented.\n \n2\n3.3  \nSTART STATEMENT\n \nThe format of the START statement is given below.\n \nSTART \n  file\n-\nname [\nKEY\n IS {\nEQUAL TO\n \n \n \n \n \n \n \n=\n \n \n \n \n \n \n \nGREATER THAN\n \n \n \n \n \n \n \n>\n \n \n \n \n \n \n \nNOT LESS THAN\n \n \n \n \n \n \nNOT < THAN} data\n-\nname]\n \n \n \n \n[; INVALID KEY imperative statement]\n \nT\nhe START statement enables the programmer to position the relative file at some \nspecified point so that subsequent sequential operations on the file can start form this point \ninstead of the beginning. The KEY IS phrase indicates how the file is to be posit\nioned. The \ndata name in this phrase must be the data name in the RELATIVE KEY phrase of the \nSELECT clause. When the EQULA TO OF NOT LESS THAN condition is specified, the file \nis GREATER THAN condition is specified, the file is positioned at the next relati\nve position \nindicated by the relative key data item. Thus\n \nSTART MY\n-\nFILE KEY IS GREATER THAN REL\n-\nKEY\n \n \n;\n \nINVALID KEY GO TO INVALID PARA.\n \n \nwill position the file at the fifty\n-\nfirst record position if the relative key data item REL\n-\nKEY \ncontains 50.\n \nThe INVALID\n KEY condition arises if the specified record position if the specified \nrecord position is empty. In that case the imperative statement after the INVALID KEY \nphrase is executed.\n \nThe START statement requires that the file must be opened in the INPUT or I\n-\nO \nmode. \nThe access mode can only be SEQUENTIAL or DYNAMIC\n This watermark does not appear in the registered version - http://www.clicktoconvert.com\n \n126\n \n2\n3.4  \n \nLET US SUM UP\n \nIn this lesson the learner has been introduced the  Search Verb, Rules for SEARCH verb \nand  START Statement.  With this knowledge the learner can make use of these concepts in \napp\nlication programs.\n \n2\n3.5  \n \nLESSON\n-\nEND ACTIVITIES\n \nTry to find the answers for the following exercises on your own.\n \n1.\n \nWhat is the role of SEARCH verb?\n \n2.\n \nGive the syntax of SEARCH verb.\n \n3.\n \nState the rules for SEARCH verb.\n \n4.\n \nExplain with syntax START statement\n \n23.6 POIN\nTS FOR DISCUSSION\n \n1) Explain the process of locating the elements in one\n-\ndimensional table with example.\n \n23.\n7\n \nREFERENCES\n \n1.\n \nCOBOL Programming , M.K.Roy  & Ghosh Dastidar , Tata McGraw Hill, \n \n2\nnd\n Edition,1998\n \n2.\n \nCOBOL Programming , V. RAJARAMAN, PHI Pub\n \n3.\n \nIntroduct\nion to COBOL programming \n–\n Dr. R.Krishnamoorthy, JJ Publ\n \n4.\n \nStructured COBOL , Welburn, TataMcGraw Hill , 4\nth\n Edition.\n This watermark does not appear in the registered version - http://www.clicktoconvert.com\n \n127\n \nLESSON \n–\n \n2\n4\n: \nPROGRAMS USING OCCURS & \n \nSCREEN SECTION\n \nCONTENTS\n \n2\n4.0 \n \nAims and objectives\n \n2\n4.1 \n \nOccurs clause \n–\n Program\n-\n1\n \n2\n4.2 \n \nOccurs clause\n \n–\n program\n-\n2\n \n2\n4.3 \n \nOccurs \n–\n Indexed by Program\n \n2\n4.4 \n \nProgram for Screen Section\n \n2\n4.5 \n \nProgram for Screen Section with files\n \n2\n4.6 \n \nLet us Sum Up\n \n2\n4.7 \n \nLesson\n-\nend Activities\n \n24.8\n \nPoints for Discussion\n \n24.\n9\n \nReferences\n \n2\n4.0 \nAIMS AND OBJECTIVES\n \nIn this lesson t\nhe learner will be introduced the programs for occurs clause, occurs \nindexed by clause and Screen section. These programs also make use of the SET and \nSEARCH verbs. The learner is expected to type these programs and try them on the system.\n \n2\n4.1 \nOCCURS CLAU\nSE \n–\n PROGRAM\n-\n1\n \nWrite a \nprogram\n to demonstrate occurs clause. Get names of the students and display \nthem on the screen.\n \n \nidentification division.\n \n \nprogram\n-\nid.\n \n \nenvironment division.\n \n \ndata division.\n \n \nworking\n-\nstorage section.\n \n \n01  n  pic  9(2) value 0.\n \n \n01  i\n  pic  9(2) value 0.\n \n \n01  name\n-\nin.\n \n \n  02 name pic x(20) occurs 20 times.\n \n \n01  key\n-\nin pic x value space.\n \n \n \n \n \nprocedure division.\n \n \np\n-\n1.\n \n \n \ndisplay(1 1) erase.\n \n \n \ndisplay(3 5) \"Enter How many times\".\n \n \n \naccept n.\n \n \n \ndisplay(1 1) erase.\n \n \n \nperform get\n-\npara n times.\n \n \n \ndisplay(1 1) erase.\n \n \n \nmove 0 to i.\n \n \n \nperform disp\n-\npara n times.\n This watermark does not appear in the registered version - http://www.clicktoconvert.com\n \n128\n \n \n \nstop run.\n \n \nget\n-\npara.\n \n \n \naccept name(i).\n \n \n \nadd 1 to i.\n \n \ndisp\n-\npara.\n \n \n \ndisplay name(i).\n \n \n \naccept key\n-\nin.\n \n \n \nadd 1 to i.\n \n2\n4.2 \nOCCURS CLAUSE \n–\n PROGRAM\n-\n2\n \nWrite a program to demonstrate occurs cla\nuse. Get names and marks of the students and \ndisplay them on the screen.\n \n \nidentification division.\n \n \nprogram\n-\nid.\n \n \nenvironment division.\n \n \ndata division.\n \n \nworking\n-\nstorage section.\n \n \n01  n  pic  9(2) value 0.\n \n \n01  i  pic  9(2) value 1.\n \n \n01  stu\n-\ndet.\n \n \n   02 stu\n-\nrec occurs 10 times.\n \n \n \n03 name pic x(20).\n \n \n \n03 mark pic 9(3).\n \n \n01  key\n-\nin pic x value space.\n \n \n \n \n \nprocedure division.\n \n \np\n-\n1.\n \n \n \ndisplay(1 1) erase.\n \n \n \ndisplay(3 5) \"Enter How many times\".\n \n \n \naccept n.\n \n \n \ndisplay(1 1) erase.\n \n \n \nperform get\n-\npara n times.\n \n \n \ndisplay(\n1 1) erase.\n \n \n \nmove 1 to i.\n \n \n \nperform disp\n-\npara n times.\n \n \n \nstop run.\n \n \nget\n-\npara.\n \n \n \naccept name(i).\n \n \n \naccept mark(i).\n \n \n \nadd 1 to i.\n \n \ndisp\n-\npara.\n \n \n \ndisplay name (i).\n \n \n \ndisplay mark (i).\n \n \n \naccept key\n-\nin.\n \n \n \nadd 1 to i.\n \n2\n4.3 \nOCCURS \n–\n INDEXED BY PROGRAM\n \n \nidentifica\ntion division.\n \n \nprogram\n-\nid. searching.\n \n \nenvironment division.\n This watermark does not appear in the registered version - http://www.clicktoconvert.com\n \n129\n \n \ndata division.\n \n \nworking\n-\nstorage section.\n \n \n01 table1.\n \n \n     02 data1 occurs 10  times indexed by a1. \n \n \n \n03  name pic x(25).\n \n \n \n03  sal  pic 9(6).\n \n01   n   pic 9 value 0.\n \n \n        \n \n01   tot pic 9(\n2) value 0.\n \n        \n \n01   i   pic 9 value 0.\n \n \nprocedure division.\n \n \np\n-\n1.\n \n \n \ndisplay(1 1) erase.\n \n \n \ndisplay(5 5) \"Enter Data .....\".\n \n \n \ndisplay(7 5) \"Enter No.of Records : \".\n \n \n \naccept n.\n \n                \n \nperform init\n-\npara varying i from 1 by 1 until i > n.\n \n \n \npe\nrform get\n-\npara varying i from 1 by 1 \n \n \n \n \n \nuntil i > n.\n \n \n \nset a1 to 1.\n \n        p\n-\n2.\n \n \n        search data1 at end go to p\n-\n3\n \n \n \nwhen  sal (a1) > 1000  \n \n \n \n \n add 1 to tot.\n \n \n        set a1 up by 1\n \n \n        go to p\n-\n2.\n \n \np\n-\n3.\n \n \n \ndisplay(20 5) \"Total Records > 1000 [s\nal] = \" tot.\n \n               \n \nstop run.\n \n \n \n \n \n \n \n \nget\n-\npara.\n \n \n \ndisplay(1 1) erase.\n \n \n \ndisplay(3 5) \"Name : \".\n \n \n \naccept name (i).\n \n \n \ndisplay(5 5) \"Salary : \".\n \n \n \naccept sal (i).\n \n \n \ninit\n-\npara.\n \n                \n \nmove spaces to name(i).\n \n \n \nmove 0 to sal(i).\n \n24\n.4 \nPROGRAM \nFOR SCREEN SECTION\n \n \nidentification division.\n \n \nprogram\n-\nid.\n \n \nenvironment division.\n \n \ndata division.\n \n \n \nworking\n-\nstorage section.\n \n \n01  a pic 9(2) value 0.\n \n \n01  b pic 9(2) value 0.\n \n \n01  c  pic 9(3) value 123.\n This watermark does not appear in the registered version - http://www.clicktoconvert.com\n \n130\n \n \nscreen section.\n \n \n01   b\n-\nscreen.\n \n \n \n02  blank screen.\n \n \n \n01   screen1.\n \n  \n \n    02   line 3 column 5  pic 9(2) to a auto bell. \n \n \n    02   line 5 column 5 pic 9(2) to b auto bell.\n \n \n \n01   screen2.\n \n \n   02   line 7 column 5  pic 9(2) from a blink reverse\n-\nvideo.\n \n \n   02   line 9 column 5 pic 9(2) from b highlight blink\n.\n \n \n \nprocedure division.\n \n \np0.\n \n \n \n     \n \ndisplay b\n-\nscreen.\n \n \np1.\n \n \n \ndisplay screen1.\n \n \n \naccept screen1.\n \n \n \ndisplay screen2.\n \n \n \ncompute c = a + b.\n \n \n \ndisplay \" \".\n \n \n \ndisplay \" c = \" c.\n \n \n \ndisplay \"Using exhibit\".\n \n \n \nexhibit c.\n \n \n \n \nstop run.\n \n24\n.5 \nPROGRAM FOR SCREEN SECTIO\nN WITH FILES\n \n \nidentification division.\n \n \nprogram\n-\nid.\n \n \nenvironment division.\n \n       \n \ninput\n-\noutput section.\n \n \nfile\n-\ncontrol.\n \n \n \nselect stu\n-\nfile assign to disk\n \n \n \nfile status is fs.\n \n \ndata division.\n \n \nfile section.\n \n \nfd stu\n-\nfile\n \n \n \nlabel records are standard\n \n \n \nvalue o\nf file\n-\nid is 'stu.dat'.\n \n \n01 stu\n-\nrec.\n \n \n \n \n02   name  pic x(20).\n \n \n       \n \n02   mark  pic 9(3).\n \n \nworking\n-\nstorage section.\n \n        \n \n01   ans  pic  x value space.\n \n \n01   eof  pic  x value space.\n \n \n01   fs   pic  x(2) value spaces.\n \n \nscreen section.\n \n        \n \n01 get\n-\nscreen.\n \n           \n \n \n02   line 3 column 5 value \"Name : \".\n This watermark does not appear in the registered version - http://www.clicktoconvert.com\n \n131\n \n \n   \n \n02   line 3 column 15   pic x(5)\n \n                 \n \n       \nto  name auto bell reverse\n-\nvideo.\n \n           \n \n \n02   line 5 column 5 value \"Mark : \".\n \n \n   \n \n02   line 5 column 15  pic 9(3) to mark bell\n blink.\n \n           \n \n \n02   line 7 column 5 value \"Continue [y/n] : \".\n \n \n   \n \n02   column  plus 3  pic x to ans  bell blink.\n \n  \n \n01 b\n-\nscreen.\n \n           \n \n \n02  blank screen.\n \n        \n \n01 put\n-\nscreen.\n \n           \n \n \n02   line 3 column 25 value \"Name : \" highlight.\n \n \n \n  \n \n02   column plus 2 pic x(20) from name blink.\n \n          \n \n \n02   line 5 column 25 value \"Mark : \"  blink.\n \n           \n \n \n02   column plus 2 pic 9(3) from mark underline.\n \n        procedure division.\n \n \np\n-\n1.\n \n \n      display b\n-\nscreen.\n \n \n      open output stu\n-\nfile.\n \n \n      display \" File Staus Value  ... Exhibit ... display..\".\n \n \n      exhibit fs.\n \n \n      display fs.\n \n \n      display \" Press a Key!\".\n \n \n      accept ans.\n \n              \n    \nperform g\n-\nw\n-\npara until ans = 'n'.\n \n \n      close stu\n-\nfile.\n \n \n \n      move space to ans.\n \n \n      open input stu\n-\nfile.\n \n \n      read stu\n-\nfile at end move 'y' to eof.\n \n              \n    \nperform disp\n-\npara until eof  = 'y'.\n \n \n      close stu\n-\nfile.\n \n \n      stop run.\n \n    \n \n \n        g\n-\nw\n-\npara.\n \n \n      display b\n-\nscreen.\n \n \n      display get\n-\nscreen.\n \n \n      accept \nget\n-\nscreen.\n \n \n      write stu\n-\nrec.\n \n        disp\n-\npara.     \n \n \n      display (1 1) erase.\n \n              \n    \ndisplay put\n-\nscreen.\n \n \n      display (15 5) \"Press any Key ! \".\n \n \n      accept ans.\n \n \n      read stu\n-\nfile at end move 'y' to eof.\n \n2\n4.6 \nLET US SUM UP\n \nThe abo\nve lesson has introduced the learner the programs related with Occurs clause,\n \nOccurs \n–\n Indexed, Screen Section and  Screen Section with files. These programs will give \nconfidence to the learner to make use of them in industry applications wherever need ari\nses.\n This watermark does not appear in the registered version - http://www.clicktoconvert.com\n \n132\n \n2\n4.7 \n \nLESSON\n-\nEND ACTIVITIES\n \nTry to find the answers for the following exercises on your own.\n \n1.\n \nWrite a program to read the names and marks of 5 students. Display them \nusing OCCURS clause.\n \n2.\n \nWrite a program to display a welcome message using Screen Sectio\nn features.\n \n3.\n \nWrite a program using Screen Section the creation of a College file. Assume \nnecessary details.\n \n24.8 POINTS FOR DISCUSSION\n \n1) Discuss the usage of screen section COBOL.\n \n24.\n9\n \nREFERENCES\n \n1.\n \nCOBOL Programming , M.K.Roy  & Ghosh Dastidar , Tata McGraw \nHill, \n \n2\nnd\n Edition,1998\n \n2.\n \nCOBOL Programming , V. RAJARAMAN, PHI Pub\n \n3.\n \nIntroduction to COBOL programming \n–\n Dr. R.Krishnamoorthy, JJ Publ\n \n4.\n \nStructured COBOL , Welburn, TataMcGraw Hill , 4\nth\n Edition.\n This watermark does not appear in the registered version - http://www.clicktoconvert.com\n \n133\n \nLESSON \n–\n \n2\n5\n: \nLIST OF PROGRAMS\n \nCONTENTS\n \n2\n5.0 \n \nAims and objectives\n \n2\n5.1 \n \nProgram for Add Corresponding\n \n2\n5.2 \n \nProgram for Move Corresponding\n \n2\n5.3 \n \nProgram for Condition names \n \n2\n5.4 \n \nProgram using Occurs Clause\n \n2\n5.5 \n \nProgram for Master File Maintenance \n \n2\n5.6 \n \nProgram for Master File Maintenance (Alternate Key usage)\n \n2\n5.7 \n \nProgram  to find Interest on Bank Deposits\n \n2\n5.8 \n \nProgram for Inventory \n \n2\n5.9 \n \nProgram to rewrite  Pay Rate\n \n2\n5.10 \n \nProgram for Electricity Bill \n \n2\n5.11 \n \nProgram to create 2 files using an Existing File\n \n2\n5.12 \n \nLet us Sum Up\n \n2\n5.13 \n \nLesson\n-\nend Activities\n \n25.1\n4\n \nReferences\n \n2\n5.0 \nAIMS AND OBJECTIVES\n \nThe main aim of this lesson is to introduce the learner the various programs that make \nuse of the concepts he/she has learnt so far. There are 11 programs in this lesson. The learner \nis expected to try all these programs\n in system.\n \n2\n5.1 \nPROGRAM FOR ADD CORRESPONDING\n \nWrite a simple program to demonstrate Add Corresponding.\n \n \nidentification division.\n \n \nprogram\n-\nid.\n \n \nenvironment division.\n \n \ndata division.\n \n \nworking\n-\nstorage section.\n \n \n01  rec\n-\n1.\n \n \n \n02   sno   pic  9(2) value 11.\n \n \n \n0\n2   mark1 pic 9(2) value 1.\n \n   \n \n \n01  rec\n-\n2.\n \n \n \n05   sno   pic  9(2)  value 10.\n \n \n \n05   mark2 pic 9(2) value 2.\n \n \nprocedure division.\n \n \np\n-\n1.\n \n \n \ndisplay(1 1) erase.\n \n \n \n \ndisplay(3 5) mark1 of rec\n-\n1.\n \n \n \nadd corr rec\n-\n1 to rec\n-\n2.\n \n \n \ndisplay(5 5) mark2 of rec\n-\n2.\n This watermark does not appear in the registered version - http://www.clicktoconvert.com\n \n134\n \n \n \ndispla\ny (10 5) sno of rec\n-\n2.\n \n \n \nstop run.\n \n2\n5.2 \nPROGRAM FOR MOVE CORRESPONDING\n \nWrite a simple program to demonstrate Move Corresponding.\n \n \nidentification division.\n \n \nprogram\n-\nid.\n \n \nenvironment division.\n \n \ndata division.\n \n \nworking\n-\nstorage section.\n \n \n01  rec\n-\n1.\n \n \n \n02   sno \n  pic  9(2) value 11.\n \n \n \n02   name  pic  x(4) value \"Ravi\".\n \n \n   \n \n \n \n01  rec\n-\n2.\n \n \n \n05   sno   pic  z(2).\n \n \n \n05   f    pic  x(10) value spaces.\n \n  \n \n        \n \n05 \n  \nname   pic  x(4).\n \n \n \n05   f    pic  x(10) value spaces.\n \n \n \n \n \nprocedure division.\n \n \np\n-\n1.\n \n \n \ndisplay(1 1) e\nrase.\n \n \n \n \nmove corr rec\n-\n1 to rec\n-\n2.\n \n \n \ndisplay rec\n-\n2.\n \n \n \nstop run.\n \n2\n5.3 \nPROGRAM FOR CONDITION NAMES \n \nWrite a simple program to demonstrate Condition names usage.\n \n \nidentification division.\n \n \nprogram\n-\nid.\n \n \nenvironment division.\n \n \ndata division.\n \n \nworking\n-\nstorage se\nction.\n \n \n01   ms     pic  9(2).\n \n \n88   s    value 0 thru  9 .\n \n \n88   m    value 10 thru 99.\n \n \nprocedure division.\n \n \np\n-\n1.\n \n \n \ndisplay(1 1) erase.\n \n \n \ndisplay(5 5) \"Enter Marriage Status : \".\n \n \n \ndisplay(7 5) \" 0 to 9   .... Single Person \".\n \n \n \ndisplay(8 5) \" 10 to 99 .\n... Married Person\".\n \n \n \naccept ms.\n \n \n \nif s   display(10 5) \"Single\".\n \n \n \nif m   display(10 5) \"Married\".\n \n \n \nstop run.\n \n This watermark does not appear in the registered version - http://www.clicktoconvert.com\n \n135\n \n2\n5.4 \nPROGRAM USING OCCURS CLAUSE\n \nWrite a simple program to demonstrate Occurs Clause. Get the employee details for 3 \npersons and calculate th\ne total salary.\n \n \nidentification division.\n \n \nprogram\n-\nid. emp\n-\noccurs.\n \n \nenvironment division.\n \n \ndata division.\n \n \nworking\n-\nstorage section.\n \n \n01  emp\n-\nrec.\n \n \n \n02 emp\n-\ndet occurs 3 times.\n \n \n \n \n05 emp\n-\nname  pic x(20).\n \n \n \n \n05 emp\n-\nsal   pic 9(5)v9(2).\n \n \n \n01 head\n-\n1   pic x(80)\n value all \"\n-\n\".\n \n \n01 head\n-\n2.\n \n \n \n02  f  pic x(15) Value spaces.\n \n \n \n02  f  pic x(20) value \"NAME\".\n \n \n \n02  f  pic x(15) Value spaces.\n \n \n \n02  f  pic x(10) value \"SALARY\".\n \n \n \n02  f pic x(20) value spaces.\n \n \n \n01 head\n-\n3.\n \n \n \n02  f pic x(15) value spaces.\n \n \n \n02  e\n-\nname pic \nx(20).\n \n \n \n02  f  pic x(15) Value spaces.\n \n \n \n02  e\n-\nsal   pic z(5).z(2).\n \n \n \n02  f  pic x(22) Value spaces.\n \n \n01   i  pic 9 value 1.\n \n \n01   tot\n-\nsal pic 9(6)v9(2) value 0.\n \n \n01   e\n-\ntot\n-\nsal pic z(6).z(2).\n \n \n \nprocedure division.\n \n \npara\n-\n1.\n \n \n \ndisplay(1 1) erase.\n \n \n \ndisplay\n(3 5) \"Enter Data for 3 Employees...\".\n \n \n \nperform get\n-\npara 3 times.\n \n \n \n \ndisplay head\n-\n1.\n \n \n \ndisplay head\n-\n2.\n \n \n \ndisplay head\n-\n1.\n \n \n \n \nmove 1 to i.\n \n \n \nperform disp\n-\npara until i > 3.\n \n \n \ndisplay head\n-\n1.\n \n \n \n \nmove tot\n-\nsal to e\n-\ntot\n-\nsal.\n \n \n \ndisplay \"Total Salary = \" e\n-\ntot\n-\nsal\n.\n \n \n \ndisplay \" \".\n \n \n \nstop run.\n This watermark does not appear in the registered version - http://www.clicktoconvert.com\n \n136\n \n \n \nget\n-\npara.\n \n \n \ndisplay(1 1) erase.\n \n \n \ndisplay(5 5) \"Name :  \".\n \n \n \naccept emp\n-\nname(i).\n \n \n \ndisplay(10 5) \"Salary : \".\n \n \n \naccept emp\n-\nsal(i).\n \n \n \nadd 1 to i.\n \n \n \n \n \ndisp\n-\npara.\n \n \n \nmove  emp\n-\nname(i) to e\n-\nname.\n \n \n \nmove  emp\n-\nsal(i)  to e\n-\nsal.\n \n \n \nco\nmpute tot\n-\nsal = tot\n-\nsal + emp\n-\nsal(i).\n \n \n \ndisplay head\n-\n3.\n \n \n \nadd 1 to i.\n \n2\n5.5 \nPROGRAM FOR MASTER FILE MAINTENANCE \n \nWrite a program to maintain the stu\n-\nfile for which a record has just 2 fields, namely, \nrno(Roll Number) and name(Student Name). Give the provisi\nons to add, modify, delete the \nrecords in the file\n \n \nidentification division.\n \n \nprogram\n-\nid.\n \n \nenvironment division.\n \n \ninput\n-\noutput section.\n \n \nfile\n-\ncontrol.\n \n \n \nselect stu\n-\nfile assign to disk\n \n \n \norganization is indexed\n \n \n \naccess mode is random\n \n \n \nrecord key is rno\n \n \n \nfile status is fs.\n \n \n \ndata division.\n \n \nfile section.\n \n \n \nfd stu\n-\nfile\n \n \n \nlabel records are standard\n \n \n \nvalue of file\n-\nid is \"stu.dat\".\n \n \n01 stu\n-\nrec.\n \n \n \n02 rno pic 9(3).\n \n \n \n02 name pic x(20).\n \n \n \nworking\n-\nstorage section.\n \n \n01 fs pic x(2) value spaces.\n \n \n01 ans pic x value\n space.\n \n \n \n \n01 ch pic 9 value 0.\n \n \n \nprocedure division.\n \n \n \nopen\n-\npara.\n \n \n \nopen i\n-\no stu\n-\nfile.\n \n \n \nif fs = \"30\"\n This watermark does not appear in the registered version - http://www.clicktoconvert.com\n \n137\n \n \n \n \nopen output stu\n-\nfile\n \n \n \n \nclose stu\n-\nfile\n \n \n \n \nopen i\n-\no stu\n-\nfile.\n \n \np\n-\n1.\n \n \n \ndisplay(1 1) erase.\n \n \n \ndisplay(3 5) \"Main Menu\".\n \n \n \ndisplay(5 5) \"1 to Add\".\n \n \n \ndisp\nlay(7 5) \"2 to Modify\".\n \n \n \ndisplay(9 5) \"3 to Delete\".\n \n \n \ndisplay(11 5) \"4 to Exit\".\n \n \n \ndisplay(13 5) \"Your Choice [1..4] : \".\n \n \n \naccept ch.\n \n \n \nif ch < 0 or ch > 4 go to p\n-\n1.\n \n \n \ngo to add\n-\npara modi\n-\npara del\n-\npara exit\n-\npara\n \n \n \n \ndepending on ch.\n \n \nadd\n-\npara.\n \n \n \ndisplay\n(1 1) erase.\n \n \n \ndisplay(3 5) \"Rno : \".\n \n \n \naccept rno.\n \n \n \ndisplay(5 5) \"Name : \".\n \n \n \naccept name.\n \n \n \nwrite stu\n-\nrec invalid key display(15 5) \"Error!\".\n \n \n \ndisplay(20 5) \"Continue Add Records [y/n] : \".\n \n \n \naccept ans.\n \n \n \nif ans = \"y\" go to add\n-\npara else go to p\n-\n1.\n \n \nm\nodi\n-\npara.\n \n \n \ndisplay(1 1) erase.\n \n \n \ndisplay(3 5) \"Enter Roll no to Modify\".\n \n \n \naccept rno.\n \n \n \nread stu\n-\nfile key is rno \n \n \n \n \ninvalid key display(13 5) \"No Record Found\"\n \n \n \n \n \n    go to c\n-\npara.\n \n \n \ndisplay(5 5) \"Rno = \" rno.\n \n \n \ndisplay(7 5) \"Name = \" name.\n \n \n \ndisplay(9\n 5) \"Sure to Modify [y/n] : \".\n \n \n \naccept ans.\n \n \n \nif ans  = 'y'\n \n \n \n \ndisplay(1 1) erase\n \n \n \n \ndisplay(5 5) \"Name : \"\n \n \n \n \naccept name\n \n \n \n        rewrite stu\n-\nrec.\n \n \nc\n-\npara.\n \n \n \ndisplay(15 5) \"Continue Modification [y/n] : \".\n \n \n \naccept ans.\n \n \n \nif ans = 'y' go to modi\n-\npara e\nlse go to p\n-\n1.\n \n \ndel\n-\npara.\n \n \n        display(1 1) erase.\n \n \n \ndisplay(3 5) \"Enter Roll no to Delete\".\n \n \n \naccept rno.\n \n \n \nread stu\n-\nfile key is rno \n This watermark does not appear in the registered version - http://www.clicktoconvert.com\n \n138\n \n \n \n \ninvalid key display(13 5) \"No Record Found\"\n \n \n \n \n \n    go to c\n-\npara1.\n \n \n \ndisplay(5 5) \"Rno = \" rno.\n \n \n \ndisplay(7 5) \"Na\nme = \" name.\n \n \n \ndisplay(9 5) \"Sure to Delete [y/n] : \".\n \n \n \naccept ans.\n \n \n \nif ans  = 'y'\n \n \n \n \ndelete stu\n-\nfile record.\n \n \nc\n-\npara1.\n \n \n \ndisplay(15 5) \"Continue  Deletion  [y/n] : \".\n \n \n \naccept ans.\n \n \n \nif ans = 'y' go to del\n-\npara else go to p\n-\n1.\n \n \n \n \n \nexit\n-\npara.\n \n \n \nclose stu\n-\nfile.\n \n \n \nstop run.\n \n2\n5.6 \nPROGRAM FOR MASTER FILE MAINTENANCE  &  ALTERNATE \n \n   \n      \nKEY USAGE \n \nWrite a program to maintain the stu\n-\nfile for which a record has just 2 fields, namely, \nrno(Roll Number) and name(Student Name). Give the provisions to add, modif\ny, delete the \nrecords in the file. Make use of the alternate key option for your program.\n \n \n \nidentification division.\n \n \nprogram\n-\nid.\n \n \nenvironment division.\n \n \ninput\n-\noutput section.\n \n \nfile\n-\ncontrol.\n \n \n \nselect stu\n-\nfile assign to disk\n \n \n \norganization is indexed\n \n \n \nacce\nss mode is random\n \n \n \nrecord key is rno\n \n \n \nalternate record key is name with duplicates \n \n \n \nfile status is fs.\n \n \ndata division.\n \n \nfile section.\n \n \n \nfd stu\n-\nfile\n \n \n \nlabel records are standard\n \n \n \nvalue of file\n-\nid is \"stu.dat\".\n \n \n01 stu\n-\nrec.\n \n \n \n02 rno pic 9(3).\n \n \n \n02 name \npic x(20).\n \n \n \nworking\n-\nstorage section.\n \n \n01 fs pic x(2) value spaces.\n \n \n01 ans pic x value space.\n \n \n \n \n01 ch pic 9 value 0.\n \n This watermark does not appear in the registered version - http://www.clicktoconvert.com\n \n139\n \n \nprocedure division.\n \n \n \nopen\n-\npara.\n \n \n \nopen i\n-\no stu\n-\nfile.\n \n \n \nif fs = \"30\"\n \n \n \n \nopen output stu\n-\nfile\n \n \n \n \nclose stu\n-\nfile\n \n \n \n \nopen i\n-\no stu\n-\nfile.\n \n \np\n-\n1.\n \n \n \ndisplay(1 1) erase.\n \n \n \ndisplay(3 5) \"Main Menu\".\n \n \n \ndisplay(5 5) \"1 to Add\".\n \n \n \ndisplay(7 5) \"2 to Modify\".\n \n \n \ndisplay(9 5) \"3 to Delete\".\n \n \n \ndisplay(11 5) \"4 to Exit\".\n \n \n \ndisplay(13 5) \"Your Choice [1..4] : \".\n \n \n \naccept ch.\n \n \n \nif ch < 0 or ch > 4 go to p\n-\n1.\n \n \n \ngo to add\n-\npara modi\n-\npara del\n-\npara exit\n-\npara\n \n \n \n \ndepending on ch.\n \n \nadd\n-\npara.\n \n \n \ndisplay(1 1) erase.\n \n \n \ndisplay(3 5) \"Rno : \".\n \n \n \naccept rno.\n \n \n \ndisplay(5 5) \"Name : \".\n \n \n \naccept name.\n \n \n \nwrite stu\n-\nrec invalid key display(15 5) \"Error!\".\n \n \n \ndisplay(20 5) \"Continu\ne Add Records [y/n] : \".\n \n \n \naccept ans.\n \n \n \nif ans = \"y\" go to add\n-\npara else go to p\n-\n1.\n \n \nmodi\n-\npara.\n \n \n \ndisplay(1 1) erase.\n \n \n \ndisplay(3 5) \" Press 1 if you know Roll No , 2 if you\n \n      \n \n \n-\n    \"    know Name \".\n \n \n \naccept ch.\n \n \n \nif ch = 1 \n \n \n \n \n   display(5 5) \"Ente\nr Roll no to Modify\"\n \n \n \naccept rno\n \n \n \nread stu\n-\nfile key is rno \n \n \n \n \ninvalid key display(13 5) \"No Record Found\"\n \n \n \n \n \n    go to c\n-\npara\n \n \n \nelse if ch = 2\n \n \n \n display(5 5) \"Enter Name to Modify\"\n \n \n \naccept name \n \n \n \nread stu\n-\nfile key is name  \n \n \n \n \ninvalid key display(13\n 5) \"No Record Found\"\n \n \n  \n \n \n \n    go to c\n-\npara.\n \n \n        \n \ndisplay(1 1) erase.\n \n  \n \n \n \ndisplay(5 5) \"Rno = \" rno.\n \n \n \ndisplay(7 5) \"Name = \" name.\n \n \n \ndisplay(9 5) \"Sure to Modify [y/n] : \".\n This watermark does not appear in the registered version - http://www.clicktoconvert.com\n \n140\n \n \n \naccept ans.\n \n \n \nif ans  = 'y'\n \n \n \n \ndisplay(1 1) erase\n \n \n \n \ndisplay(5 5) \"Name :\n \"\n \n \n \n \naccept name\n \n \n \n        rewrite stu\n-\nrec.\n \n \nc\n-\npara.\n \n \n \ndisplay(15 5) \"Continue Modification [y/n] : \".\n \n \n \naccept ans.\n \n \n \nif ans = 'y' go to modi\n-\npara else go to p\n-\n1.\n \n \ndel\n-\npara.\n \n \n        \n \ndisplay(1 1) erase.\n \n \n \ndisplay(3 5) \" Press 1 if you know Roll No , 2 i\nf you\n \n      \n-\n    \"    know Name \".\n \n \n \naccept ch.\n \n \n \nif ch = 1 \n \n \n \n \n   display(5 5) \"Enter Roll no to Delete\"\n \n \n \naccept rno\n \n \n \nread stu\n-\nfile key is rno \n \n \n \n \ninvalid key display(13 5) \"No Record Found\"\n \n \n \n \n \n    go to c\n-\npara1\n \n \n \nelse if ch = 2\n \n \n \n display(5 5) \"Enter \nName to Delete\"\n \n \n \naccept name \n \n \n \nread stu\n-\nfile key is name \n \n \n \n \ninvalid key display(13 5) \"No Record Found\"\n \n \n \n \n \n    go to c\n-\npara1.\n \n \n \ndisplay(1 1) erase.\n \n \n \ndisplay(5 5) \"Rno = \" rno.\n \n \n \ndisplay(7 5) \"Name = \" name.\n \n \n \ndisplay(9 5) \"Sure to Delete [y/n] : \".\n \n \n \naccept ans.\n \n \n \nif ans  = 'y'\n \n \n \n \ndelete stu\n-\nfile record.\n \nc\n-\npara1.\n \n \n \ndisplay(15 5) \"Continue  Deletion  [y/n] : \".\n \n \n \naccept ans.\n \n \n \nif ans = 'y' go to del\n-\npara else go to p\n-\n1.\n \n \n \n \n \nexit\n-\npara.\n \n \n \nclose stu\n-\nfile.\n \n \n \nstop run.\n \n2\n5.7 \nPROGRAM  TO FIND INTEREST ON BANK \nDEPOSITS\n \n      \n \nWrite a program to find interest on deposits\n \n   \n \nThe criteria is given below :\n \n \n This watermark does not appear in the registered version - http://www.clicktoconvert.com\n \n141\n \n    ______________________________________________\n \n      \n \nPrincipal       Years of Deposit      IntRate\n \n     ______________________________________________\n \n  \n     \n \n>=5000            >=3                 \n \n10%\n \n       \n \n>=5000            <3                   \n \n \n8%\n \n      \n \n <5000             Any                  \n \n7%\n \n    ______________________________________________\n \n   \n \nidentification division.\n \n \nprogram\n-\nid.\n \n \nenvironmen\nt division.\n \n \ninput\n-\noutput section.\n \n \nfile\n-\ncontrol.\n \n \n \nselect bankfile assign to disk\n \n \n \norganization is line sequential.\n \n \ndata division.\n \n \nfile section.\n \n \nfd bankfile\n \n \n \n \nlabel records are standard\n \n \n \nvalue of file\n-\nid is \"bank.dat\".\n \n \n01 bankrec.\n \n \n \n02 dno   pic 9(\n5).\n \n \n \n02 dname pic x(21).\n \n \n \n02 p     pic 9(4)v9(2).\n \n \n \n02 n     pic 9(2).\n \n \n \nworking\n-\nstorage section.\n \n \n01   ans pic x value space.\n \n \n01   tot pic 9(6)v9(2) value 0.\n \n \n01   int pic 9(6)v9(2) value 0.\n \n \n01   key\n-\nin pic x value space.\n \n \n01 r pic 9(2) value 0.\n \n \n01 h\nead\n-\n1 pic x(80) value all '\n-\n'.\n \n \n01 head\n-\n2.\n \n \n \n \n02  f pic x(8) value \"Deps No\".\n \n \n \n02  f pic x(3) value spaces.\n \n \n \n02  f pic x(10) value \"Deps Name\".\n \n \n \n02  f pic x(5) value spaces.\n \n \n \n02  f pic x(8) value \"Deposit\".\n \n \n \n02  f pic x(5) value spaces.\n \n \n \n02  f pic  x\n(8) value \"Period\".\n \n \n \n02  f pic x(5) value spaces.\n \n \n \n02  f pic x(5) value \"Rate\".\n \n \n \n02  f pic x(5) value spaces.\n \n \n \n02  f pic x(8) value \"Interest\".\n \n \n \n02  f pic x(10) value \"  Nett\".\n \n \n01  head\n-\n3.\n \n \n \n02  e\n-\ndno  pic z(5).\n \n \n \n02  e\n-\ndname pic x(26).\n \n \n \n02  e\n-\np  pi\nc  z(4).z(2).\n This watermark does not appear in the registered version - http://www.clicktoconvert.com\n \n142\n \n \n \n02  f pic x(5) value spaces.\n \n \n \n02  e\n-\nn  pic z(2).\n \n \n \n02  f pic x(5) value spaces.\n \n \n \n02  e\n-\nr pic z(2).\n \n \n \n02  f pic x(3) value spaces.\n \n \n \n02  e\n-\nint  pic z(4).z(2).\n \n \n \n02  f pic x(3) value spaces.\n \n \n \n02  e\n-\ntot pic z(6).z(2).\n \n \n \nprocedure division.\n \n \np\n-\n1.\n \n \n \nopen output bankfile.\n \n \n \nperform g\n-\nw\n-\npara until ans = 'N' or 'n'.\n \n \n \nclose bankfile.\n \n \n \n \nopen input bankfile.\n \n \n \ndisplay(1 1) erase.\n \n \n \ndisplay head\n-\n1.\n \n \n \ndisplay head\n-\n2.\n \n \n \ndisplay head\n-\n1.\n \n \nread\n-\npara.\n \n \n \nread bankfile at end go to close\n-\npara.\n \n \n \nif ( p not\n < 5000 and n not < 3 )\n \n \n \n \nmove 10 to r\n \n \n \n \ncompute tot = p * (1 +  r / 100) ** n.\n \n \n \n \n \n \n \nif ( p not < 5000 and n < 3)\n \n \n \n \nmove 8 to r\n \n \n \n \ncompute tot = p * (1 +  r / 100) ** n.\n \n \n \n \n \n \n \nif ( p < 5000)\n \n \n \n \nmove 7 to r\n \n \n \n \n \n \ncompute tot = p * (1 + r / 100) ** n.\n \n \n \n \n \n \n \nmove tot to e\n-\ntot.\n \n \n \ncompute int = tot \n-\n p.\n \n \n \nmove int to e\n-\nint.\n \n \n \nmove dno to e\n-\ndno.\n \n \n \nmove dname to e\n-\ndname.\n \n \n \nmove p to e\n-\np.\n \n \n \nmove n to e\n-\nn.\n \n \n \nmove r to e\n-\nr.\n \n \n \ndisplay head\n-\n3.\n \n      \n \n \ngo to read\n-\npara.\n \n \nclose\n-\npara.\n \n \n \ndisplay head\n-\n1.\n \n \n \nclose bankfile.\n \n \n \nstop run.\n \n \n \ng\n-\nw\n-\npara.\n This watermark does not appear in the registered version - http://www.clicktoconvert.com\n \n143\n \n \n \ndisplay(1 1) erase.\n \n \n \n \ndisplay(3 5) \"Dep No : \".\n \n \n \naccept dno.\n \n \n \ndisplay(5 5) \"Dep Name : \".\n \n \n \naccept dname.\n \n \n \ndisplay(7 5) \"Amount : \".\n \n \n \naccept p.\n \n \n \ndisplay(9 5) \"Years : \".\n \n \n \naccept n.\n \n \n \nwrite bankrec.\n \n \n \ndisplay(15 5) \"Add mor\ne [y/n] : \".\n \n \n \naccept ans.\n \n2\n5.8 \nPROGRAM FOR INVENTORY\n \n \nWrite  a program to update the inventory file. Consider 2 files,namely, invfile and \ntranfile. Invfile has 3 fields pno,name,qty. Tranfile has 3 fileds tpno,trcode,tqty. By reading \ntranfile records if t\nrcode=1 then update the qty with qty+tqty in invfile. If trcode=2 then \nupdate the qty with qty\n-\ntqty in invfile.\n \n \nidentification division.\n \n \nprogram\n-\nid.\n \n \nenvironment division.\n \n \ninput\n-\noutput section.\n \n \nfile\n-\ncontrol.\n \n \n \nselect invfile assign to disk\n \n \n \norganizati\non is indexed\n \n \n \naccess mode is dynamic\n \n \n \nrecord key is pno\n \n \n \nfile status is fs.\n \n \n \nselect tranfile assign to disk\n \n \n \norganization is line sequential.\n \n \ndata division.\n \n \nfile section.\n \n \nfd  invfile\n \n \n \nlabel records are standard\n \n \n \nvalue of file\n-\nid is \"inv.dat\".\n \n \n0\n1  invrec.\n \n \n \n02 pno  pic 9(5).\n \n \n \n02 name pic x(5).\n \n \n \n02 qty  pic 9(5).\n \n \n \nfd tranfile\n \n \n \nlabel records are standard\n \n \n \nvalue of file\n-\nid is \"tran.dat\".\n \n \n01 tranrec.\n \n \n \n02 tpno\n \npic 9(5).\n \n \n \n02 trcode pic 9.\n \n \n \n02 tqty    pic 9(5).\n \n \n \nworking\n-\nstorage section.\n \n \n01  a\nns pic x value space.\n This watermark does not appear in the registered version - http://www.clicktoconvert.com\n \n144\n \n \n01  fs  pic x(2) value spaces.\n \n \n01  key\n-\nin pic x value space.\n \n \n \nprocedure division.\n \n \np\n-\n1.\n \n \n \nopen i\n-\no invfile.\n \n \n \nif fs = \"30\"\n \n \n \n \nopen output invfile\n \n \n \n \nclose invfile\n \n \n \n \nopen i\n-\no invfile.\n \n \n \nperform g\n-\nw\n-\ninv until ans = 'n' or 'N'.\n \n \n \nmov\ne space to ans.\n \n \n \nopen output tranfile.\n \n \n \nperform g\n-\nw\n-\ntran until ans = 'n' or 'N'.\n \n \n \nclose tranfile.\n \n \n \nopen input tranfile.\n \n \nread\n-\npara.\n \n \n \nread tranfile at end go to close\n-\npara.\n \n \n \nmove tpno to pno.\n \n \n \nread invfile key is pno invalid key \n \n \n \n \n   display(5 5) \"\nNo Record Found for\" ; pno\n \n \n \n   accept key\n-\nin\n \n \n \n   go to read\n-\npara.\n \n \n \nif trcode = 1 \n \n \n \n \nadd tqty to qty\n \n \n \n \nrewrite invrec.\n \n \n \nif trcode = 2 \n \n \n \n \nsubtract tqty from qty \n \n \n \n \nrewrite invrec.\n \n \n \n \ngo to read\n-\npara.\n \n \nclose\n-\npara.\n \n \n \nclose invfile tranfile.\n \n \nop\n-\npara.\n \n \n \nopen input invfile.\n \n \nr\n-\npara.\n \n \n \nread invfile next record at end go to cl\n-\npara.\n \n \n \ndisplay(1 1) erase.\n \n \n \ndisplay(3 5) \"Part No: \" pno.\n \n \n \ndisplay(5 5) \"Name : \" name.\n \n \n \ndisplay(7 5) \"Qty : \" qty.\n \n \n \naccept key\n-\nin.\n \n \n \ngo to r\n-\npara.\n \n \ncl\n-\npara.\n \n \n \nclose invfile.\n \n \n \ns\ntop run.\n \n \ng\n-\nw\n-\ntran.\n \n \n \ndisplay(1 1) erase.\n \n \n \ndisplay(2 5) \"Tran Details ....\".\n \n \n \ndisplay(3 5) \"Part No: \".\n \n \n \naccept tpno.\n This watermark does not appear in the registered version - http://www.clicktoconvert.com\n \n145\n \n \n \ndisplay(5 5) \"Trancode : \".\n \n \n \naccept trcode.\n \n \n \ndisplay(7 5) \"Quantity : \".\n \n \n \naccept tqty.\n \n \n \nwrite tranrec.\n \n \n \ndisplay(12 5) \"Add more \n[y/n] :\".\n \n \n \naccept ans.\n \n \ng\n-\nw\n-\ninv.\n \n \n \ndisplay(1 1) erase.\n \n \n \ndisplay(2 5) \"Inven Details....\".\n \n \n \ndisplay(3 5) \"Part No: \".\n \n \n \naccept pno.\n \n \n \ndisplay(5 5) \"Name : \".\n \n \n \naccept name.\n \n \n \ndisplay(7 5) \"Quantity : \".\n \n \n \naccept qty.\n \n \n \nwrite invrec invalid key display(10\n 5) \"Rec Exists!\".\n \n \n \ndisplay(12 5) \"Add more [y/n] :\".\n \n \n \naccept ans.\u001a\n \n2\n5.9 \nPROGRAM TO REWRITE  PAY RATE\n \n \n      \n \nWrite a program to modify the hourly\n-\npay\n-\nrate based on the criteria given below:\n \n    \n \n ______________________________________\n \n       \n \n \nExisting \nHpr             Increase in Hpr\n \n        \n \n \n in Rs)\n \n \n______________________________________\n \n       \n \n \n<=5                     \n \n25%\n \n        \n \n \n>5 but <=8              \n \n20%\n \n      \n \n \n>8 but <=12             \n \n15%\n \n      \n \n  \n \n>12                     \n \n10%\n \n \n \nidentifica\ntion division.\n \n \nprogram\n-\nid.\n \n \nenvironment division.\n \n \ninput\n-\noutput section.\n \n \nfile\n-\ncontrol.\n \n \n \nselect payfile assign to disk.\n \n \ndata division.\n \n \nfile section.\n \n \nfd  payfile\n \n \n \nlabel records are standard\n \n \n \nvalue of file\n-\nid is \"pay.dat\".\n \n \n01  payrec.\n \n \n \n02 idno\n \npic x\n(3)9(6).\n \n \n \n02 name\n \npic  x(25).\n \n \n \n02 hpr\n \n \npic 99v99.\n \n \n \n02 mis \n \n \npic x(42).\n \n \nworking\n-\nstorage section.\n \n \n01   ans pic x value space.\n \n \n01 head\n-\n1 pic x(80) value all '\n-\n'.\n This watermark does not appear in the registered version - http://www.clicktoconvert.com\n \n146\n \n \n01 head\n-\n2.\n \n \n   \n \n02  f pic x(5) value spaces.\n \n \n   \n \n02  f pic x(5) value \"IDNO\".\n \n \n   \n \n02  f \npic x(5) value spaces.\n \n \n   \n \n02  f pic x(5) value \"NAME\".\n \n \n   \n \n02  f pic x(5) value spaces.\n \n \n  \n \n02  f pic x(7) value \"NEWHPR\".\n \n   \n \n   \n \n02  f pic x(36) value \"MIS INFO\".\n \n \n   \n \n02  f  pic x(12) value spaces.\n \n \n01 head\n-\n3.\n \n \n   \n \n02  e\n-\nidno pic x(3)9(6).\n \n \n   \n \n02  e\n-\nname pic x(25).\n \n \n   \n \n02  e\n-\nhpr  pic z(2).z(2).\n \n \n  \n \n \n \n \n   \n \n02  e\n-\nmis pic x(41).\n \n \nprocedure division.\n \n \np\n-\n1.\n \n \n \nopen extend payfile.\n \n \n \nperform g\n-\nw\n-\npara until ans = 'N' or 'n'.\n \n \n \nclose payfile.\n \n \n \nopen i\n-\no payfile.\n \n \nread\n-\npara.\n \n \n \nread payfile  at end go to close\n-\npara.\n \n \n \ndisplay(1 1) erase.\n \n \n \ndisplay(3 5) \"HPR = \" hpr.\n \n \n \naccept ans.\n \n \n \nif ( hpr not greater 5 )\n \n \n \n   compute hpr = hpr + hpr * 0.25.\n \n \n \nif ( hpr > 5 and hpr not greater 8 )\n \n \n \n   compute hpr = hpr + hpr * 0.20.\n \n \n \nif ( hpr > 8 and hpr not greater 12  )\n \n \n \n \n  compute hpr = hpr + hpr * 0.15.\n \n \n \n \nif ( hpr > 12 )\n \n \n \n   compute hpr = hpr + hpr * 0.10.\n \n \n \nrewrite payrec.\n \n \n \nmove 0 to hpr.\n \n \n \ngo to read\n-\npara.\n \n \nclose\n-\npara.\n \n \n \ndisplay head\n-\n1.\n \n \n \nclose payfile.\n \n \ndisp\n-\npara.\n \n \n \nopen input payfile.\n \n \n \ndisplay head\n-\n1.\n \n \n \ndisplay he\nad\n-\n2.\n \n \n \ndisplay head\n-\n1.\n \n \nread\n-\npara\n-\n1.\n \n \n \nread payfile  at end go to close\n-\npara\n-\n1.\n \n \n \nmove idno to e\n-\nidno.\n \n \n \nmove name to e\n-\nname.\n \n \n \nmove hpr to e\n-\nhpr.\n \n \n \nmove mis to e\n-\nmis.\n This watermark does not appear in the registered version - http://www.clicktoconvert.com\n \n147\n \n \n \ndisplay head\n-\n3.\n \n \n \ngo to read\n-\npara\n-\n1.\n \n \nclose\n-\npara\n-\n1.\n \n \n \ndisplay head\n-\n1.\n \n \n \nclose payfile\n.\n \n \n \nstop run.\n \n \ng\n-\nw\n-\npara.\n \n \n \ndisplay(1 1) erase.\n \n \n \ndisplay(3 5) \"ID no [ x(3) 9(6)] : \".\n \n \n \naccept idno.\n \n \n \ndisplay(5 5) \"Emp Name :\".\n \n \n \naccept name.\n \n \n \ndisplay(7 5) \" Hrly Pay Rate : \".\n \n \n \naccept hpr.\n \n \n \ndisplay(9 5) \"Miscell Info : \".\n \n \n \naccept mis.\n \n \n \nwrite payr\nec.\n \n \n \ndisplay(15 5) \"Add more (y/n) :\".\n \n \n \naccept ans.\n \n2\n5.10 \n \nPROGRAM FOR ELECTRICITY BILL\n \n \n \nAn  electricity company supplies electricity to 4  types  of \n \n        customers  coded  1,2,3 & 4.The rate schedule  for  customers  is \n \n        shown in one table \nas \n \n           Customer code            1      \n \n2       \n \n2      \n \n3      \n \n3     \n \n4\n \n           Consumption             All    Below  1000&  Below  5000&  \n \nAll  \n \n                                          \n  \n \n       \n1000   \n  \nabove  \n \n5000   \n  \nabove\n \n \n           R\nate/unit               \n    \n0.50    0.40   \n  \n0.50  \n   \n0.30   \n   \n0.50  \n     \n0.30\n \n                    \n \n           The customer record is:\n \n              col:1\n-\n5   customer no.\n \n              col:6\n-\n60  name & address.\n \n              col:61\n-\n67 consumption in units\n.\n \n              col:68    customer code.\n \n        \n \n           Read  a customer record and print a bill using GOTO  DEPENDING \n \n        ON statement.\n \n \n \nidentification division.\n \n \nprogram\n-\nid.\n \n \nenvironment division.\n \n \ninput\n-\noutput section.\n \n \nfile\n-\ncontrol.\n \n \n \nselect\n efile assign to disk\n \n \n \norganization is line sequential.\n \n \ndata division.\n \n \nfile section.\n \n \nfd  efile\n \n \n \nlabel records are standard\n \n \n \nvalue of file\n-\nid is \"e.dat\".\n This watermark does not appear in the registered version - http://www.clicktoconvert.com\n \n148\n \n \n01  erec.\n \n \n \n02  ccode\n \npic 9.\n \n \n \n02  units       pic 9(7).\n \n \n \nworking\n-\nstorage section.\n \n \n01   ans pi\nc x value space.\n \n \n01   head\n-\n1 pic x(80) value all '\n-\n'.\n \n \n01   amt  pic 9(5)v9(2) value 0.\n \n \n \n01   head\n-\n2.\n \n \n \n02  f pic x(11) value spaces.\n \n \n \n02  f pic x(6) value \"CSCODE\".\n \n \n \n02  f pic x(11) value spaces.\n \n \n \n02  f pic x(5) value \"Units\".\n \n \n \n02  f pic x(11) value\n spaces.\n \n \n \n02  f pic x(10) value \"Amount\".\n \n \n \n02  f pic x(11) value spaces.\n \n \n \n \n \n01 head\n-\n3.\n \n \n \n02  f pic x(5) value spaces.\n \n \n \n02  e\n-\nccode  pic z.\n \n \n \n02  f pic x(5) value spaces.\n \n \n \n02  e\n-\nunits pic z(7).\n \n \n \n02  f pic x(10) value spaces.\n \n \n \n02  e\n-\namt  pic z(5).z(2)\n.\n \n \n \n \n \nscreen section.\n \n \n01  b\n-\nscreen.\n \n \n \n02 blank screen.\n \n \n \nprocedure division.\n \n \np\n-\n1.\n \n \n \nopen extend efile.\n \n \n \nperform g\n-\nw\n-\npara until ans = 'n' or 'N'.\n \n \n \nclose efile.\n \n \n \n \nopen input efile.\n \n \n \ndisplay head\n-\n1.\n \n \n \ndisplay head\n-\n2.\n \n \n \ndisplay head\n-\n1.\n \n \nread\n-\npara.\n \n \n \nread\n efile at end go to close\n-\npara.\n \n \n \n \ngo to c1  c2  c3 c4 depending on ccode.\n \n \n \nc1.\n \n \n \ncompute amt = units * 0.50\n \n \n \ngo to m\n-\npara.\n \n \n \nc2.\n \n \n \nif ( units < 1000)\n This watermark does not appear in the registered version - http://www.clicktoconvert.com\n \n149\n \n \n \n \ncompute amt = units * 0.40\n \n \n \n \ngo to m\n-\npara.\n \n \n \n \nif (units not < 1000 ) \n \n \n \n        compute amt = (unit\ns \n-\n 999) * 0.5 + 999 * 0.40\n \n \n \n \ngo to m\n-\npara.\n \n \n \n \nc3.\n \n \n \nif (units < 5000)\n \n \n \ncompute amt =  units * 0.30\n \n \n \n \ngo to m\n-\npara\n \n \n \nelse\n \n \n \n \n       \n   \ncompute amt = (units \n-\n 4999) * 0.5 + 4999 * 0.30\n \n \n \n \ngo to m\n-\npara.\n \n \n \nc4.\n \n \n \n \ncompute amt = units * 0.30.\n \n        m\n-\npara.\n \n \n \n \nmove amt to e\n-\namt.\n \n \n \nmove ccode to e\n-\nccode.\n \n \n \nmove units to e\n-\nunits.\n \n \n \ndisplay head\n-\n3.\n \n \n \ngo to read\n-\npara.\n \n \n \nclose\n-\npara.\n \n \n \ndisplay head\n-\n1.\n \n \n \nclose efile.\n \n \n \nstop run.\n \n \n \ng\n-\nw\n-\npara.\n \n \n \ndisplay b\n-\nscreen.\n \n \n \ndisplay(3 5) \"Cus Code: \".\n \n \n \naccept ccode.\n \n \n \ndisplay \n(5 5) \"Units : \".\n \n \n \naccept units.\n \n \n \nwrite erec.\n \n \n \ndisplay(10 5) \"Continue [y/n] : \".\n \n \n \naccept ans.\n \n2\n5.11 \n \nPROGRAM TO CREATE 2 FILES USING AN EXISTING FILE\n \nA file contains the following records about a class.\n \n \n          \n \n \nFields              \n \nColumns\n \n      \n   \n \n \n--------\n           \n \n \n-----------\n \n           \n \nSerial No.           \n \n1\n-\n4\n \n           \n \nRoll No.             \n \n5\n-\n10\n \n           \n \nName                 \n \n11\n-\n30\n \n           \n \nAge                  \n \n31\n-\n32\n \n           \n \nSex                  \n   \n \n33\n \n           \n \nYear in c\nollege      \n \n34\n \n           \n \n           Select  records with the following characteristics  and  write \n This watermark does not appear in the registered version - http://www.clicktoconvert.com\n \n150\n \n        them in 2 files. \n \n           File\n-\n1:  Records of all males over 18 years of age who are  in \n \n        the third year in the college.  \n \n           \nFile\n-\n2:  Records of all females under 19 years of age  in  the \n \n        fourth year in the college.\n \n           Use condition names for sex and year in college.\n \n  \n \n \nidentification division.\n \n \nprogram\n-\nid.\n \n \nenvironment division.\n \n \ninput\n-\noutput section.\n \n \nfile\n-\nco\nntrol.\n \n \n \nselect collfile assign to disk\n \n \n \norganization is line sequential.\n \n \n \n \nselect malefile assign to disk\n \n \n \norganization is line sequential.\n \n \n \n \nselect femalefile assign to disk\n \n \n \norganization is line sequential.\n \n \n \ndata division.\n \n \nfile section.\n \n \nfd collf\nile\n \n \n \n \nlabel records are standard\n \n \n \nvalue of file\n-\nid is \"coll.dat\".\n \n \n \n01 collrec.\n \n \n \n02  sno   pic 9(4).\n \n \n \n02  rno   pic 9(6).\n \n \n \n02  name  pic x(20).\n \n \n \n02  age pic 9(2).\n \n \n \n02  sex pic 9.\n \n \n \n \n88 male value 1.\n \n \n \n \n88 female value is   2.\n \n \n \n02  yr  pic 9.\n \n \n \n \n88 \nthird value 3.\n \n \n \n \n88 fourth value is 4.\n \n \n \nfd malefile\n \n \n \nlabel records are standard\n \n \n \nvalue of file\n-\nid is \"male.dat\".\n \n \n01 malerec pic x(80).\n \n \n \nfd femalefile\n \n \n \nlabel records are standard\n \n \n \nvalue of file\n-\nid is \"female.dat\".\n \n \n01 femalerec pic x(80).\n \n This watermark does not appear in the registered version - http://www.clicktoconvert.com\n \n151\n \n \nworking\n-\nstorage section.\n \n \n01   ans pic x value space.\n \n \n \nprocedure division.\n \n \np\n-\n1.\n \n \n \ndisplay(1 1) erase.\n \n \n \nopen output collfile.\n \n \n \nperform g\n-\nw\n-\npara until ans = 'N' or 'n'.\n \n \n \nclose collfile.\n \n \n \n \nopen input collfile output malefile femalefile.\n \n \nread\n-\npara.\n \n \n \nread collf\nile at end go to close\n-\npara.\n \n \n \nif (male and age > 18 and third)\n \n \n \n   move collrec to malerec\n \n \n \n   write malerec.\n \n \n \nif(female and age < 19 and fourth)\n \n \n \n   move collrec to femalerec\n \n \n \n   write femalerec.\n \n \n \n \n \n \n \n \n \ngo to read\n-\npara.\n \n \n \nclose\n-\npara.\n \n \n \nclose collfi\nle malefile femalefile.\n \n \n \nstop run.\n \n \n \ng\n-\nw\n-\npara.\n \n \n \ndisplay(1 1) erase.\n \n \n \ndisplay(3 5) \"Sno : \".\n \n \n \naccept sno.\n \n \n \ndisplay(5 5) \"Rno: \".\n \n \n \naccept rno.\n \n \n \ndisplay(7 5) \"Name: \".\n \n \n \naccept name.\n \n \n \ndisplay(9 5) \"Age : \".\n \n \n \naccept age.\n \n \n \ndisplay(11 5) \"SEX (1 \n-\n Male\n ; 2 \n-\nFemale) : \".\n \n \n \naccept sex.\n \n \n \ndisplay(13 5) \"YEAR (3 \n-\n third; 4 \n-\nfourth : \".\n \n \n \naccept yr.\n \n \n \nwrite collrec.\n \n \n \ndisplay(20 5) \"Add more(y/n) :\".\n \n \n \naccept ans.\n \n2\n5.12 \nLET US SUM UP \n \nThe learner in this lesson has been introduced 11 different programs that \ninclude \nProgram for Add Corresponding, Program for Move Corresponding, Program for Condition \nnames, Program using Occurs Clause, Program for Master File Maintenance, Program for \nMaster File Maintenance (Alternate Key usage), Program to find Interest on Ban\nk Deposits, \nProgram for Inventory, Program to rewrite Pay Rate, Program for Electricity Bill and This watermark does not appear in the registered version - http://www.clicktoconvert.com\n \n152\n \nProgram to create 2 files using an Existing File. Having tried all these programs in system, \nthe learner can definitely feel confident to write good COBOL prog\nrams on his own. \n \n2\n5.13 \n \nLESSON\n-\nEND ACTIVITIES\n \nTry to find the answers for the following exercises on your own.\n \n \n1.\n \nAccept from the terminal the age and  name of a student and if he is over 21,display \nthat he is eligible to vote ; else display the number o\nf years he must wait before he can \nvote. Also check whether the last ACCEPT was terminated by  pressing f2 key or not, \nif f2 key was used as the terminating key, transfer control to the paragraph known as \nFUNC\n-\nTWO\n \n2.\n \nThe balance b in an account with a prin\ncipal p and simple interest of r % after n years \nis given by the formula: B=P (1+NR/100).\n Given p in rupees calculate and display b \nto the nearest \nrupee. Assume that n and r are integers obtained through  ACCEPT \nstatement. (one program may use arithmetic V\nerbs and the other may use compute \nstatement)\n \n3.\n \nThe format of the input record is as follows\n \n \n          \n \ncolumns                                               fields\n \n          \n \n-----------\n                                               \n--------------\n \n     \n     \n \n1 \n-\n  10                                                    part number\n \n        \n \n11 \n-\n  30                                                  Description of item\n \n         \n \n31 \n–\n 36                                                  \n \nstock quantity(xxxx.xx)\n \n        \n \n37 \n-\n  42                                                  stock value(xxxx.xx)\n \n \n \n \n(i)\n \n print the total number of records\n \n(ii) \n \nprint the heading in the format shown below:\n \n \n5 BLANKS\nPart NO\n  5 BLANKS \nDescription\n 5 BLANKS \nStock quantity\n 5 \nBLANKS \nsto\nckvalue\n \n4. \n \nA questionnaire is distributed to participant of a course. The filled in questionnaire are \nmanually checked and keyed\n-\nin one per card. Analyze the questionnaire and tabulate \nthe following data:\n \n(1)\n \nAverage age of participants.\n \n(2)\n \nAverage experiences.\n \n(3)\n \nNumber of participants tabulated by sex, degree.\n \n \nQUESTIONNARIE\n \nSerial no.\n \n \n2 col.\n \n1.   Sex :\n \n \n1 col.\n \nMale = 1\n \nFemale = 2\n \n2.  Age \n \n \n \n2 col.\n \n3.  Martial status\n \n1 col.\n \n      Single = 1\n \n      Married = 2\n \n      Other = 3\n \n4.   Number of \n \n2 cols.\n \nExperience\n \n5.  \n Highest degree. \n \n1 col.\n \n      Bachelor = 1\n This watermark does not appear in the registered version - http://www.clicktoconvert.com\n \n153\n \n      Master = 2\n \n      Doctorate = 3\n \n \n5.\n \nC\nreate a sequential file with the following record layout using the SCREEN \nSECTION\n \n \n  \n \n  FIELDS \n \n \nPICTURES\n \n \nOrder number \n \n \n \n9(6)\n \nCustomer number \n \n \n9(5)\n \nSalesman number \n \n \n9\n(4)\n \nDate \n \n \n \n \n9(6)\n \nNumber of items \n \n \n9\n \nProduct code \n \n \n \nx(6)\n \nQuantity\n \n \n \n9(5)v99\n \n6. \n \nDisplay the following menu:\n \n \n \n1.triangle\n \n \n2.square\n \n \n3.rectangle\n \nDepending on the choice, display the shape filled with asterisks (*). Assume suitable \nsize for these shapes.\n \n7\n. \n \nThe input record layout is given below:\n \n \nPositions\n \nfields\n \n1\n-\n8\n \nAccount\n-\nnumber (alphanumeric)\n \n9\n-\n15\n \nNot used\n \n16\n-\n17\n \nTrans\n-\ncode (numeric integer)\n \n18\n-\n60\n \nNot used.\n \n \nWrite a program that will sort the file in to the trans\n-\ncode into the account\n-\nnumber \norder\n \n \n8. \n \nThe telephone depart\nment maintains the following information regarding the \nsubscribers in \na\n file as follows:\n \n                     \n \n    \nColumns\n \n \n \n        \n \n \nF\nield\n \n1\n-\n5\n \nSubscriber number\n \n6\n-\n25\n \nSubscriber name\n \n26\n-\n41\n \nAddress\n \n42\n-\n48\n \nPhone\n-\nno\n \n \nThe above information about new subscribers is stored in a new \nfile. Assuming the\n \nrecords\n are already stored in both the files, merge them and create a new file.\n \n25.14\n \nREFERENCES\n \n1.\n \nCOBOL Programming , M.K.Roy  & Ghosh Dastidar , Tata McGraw Hill, \n \n2\nnd\n Edition,1998\n \n2.\n \nCOBOL Programming , V. RAJARAMAN, PHI Pub\n \n3.\n \nIntroduction t\no COBOL programming \n–\n Dr. R.Krishnamoorthy, JJ Publ\n \n4.\n \nStructured COBOL , Welburn, TataMcGraw Hill , 4\nth\n Edition.\n This watermark does not appear in the registered version - http://www.clicktoconvert.com",
  "file_path": "S:\\software\\PDFFiles\\Bachelor Of Computer Applications Cobol.pdf",
  "cached_at": "2025-08-05T14:12:23.285949",
  "text_length": 312907,
  "cache_key": "c4d7b1bc03583c55ba67c28e1e2276c7"
}