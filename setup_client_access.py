#!/usr/bin/env python3
"""
Client Access Setup Script

This script helps configure a client computer to access the Learning App
backend running on another computer in the network.

Usage:
    python setup_client_access.py --server-ip 192.168.1.100
    python setup_client_access.py --server-ip 192.168.1.100 --port 8000
"""

import argparse
import requests
import sys
from pathlib import Path


def test_backend_connection(server_ip, port):
    """Test if the backend server is accessible."""
    try:
        url = f"http://{server_ip}:{port}/"
        print(f"🔍 Testing connection to {url}")
        
        response = requests.get(url, timeout=5)
        if response.status_code == 200:
            print("✅ Backend server is accessible!")
            return True
        else:
            print(f"❌ Backend returned status code: {response.status_code}")
            return False
            
    except requests.exceptions.ConnectionError:
        print(f"❌ Cannot connect to {server_ip}:{port}")
        print("   • Check if the backend server is running")
        print("   • Verify the IP address is correct")
        print("   • Ensure firewall allows port access")
        return False
    except requests.exceptions.Timeout:
        print(f"❌ Connection timeout to {server_ip}:{port}")
        return False
    except Exception as e:
        print(f"❌ Error testing connection: {e}")
        return False


def test_authentication(server_ip, port):
    """Test if authentication works."""
    try:
        url = f"http://{server_ip}:{port}/api/auth/login"
        print(f"🔐 Testing authentication at {url}")
        
        data = {"username": "vsbec", "password": "vsbec"}
        response = requests.post(url, json=data, timeout=5)
        
        if response.status_code == 200:
            print("✅ Authentication test successful!")
            return True
        else:
            print(f"❌ Authentication failed with status: {response.status_code}")
            print(f"   Response: {response.text}")
            return False
            
    except Exception as e:
        print(f"❌ Error testing authentication: {e}")
        return False


def setup_frontend_env(server_ip, port):
    """Setup frontend .env file for client access."""
    try:
        frontend_dir = Path("frontend")
        if not frontend_dir.exists():
            print("⚠️  Frontend directory not found in current location")
            print("   Make sure you're in the project root directory")
            return False
        
        env_file = frontend_dir / ".env"
        api_url = f"http://{server_ip}:{port}/api"
        
        env_content = f"""# Backend API Configuration for Network Access
NEXT_PUBLIC_API_BASE_URL={api_url}

# Generated by setup_client_access.py
# Server IP: {server_ip}
# Server Port: {port}
"""
        
        with open(env_file, 'w') as f:
            f.write(env_content)
        
        print(f"✅ Frontend .env file updated!")
        print(f"   📍 API URL: {api_url}")
        print(f"   📁 File: {env_file}")
        return True
        
    except Exception as e:
        print(f"❌ Error setting up frontend .env: {e}")
        return False


def main():
    """Main function to setup client access."""
    parser = argparse.ArgumentParser(
        description="Setup client computer to access Learning App backend"
    )
    parser.add_argument(
        "--server-ip", 
        required=True,
        help="IP address of the server running the backend"
    )
    parser.add_argument(
        "--port", 
        type=int, 
        default=8000,
        help="Backend server port (default: 8000)"
    )
    parser.add_argument(
        "--skip-tests",
        action="store_true",
        help="Skip connectivity tests and just setup frontend"
    )
    
    args = parser.parse_args()
    
    print("🌐 Learning App - Client Access Setup")
    print("=" * 50)
    print(f"Server IP: {args.server_ip}")
    print(f"Server Port: {args.port}")
    print()
    
    success = True
    
    if not args.skip_tests:
        # Test backend connection
        if not test_backend_connection(args.server_ip, args.port):
            success = False
        
        print()
        
        # Test authentication
        if success and not test_authentication(args.server_ip, args.port):
            success = False
        
        print()
    
    # Setup frontend environment
    if not setup_frontend_env(args.server_ip, args.port):
        success = False
    
    print()
    
    if success:
        print("🎉 Client setup completed successfully!")
        print()
        print("📋 Next steps:")
        print("   1. cd frontend")
        print("   2. npm install (if not done already)")
        print("   3. npm run dev")
        print(f"   4. Open http://localhost:3000 in your browser")
        print()
        print("🔐 Login credentials:")
        print("   Username: vsbec")
        print("   Password: vsbec")
    else:
        print("❌ Setup completed with errors!")
        print("   Please check the error messages above and resolve issues")
        sys.exit(1)


if __name__ == "__main__":
    main()
