version: '3.8'

services:
  # Database
  postgres:
    image: postgres:15-alpine
    container_name: learning_app_postgres
    environment:
      POSTGRES_DB: learning_app
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./shared/database/init.sql:/docker-entrypoint-initdb.d/init.sql
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - learning_app_network

  # Redis for caching and message queue
  redis:
    image: redis:7-alpine
    container_name: learning_app_redis
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    command: redis-server --appendonly yes --maxmemory 512mb --maxmemory-policy allkeys-lru
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - learning_app_network

  # API Gateway
  api_gateway:
    build:
      context: .
      dockerfile: services/api_gateway/Dockerfile
    container_name: learning_app_gateway
    ports:
      - "8000:8000"
    environment:
      - DB_HOST=postgres
      - DB_PORT=5432
      - DB_NAME=learning_app
      - DB_USER=postgres
      - DB_PASSWORD=postgres
      - REDIS_HOST=redis
      - REDIS_PORT=6379
      - PDF_SERVICE_URL=http://pdf_service:8001
      - QUESTION_SERVICE_URL=http://question_service:8002
      - EVALUATION_SERVICE_URL=http://evaluation_service:8003
      - CHAT_SERVICE_URL=http://chat_service:8004
      - AUTH_SERVICE_URL=http://auth_service:8005
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    volumes:
      - ../books:/app/books
      - ../api_rotation:/app/api_rotation
    networks:
      - learning_app_network
    restart: unless-stopped

  # PDF Processing Service
  pdf_service:
    build:
      context: .
      dockerfile: services/pdf_service/Dockerfile
    container_name: learning_app_pdf
    ports:
      - "8001:8001"
    environment:
      - DB_HOST=postgres
      - DB_PORT=5432
      - DB_NAME=learning_app
      - DB_USER=postgres
      - DB_PASSWORD=postgres
      - REDIS_HOST=redis
      - REDIS_PORT=6379
      - BOOKS_DIR=/app/books
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    volumes:
      - ../books:/app/books
    networks:
      - learning_app_network
    restart: unless-stopped

  # Question Generation Service
  question_service:
    build:
      context: .
      dockerfile: services/question_service/Dockerfile
    container_name: learning_app_questions
    ports:
      - "8002:8002"
    environment:
      - DB_HOST=postgres
      - DB_PORT=5432
      - DB_NAME=learning_app
      - DB_USER=postgres
      - DB_PASSWORD=postgres
      - REDIS_HOST=redis
      - REDIS_PORT=6379
      - CELERY_BROKER_URL=redis://redis:6379/1
      - CELERY_RESULT_BACKEND=redis://redis:6379/2
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    volumes:
      - ../api_rotation:/app/api_rotation
    networks:
      - learning_app_network
    restart: unless-stopped

  # Question Generation Workers (Celery)
  question_worker:
    build:
      context: .
      dockerfile: services/question_service/Dockerfile
    container_name: learning_app_question_worker
    command: celery -A services.question_service.celery_app worker --loglevel=info --concurrency=4
    environment:
      - DB_HOST=postgres
      - DB_PORT=5432
      - DB_NAME=learning_app
      - DB_USER=postgres
      - DB_PASSWORD=postgres
      - REDIS_HOST=redis
      - REDIS_PORT=6379
      - CELERY_BROKER_URL=redis://redis:6379/1
      - CELERY_RESULT_BACKEND=redis://redis:6379/2
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    volumes:
      - ../api_rotation:/app/api_rotation
    networks:
      - learning_app_network
    restart: unless-stopped
    deploy:
      replicas: 2

  # Evaluation Service
  evaluation_service:
    build:
      context: .
      dockerfile: services/evaluation_service/Dockerfile
    container_name: learning_app_evaluation
    ports:
      - "8003:8003"
    environment:
      - DB_HOST=postgres
      - DB_PORT=5432
      - DB_NAME=learning_app
      - DB_USER=postgres
      - DB_PASSWORD=postgres
      - REDIS_HOST=redis
      - REDIS_PORT=6379
      - CELERY_BROKER_URL=redis://redis:6379/3
      - CELERY_RESULT_BACKEND=redis://redis:6379/4
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    volumes:
      - ../api_rotation:/app/api_rotation
    networks:
      - learning_app_network
    restart: unless-stopped

  # Evaluation Workers (Celery)
  evaluation_worker:
    build:
      context: .
      dockerfile: services/evaluation_service/Dockerfile
    container_name: learning_app_evaluation_worker
    command: celery -A services.evaluation_service.celery_app worker --loglevel=info --concurrency=6
    environment:
      - DB_HOST=postgres
      - DB_PORT=5432
      - DB_NAME=learning_app
      - DB_USER=postgres
      - DB_PASSWORD=postgres
      - REDIS_HOST=redis
      - REDIS_PORT=6379
      - CELERY_BROKER_URL=redis://redis:6379/3
      - CELERY_RESULT_BACKEND=redis://redis:6379/4
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    volumes:
      - ../api_rotation:/app/api_rotation
    networks:
      - learning_app_network
    restart: unless-stopped
    deploy:
      replicas: 3

  # Chat Service
  chat_service:
    build:
      context: .
      dockerfile: services/chat_service/Dockerfile
    container_name: learning_app_chat
    ports:
      - "8004:8004"
    environment:
      - DB_HOST=postgres
      - DB_PORT=5432
      - DB_NAME=learning_app
      - DB_USER=postgres
      - DB_PASSWORD=postgres
      - REDIS_HOST=redis
      - REDIS_PORT=6379
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    volumes:
      - ../api_rotation:/app/api_rotation
    networks:
      - learning_app_network
    restart: unless-stopped

  # Authentication Service
  auth_service:
    build:
      context: .
      dockerfile: services/auth_service/Dockerfile
    container_name: learning_app_auth
    ports:
      - "8005:8005"
    environment:
      - DB_HOST=postgres
      - DB_PORT=5432
      - DB_NAME=learning_app
      - DB_USER=postgres
      - DB_PASSWORD=postgres
      - REDIS_HOST=redis
      - REDIS_PORT=6379
      - JWT_SECRET_KEY=your-super-secret-jwt-key-change-in-production
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - learning_app_network
    restart: unless-stopped

  # Celery Flower (Task monitoring)
  flower:
    image: mher/flower:0.9.7
    container_name: learning_app_flower
    ports:
      - "5555:5555"
    environment:
      - CELERY_BROKER_URL=redis://redis:6379/1
      - FLOWER_PORT=5555
    depends_on:
      - redis
    networks:
      - learning_app_network
    restart: unless-stopped

  # Redis Commander (Redis GUI)
  redis_commander:
    image: rediscommander/redis-commander:latest
    container_name: learning_app_redis_commander
    ports:
      - "8081:8081"
    environment:
      - REDIS_HOSTS=local:redis:6379
    depends_on:
      - redis
    networks:
      - learning_app_network
    restart: unless-stopped

volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local

networks:
  learning_app_network:
    driver: bridge
